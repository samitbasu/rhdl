pub mod vlog {
    include!("../src/ast.rs");
}
pub mod formatter {
    include!("../src/formatter.rs");
}
fn main() {
    let _ = vlog::module_list({
        let mut ret = Vec::with_capacity(2usize);
        ret.push(
            vlog::module_def(
                stringify!(top_level),
                {
                    let mut ret = Vec::with_capacity(3usize);
                    ret.push(
                        vlog::port(
                            vlog::input(),
                            vlog::declaration(
                                vlog::wire(),
                                vlog::unsigned(0..=0),
                                stringify!(clk),
                            ),
                        ),
                    );
                    ret.push(
                        vlog::port(
                            vlog::input(),
                            vlog::declaration(
                                vlog::wire(),
                                vlog::unsigned(0..=3),
                                stringify!(in_data),
                            ),
                        ),
                    );
                    ret.push(
                        vlog::port(
                            vlog::output(),
                            vlog::declaration(
                                vlog::wire(),
                                vlog::unsigned(0..=3),
                                stringify!(out_data),
                            ),
                        ),
                    );
                    ret
                },
                {
                    let mut ret = Vec::with_capacity(4usize);
                    ret.push(
                        vlog::declaration_item(
                            vlog::declaration_list(
                                vlog::wire(),
                                vlog::unsigned(0..=3),
                                {
                                    let mut ret = Vec::with_capacity(2usize);
                                    ret.push(vlog::decl_kind(stringify!(intermediate1), None));
                                    ret.push(vlog::decl_kind(stringify!(intermediate2), None));
                                    ret
                                },
                            ),
                        ),
                    );
                    ret.push(
                        vlog::stmt_item(
                            vlog::instance_stmt(
                                stringify!(first_stage),
                                stringify!(stage1),
                                {
                                    let mut ret = Vec::with_capacity(3usize);
                                    ret.push(
                                        vlog::connection(
                                            stringify!(clk),
                                            vlog::paren_expr(vlog::ident_expr(stringify!(clk))),
                                        ),
                                    );
                                    ret.push(
                                        vlog::connection(
                                            stringify!(data_in),
                                            vlog::paren_expr(vlog::ident_expr(stringify!(in_data))),
                                        ),
                                    );
                                    ret.push(
                                        vlog::connection(
                                            stringify!(data_out),
                                            vlog::paren_expr(
                                                vlog::ident_expr(stringify!(intermediate1)),
                                            ),
                                        ),
                                    );
                                    ret
                                },
                            ),
                        ),
                    );
                    ret.push(
                        vlog::stmt_item(
                            vlog::instance_stmt(
                                stringify!(second_stage),
                                stringify!(stage2),
                                {
                                    let mut ret = Vec::with_capacity(3usize);
                                    ret.push(
                                        vlog::connection(
                                            stringify!(clk),
                                            vlog::paren_expr(vlog::ident_expr(stringify!(clk))),
                                        ),
                                    );
                                    ret.push(
                                        vlog::connection(
                                            stringify!(data_in),
                                            vlog::paren_expr(
                                                vlog::ident_expr(stringify!(intermediate1)),
                                            ),
                                        ),
                                    );
                                    ret.push(
                                        vlog::connection(
                                            stringify!(data_out),
                                            vlog::paren_expr(
                                                vlog::ident_expr(stringify!(intermediate2)),
                                            ),
                                        ),
                                    );
                                    ret
                                },
                            ),
                        ),
                    );
                    ret.push(
                        vlog::stmt_item(
                            vlog::instance_stmt(
                                stringify!(third_stage),
                                stringify!(stage3),
                                {
                                    let mut ret = Vec::with_capacity(3usize);
                                    ret.push(
                                        vlog::connection(
                                            stringify!(clk),
                                            vlog::paren_expr(vlog::ident_expr(stringify!(clk))),
                                        ),
                                    );
                                    ret.push(
                                        vlog::connection(
                                            stringify!(data_in),
                                            vlog::paren_expr(
                                                vlog::ident_expr(stringify!(intermediate2)),
                                            ),
                                        ),
                                    );
                                    ret.push(
                                        vlog::connection(
                                            stringify!(data_out),
                                            vlog::paren_expr(vlog::ident_expr(stringify!(out_data))),
                                        ),
                                    );
                                    ret
                                },
                            ),
                        ),
                    );
                    ret
                },
            ),
        );
        ret.push(
            vlog::module_def(
                stringify!(first_stage),
                {
                    let mut ret = Vec::with_capacity(3usize);
                    ret.push(
                        vlog::port(
                            vlog::input(),
                            vlog::declaration(
                                vlog::wire(),
                                vlog::unsigned(0..=0),
                                stringify!(clk),
                            ),
                        ),
                    );
                    ret.push(
                        vlog::port(
                            vlog::input(),
                            vlog::declaration(
                                vlog::wire(),
                                vlog::unsigned(0..=3),
                                stringify!(data_in),
                            ),
                        ),
                    );
                    ret.push(
                        vlog::port(
                            vlog::output(),
                            vlog::declaration(
                                vlog::reg(),
                                vlog::unsigned(0..=3),
                                stringify!(data_out),
                            ),
                        ),
                    );
                    ret
                },
                {
                    let mut ret = Vec::with_capacity(1usize);
                    ret.push(
                        vlog::stmt_item(
                            vlog::always_stmt(
                                {
                                    let mut ret = Vec::with_capacity(1usize);
                                    ret.push(vlog::pos_edge(stringify!(clk)));
                                    ret
                                },
                                vlog::block_stmt({
                                    let mut ret = Vec::with_capacity(1usize);
                                    ret.push(
                                        vlog::nonblock_assign_stmt(
                                            vlog::assign_target_ident(stringify!(data_out)),
                                            vlog::binary_expr(
                                                vlog::ident_expr(stringify!(data_in)),
                                                vlog::binary_plus(),
                                                vlog::constant_expr(vlog::lit_verilog(4, stringify!(b0001))),
                                            ),
                                        ),
                                    );
                                    ret
                                }),
                            ),
                        ),
                    );
                    ret
                },
            ),
        );
        ret
    });
}
