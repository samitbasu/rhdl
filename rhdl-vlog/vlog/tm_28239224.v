// Autogenerated testbench for kernel_add
module testbench();
    wire [7:0] out;
    reg [15:0] arg_0;
    assign out = kernel_add(arg_0);
    initial begin
        arg_0 = 16'b0000000000000000;
        #0;
        if (8'b00000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 8'b00000000, out);
            $finish;
        end
        arg_0 = 16'b0000000100000000;
        #0;
        if (8'b00000001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 8'b00000001, out);
            $finish;
        end
        arg_0 = 16'b0000001000000000;
        #0;
        if (8'b00000010 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 8'b00000010, out);
            $finish;
        end
        arg_0 = 16'b0000001100000000;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 8'b00000011, out);
            $finish;
        end
        arg_0 = 16'b0000000000000001;
        #0;
        if (8'b00000001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 4", 8'b00000001, out);
            $finish;
        end
        arg_0 = 16'b0000000100000001;
        #0;
        if (8'b00000010 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 5", 8'b00000010, out);
            $finish;
        end
        arg_0 = 16'b0000001000000001;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 6", 8'b00000011, out);
            $finish;
        end
        arg_0 = 16'b0000001100000001;
        #0;
        if (8'b00000100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 7", 8'b00000100, out);
            $finish;
        end
        arg_0 = 16'b0000000000000010;
        #0;
        if (8'b00000010 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 8", 8'b00000010, out);
            $finish;
        end
        arg_0 = 16'b0000000100000010;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 9", 8'b00000011, out);
            $finish;
        end
        arg_0 = 16'b0000001000000010;
        #0;
        if (8'b00000100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 10", 8'b00000100, out);
            $finish;
        end
        arg_0 = 16'b0000001100000010;
        #0;
        if (8'b00000101 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 11", 8'b00000101, out);
            $finish;
        end
        arg_0 = 16'b0000000000000011;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 12", 8'b00000011, out);
            $finish;
        end
        arg_0 = 16'b0000000100000011;
        #0;
        if (8'b00000100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 13", 8'b00000100, out);
            $finish;
        end
        arg_0 = 16'b0000001000000011;
        #0;
        if (8'b00000101 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 14", 8'b00000101, out);
            $finish;
        end
        arg_0 = 16'b0000001100000011;
        #0;
        if (8'b00000110 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 15", 8'b00000110, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
    function [7:0] kernel_add(input reg [15:0] arg_0);
        reg [7:0] or0;
        reg [15:0] or1;
        reg [7:0] or2;
        reg [7:0] or3;
        reg [7:0] or4;
        begin
            or1 = arg_0;
            or0 = or1[7:0];
            or2 = or1[15:8];
            // let b = b.val();
            //
            // let c = c.val();
            //
            // signal((b + c).resize())
            //
            or3 = or0 + or2;
            or4 = or3[7:0];
            kernel_add = or4;
        end
    endfunction
endmodule
