// Autogenerated testbench for kernel_do_stuff
module testbench();
    wire [48:0] out;
    reg [21:0] arg_0;
    assign out = kernel_do_stuff(arg_0);
    initial begin
        arg_0 = 22'b0000100001001000000001;
        #0;
        if (49'b0000100001111000000001010001000010000000100000001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 49'b0000100001111000000001010001000010000000100000001, out);
            $finish;
        end
        arg_0 = 22'b0000100001001000000001;
        #0;
        if (49'b0000100001111000000001010001000010000000100000001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 49'b0000100001111000000001010001000010000000100000001, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
    function [48:0] kernel_do_stuff(input reg [21:0] arg_0);
        reg [48:0] or0;
        reg [21:0] or1;
        localparam ol0 = 49'b0000100001111000000001010001000010000000100000001;
        begin
            or1 = arg_0;
            // let _z = (a.val().b, a.val().a, );
            //
            // let _c = a;
            //
            // let q = signed(-2);
            //
            // let c = Rad/* inference::Rad */ {x: bits(1), y: bits(2),};
            //
            // let d = Foo/* inference::Foo */ {a: bits(1), b: q, c: c,};
            //
            // let Foo {a: ar, b: _, c: _,} = d;
            //
            // let _q = Bar(bits(1), bits(2));
            //
            // let x = NooState::Run(bits(1), bits(2));
            //
            // let e = ar;
            //
            // signal((e, ar, x, d, ))
            //
            or0 = ol0;
            kernel_do_stuff = or0;
        end
    endfunction
endmodule
