// Autogenerated testbench for dut
module testbench();
    wire [0:0] out;
    reg [7:0] arg_0;
    reg [5:0] arg_1;
    dut t (.out(out),.arg_0(arg_0),.arg_1(arg_1));
    initial begin
        arg_0 = 8'b00010001;
        arg_1 = 6'b000000;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00010001;
        arg_1 = 6'b001001;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00010001;
        arg_1 = 6'b010010;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00010001;
        arg_1 = 6'b011011;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00010001;
        arg_1 = 6'b100100;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 4", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00010001;
        arg_1 = 6'b101101;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 5", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00010001;
        arg_1 = 6'b110110;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 6", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00010001;
        arg_1 = 6'b111111;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 7", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00100010;
        arg_1 = 6'b000000;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 8", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00100010;
        arg_1 = 6'b001001;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 9", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00100010;
        arg_1 = 6'b010010;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 10", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00100010;
        arg_1 = 6'b011011;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 11", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00100010;
        arg_1 = 6'b100100;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 12", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00100010;
        arg_1 = 6'b101101;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 13", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00100010;
        arg_1 = 6'b110110;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 14", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00100010;
        arg_1 = 6'b111111;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 15", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00110011;
        arg_1 = 6'b000000;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 16", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00110011;
        arg_1 = 6'b001001;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 17", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00110011;
        arg_1 = 6'b010010;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 18", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00110011;
        arg_1 = 6'b011011;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 19", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00110011;
        arg_1 = 6'b100100;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 20", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00110011;
        arg_1 = 6'b101101;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 21", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00110011;
        arg_1 = 6'b110110;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 22", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00110011;
        arg_1 = 6'b111111;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 23", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11111111;
        arg_1 = 6'b000000;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 24", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11111111;
        arg_1 = 6'b001001;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 25", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11111111;
        arg_1 = 6'b010010;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 26", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11111111;
        arg_1 = 6'b011011;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 27", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11111111;
        arg_1 = 6'b100100;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 28", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11111111;
        arg_1 = 6'b101101;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 29", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11111111;
        arg_1 = 6'b110110;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 30", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11111111;
        arg_1 = 6'b111111;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 31", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11011101;
        arg_1 = 6'b000000;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 32", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11011101;
        arg_1 = 6'b001001;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 33", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11011101;
        arg_1 = 6'b010010;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 34", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11011101;
        arg_1 = 6'b011011;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 35", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11011101;
        arg_1 = 6'b100100;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 36", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11011101;
        arg_1 = 6'b101101;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 37", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11011101;
        arg_1 = 6'b110110;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 38", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11011101;
        arg_1 = 6'b111111;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 39", 1'b1, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
endmodule
//
module dut(input wire [7:0] arg_0, input wire [5:0] arg_1, output reg [0:0] out);
    reg [0:0] r4;
    reg [0:0] r5;
    reg [0:0] r6;
    reg [0:0] r7;
    reg [0:0] r8;
    reg [0:0] r9;
    reg [0:0] r10;
    reg [0:0] r11;
    reg [0:0] r28;
    reg [0:0] r29;
    reg [0:0] r30;
    reg [0:0] r31;
    reg [0:0] r32;
    reg [0:0] r33;
    reg [0:0] r34;
    always @(*) begin
        r4 = arg_0[0];
        r5 = arg_0[1];
        r6 = arg_0[2];
        r7 = arg_0[3];
        r8 = arg_0[4];
        r9 = arg_0[5];
        r10 = arg_0[6];
        r11 = arg_0[7];
        r29 = arg_1[0];
        r30 = arg_1[1];
        r31 = arg_1[2];
        r32 = arg_1[3];
        r33 = arg_1[4];
        r34 = arg_1[5];
        // let x = x.val();
        //
        // let y = y.val();
        //
        // let c = x.a;
        //
        // let _d = (x.a, y.b, );
        //
        // let e = Foo/* ast::Foo<rhdl::rhdl_bits::signed_bits_impl::SignedBits<rhdl::rhdl_typenum::consts::U4>> */ {a: c, b: c,};
        //
        // signal(e == x)
        //
        { r28 } = { r7, r6, r5, r4, r7, r6, r5, r4 } == { r11, r10, r9, r8, r7, r6, r5, r4 };
        out = { r28 };
    end
endmodule
