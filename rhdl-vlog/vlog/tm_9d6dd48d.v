// Autogenerated testbench for kernel_do_stuff
module testbench();
    wire [17:0] out;
    reg [23:0] arg_0;
    reg [10:0] arg_1;
    assign out = kernel_do_stuff(arg_0, arg_1);
    initial begin
        arg_0 = 24'b000000000000001000000001;
        arg_1 = 11'b00000000000;
        #0;
        if (18'b000001100000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 18'b000001100000000000, out);
            $finish;
        end
        arg_0 = 24'b000000000000001000000001;
        arg_1 = 11'b11000000000;
        #0;
        if (18'b000001100000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 18'b000001100000000000, out);
            $finish;
        end
        arg_0 = 24'b000000000000001000000001;
        arg_1 = 11'b01000100001;
        #0;
        if (18'b000001100000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 18'b000001100000000000, out);
            $finish;
        end
        arg_0 = 24'b000000000000001000000001;
        arg_1 = 11'b10000000011;
        #0;
        if (18'b000001100000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 18'b000001100000000000, out);
            $finish;
        end
        arg_0 = 24'b010000000001001000000001;
        arg_1 = 11'b00000000000;
        #0;
        if (18'b000001100000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 4", 18'b000001100000000000, out);
            $finish;
        end
        arg_0 = 24'b010000000001001000000001;
        arg_1 = 11'b11000000000;
        #0;
        if (18'b000001100000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 5", 18'b000001100000000000, out);
            $finish;
        end
        arg_0 = 24'b010000000001001000000001;
        arg_1 = 11'b01000100001;
        #0;
        if (18'b000001100000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 6", 18'b000001100000000000, out);
            $finish;
        end
        arg_0 = 24'b010000000001001000000001;
        arg_1 = 11'b10000000011;
        #0;
        if (18'b000001100000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 7", 18'b000001100000000000, out);
            $finish;
        end
        arg_0 = 24'b100000100001001000000001;
        arg_1 = 11'b00000000000;
        #0;
        if (18'b000001100000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 8", 18'b000001100000000000, out);
            $finish;
        end
        arg_0 = 24'b100000100001001000000001;
        arg_1 = 11'b11000000000;
        #0;
        if (18'b000001100000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 9", 18'b000001100000000000, out);
            $finish;
        end
        arg_0 = 24'b100000100001001000000001;
        arg_1 = 11'b01000100001;
        #0;
        if (18'b000001100000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 10", 18'b000001100000000000, out);
            $finish;
        end
        arg_0 = 24'b100000100001001000000001;
        arg_1 = 11'b10000000011;
        #0;
        if (18'b000001100000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 11", 18'b000001100000000000, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
    function [17:0] kernel_do_stuff(input reg [23:0] arg_0, input reg [10:0] arg_1);
        reg [17:0] or0;
        reg [23:0] or1;
        reg [10:0] or2;
        localparam ol0 = 18'b000001100000000000;
        begin
            or1 = arg_0;
            or2 = arg_1;
            // let _z = (a.val().b, a.val().a + MY_SPECIAL_NUMBER, );
            //
            // let foo = bits(6);
            //
            // let _foo2 = foo + foo;
            //
            // let _c = a;
            //
            // let q = signed(2);
            //
            // let _q = Foo/* adt::Foo */ {a: bits(1), b: q, c: Rad :: A,};
            //
            // signal((NooState :: Init, bits(3), ))
            //
            or0 = ol0;
            kernel_do_stuff = or0;
        end
    endfunction
endmodule
