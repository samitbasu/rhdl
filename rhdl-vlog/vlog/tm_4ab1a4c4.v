// Autogenerated testbench for dut
module testbench();
    wire [7:0] out;
    reg [15:0] arg_0;
    dut t (.out(out),.arg_0(arg_0));
    initial begin
        arg_0 = 16'b0000000000000000;
        #0;
        if (8'b00000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 8'b00000000, out);
            $finish;
        end
        arg_0 = 16'b0000000100000000;
        #0;
        if (8'b00000001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 8'b00000001, out);
            $finish;
        end
        arg_0 = 16'b0000001000000000;
        #0;
        if (8'b00000010 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 8'b00000010, out);
            $finish;
        end
        arg_0 = 16'b0000001100000000;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 8'b00000011, out);
            $finish;
        end
        arg_0 = 16'b0000000000000001;
        #0;
        if (8'b00000001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 4", 8'b00000001, out);
            $finish;
        end
        arg_0 = 16'b0000000100000001;
        #0;
        if (8'b00000010 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 5", 8'b00000010, out);
            $finish;
        end
        arg_0 = 16'b0000001000000001;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 6", 8'b00000011, out);
            $finish;
        end
        arg_0 = 16'b0000001100000001;
        #0;
        if (8'b00000100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 7", 8'b00000100, out);
            $finish;
        end
        arg_0 = 16'b0000000000000010;
        #0;
        if (8'b00000010 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 8", 8'b00000010, out);
            $finish;
        end
        arg_0 = 16'b0000000100000010;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 9", 8'b00000011, out);
            $finish;
        end
        arg_0 = 16'b0000001000000010;
        #0;
        if (8'b00000100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 10", 8'b00000100, out);
            $finish;
        end
        arg_0 = 16'b0000001100000010;
        #0;
        if (8'b00000101 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 11", 8'b00000101, out);
            $finish;
        end
        arg_0 = 16'b0000000000000011;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 12", 8'b00000011, out);
            $finish;
        end
        arg_0 = 16'b0000000100000011;
        #0;
        if (8'b00000100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 13", 8'b00000100, out);
            $finish;
        end
        arg_0 = 16'b0000001000000011;
        #0;
        if (8'b00000101 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 14", 8'b00000101, out);
            $finish;
        end
        arg_0 = 16'b0000001100000011;
        #0;
        if (8'b00000110 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 15", 8'b00000110, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
endmodule
//
module dut(input wire [15:0] arg_0, output reg [7:0] out);
    reg [0:0] r8;
    reg [0:0] r9;
    reg [0:0] r10;
    reg [0:0] r11;
    reg [0:0] r12;
    reg [0:0] r13;
    reg [0:0] r14;
    reg [0:0] r15;
    reg [0:0] r16;
    reg [0:0] r17;
    reg [0:0] r18;
    reg [0:0] r19;
    reg [0:0] r20;
    reg [0:0] r21;
    reg [0:0] r22;
    reg [0:0] r23;
    reg [0:0] r32;
    reg [0:0] r33;
    reg [0:0] r34;
    reg [0:0] r35;
    reg [0:0] r36;
    reg [0:0] r37;
    reg [0:0] r38;
    reg [0:0] r39;
    always @(*) begin
        r8 = arg_0[0];
        r9 = arg_0[1];
        r10 = arg_0[2];
        r11 = arg_0[3];
        r12 = arg_0[4];
        r13 = arg_0[5];
        r14 = arg_0[6];
        r15 = arg_0[7];
        r16 = arg_0[8];
        r17 = arg_0[9];
        r18 = arg_0[10];
        r19 = arg_0[11];
        r20 = arg_0[12];
        r21 = arg_0[13];
        r22 = arg_0[14];
        r23 = arg_0[15];
        // let b = b.val();
        //
        // let c = c.val();
        //
        // signal((b + c).resize())
        //
        { r39,r38,r37,r36,r35,r34,r33,r32 } = { r15, r14, r13, r12, r11, r10, r9, r8 } + { r23, r22, r21, r20, r19, r18, r17, r16 };
        out = { r39, r38, r37, r36, r35, r34, r33, r32 };
    end
endmodule
