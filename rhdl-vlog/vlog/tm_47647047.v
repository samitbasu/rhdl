// Autogenerated testbench for kernel_do_stuff
module testbench();
    wire [33:0] out;
    reg [25:0] arg_0;
    assign out = kernel_do_stuff(arg_0);
    initial begin
        arg_0 = 26'b00000000000000000000000000;
        #0;
        if (34'b0100000011000000100000000100000001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 34'b0100000011000000100000000100000001, out);
            $finish;
        end
        arg_0 = 26'b11000000000000000000000000;
        #0;
        if (34'b0000000000000000000000000000000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 34'b0000000000000000000000000000000011, out);
            $finish;
        end
        arg_0 = 26'b01000000110000001000000001;
        #0;
        if (34'b1000000000000000000000011100000100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 34'b1000000000000000000000011100000100, out);
            $finish;
        end
        arg_0 = 26'b10000000000000000000000100;
        #0;
        if (34'b1100000000000000000000000000000100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 34'b1100000000000000000000000000000100, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
    function [33:0] kernel_do_stuff(input reg [25:0] arg_0);
        reg [25:0] or0;
        reg [1:0] or1;
        reg [7:0] or2;
        reg [23:0] or3;
        reg [7:0] or4;
        reg [7:0] or5;
        reg [7:0] or6;
        reg [7:0] or7;
        reg [7:0] or8;  // a
        reg [25:0] or9;
        reg [33:0] or10;
        localparam ol0 = 2'b00;
        localparam ol1 = 8'b00000001;
        localparam ol2 = 2'b10;
        localparam ol3 = 2'b01;
        localparam ol4 = 2'b11;
        localparam ol5 = 8'b00000011;
        localparam ol6 = 26'b01000000110000001000000001;
        localparam ol7 = 26'b11000000000000000000000000;
        localparam ol8 = 26'b10000000000000000000000111;
        localparam ol9 = 26'b00000000000000000000000000;
        begin
            or0 = arg_0;
            // let _y = bits(72);
            //
            // let _foo = bits(32);
            //
            // let a: b8 = bits(0);
            //
            // let d = match s.val() {
            //    const NooState::Init => {
            //       a = bits(1);
            //       NooState::Run(bits(1), bits(2), bits(3))
            //    }
            //    ,
            //    NooState::Walk {foo: x,}#2_b2 => {
            //       a = x;
            //       NooState :: Boom
            //    }
            //    ,
            //    NooState::Run(x, _, y, )#1_b2 => {
            //       a = (x + y).resize();
            //       NooState::Walk/* adt::NooState */ {foo: bits(7),}
            //    }
            //    ,
            //    const NooState::Boom => {
            //       a = (a + 3).resize();
            //       NooState :: Init
            //    }
            //    ,
            // };
            //
            or1 = or0[25:24];
            // a = bits(1);
            //
            // NooState::Run(bits(1), bits(2), bits(3))
            //
            or2 = or0[7:0];
            // a = x;
            //
            // NooState :: Boom
            //
            or3 = or0[23:0];
            or4 = or3[7:0];
            or5 = or3[23:16];
            // a = (x + y).resize();
            //
            or6 = or4 + or5;
            or7 = or6[7:0];
            // NooState::Walk/* adt::NooState */ {foo: bits(7),}
            //
            // a = (a + 3).resize();
            //
            // NooState :: Init
            //
            case (or1)
                2'b00: or8 = ol1;
                2'b10: or8 = or2;
                2'b01: or8 = or7;
                2'b11: or8 = ol5;
            endcase
            case (or1)
                2'b00: or9 = ol6;
                2'b10: or9 = ol7;
                2'b01: or9 = ol8;
                2'b11: or9 = ol9;
            endcase
            // signal((a, d, ))
            //
            or10 = { or9, or8 };
            kernel_do_stuff = or10;
        end
    endfunction
endmodule
