// Autogenerated testbench for kernel_add
module testbench();
    wire [3:0] out;
    reg [3:0] arg_0;
    assign out = kernel_add(arg_0);
    initial begin
        arg_0 = 4'b0000;
        #0;
        if (4'b1001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 4'b1001, out);
            $finish;
        end
        arg_0 = 4'b0001;
        #0;
        if (4'b1011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 4'b1011, out);
            $finish;
        end
        arg_0 = 4'b0010;
        #0;
        if (4'b1101 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 4'b1101, out);
            $finish;
        end
        arg_0 = 4'b0011;
        #0;
        if (4'b1111 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 4'b1111, out);
            $finish;
        end
        arg_0 = 4'b0100;
        #0;
        if (4'b0001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 4", 4'b0001, out);
            $finish;
        end
        arg_0 = 4'b0101;
        #0;
        if (4'b0011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 5", 4'b0011, out);
            $finish;
        end
        arg_0 = 4'b0110;
        #0;
        if (4'b0101 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 6", 4'b0101, out);
            $finish;
        end
        arg_0 = 4'b0111;
        #0;
        if (4'b0111 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 7", 4'b0111, out);
            $finish;
        end
        arg_0 = 4'b1000;
        #0;
        if (4'b1001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 8", 4'b1001, out);
            $finish;
        end
        arg_0 = 4'b1001;
        #0;
        if (4'b1011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 9", 4'b1011, out);
            $finish;
        end
        arg_0 = 4'b1010;
        #0;
        if (4'b1101 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 10", 4'b1101, out);
            $finish;
        end
        arg_0 = 4'b1011;
        #0;
        if (4'b1111 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 11", 4'b1111, out);
            $finish;
        end
        arg_0 = 4'b1100;
        #0;
        if (4'b0001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 12", 4'b0001, out);
            $finish;
        end
        arg_0 = 4'b1101;
        #0;
        if (4'b0011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 13", 4'b0011, out);
            $finish;
        end
        arg_0 = 4'b1110;
        #0;
        if (4'b0101 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 14", 4'b0101, out);
            $finish;
        end
        arg_0 = 4'b1111;
        #0;
        if (4'b0111 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 15", 4'b0111, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
    function [3:0] kernel_add(input reg [3:0] arg_0);
        reg [3:0] or0;
        reg [3:0] or1;
        reg [3:0] or2;
        reg [9:0] or3;
        reg [9:0] or4;
        reg [3:0] or5;
        reg [3:0] or6;
        reg [3:0] or7;
        reg signed [5:0] or8;
        reg [0:0] or9;
        reg [3:0] or10;
        reg [3:0] or11;
        localparam ol0 = 4'b0011;
        localparam ol1 = 10'b0000000000;
        localparam ol2 = 6'sb001011;
        localparam ol3 = 4'b0010;
        localparam ol4 = 6'sb000000;
        localparam ol5 = 4'b0001;
        localparam ol6 = 4'b0010;
        begin
            or0 = arg_0;
            // let a = a.val();
            //
            // let b = bits(3);
            //
            // let d = signed(11);
            //
            // let c = b + a;
            //
            or1 = ol0 + or0;
            // let c = c.resize();
            //
            or2 = or1[3:0];
            // let _k = c.any();
            //
            // let h = Tuplo(c, d);
            //
            or3 = ol1; or3[3:0] = or2;
            or4 = or3; or4[9:4] = ol2;
            // let p = h.0;
            //
            or5 = or4[3:0];
            // let _q = NooState::Run(c, d);
            //
            // signal(c + add_one(signal(p)).val() + if h.1 > 0 {
            //    1
            // }
            //  else {
            //    2
            // }
            // )
            //
            // add_two(a)
            //
            // signal(a.val() + 2)
            //
            or6 = or5 + ol3;
            or7 = or2 + or6;
            or8 = or4[9:4];
            or9 = or8 > ol4;
            // 1
            //
            // 2
            //
            or10 = (or9) ? (ol5) : (ol6);
            or11 = or7 + or10;
            kernel_add = or11;
        end
    endfunction
endmodule
