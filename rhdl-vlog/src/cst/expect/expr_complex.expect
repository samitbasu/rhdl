rhdl :: vlog :: Expr :: Binary (rhdl :: vlog :: ExprBinary { lhs : Box :: new (rhdl :: vlog :: Expr :: Binary (rhdl :: vlog :: ExprBinary { lhs : Box :: new (rhdl :: vlog :: Expr :: Ident (stringify ! (d) . into ())) , op : rhdl :: vlog :: BinaryOp :: Plus , rhs : Box :: new (rhdl :: vlog :: Expr :: Literal (3)) })) , op : rhdl :: vlog :: BinaryOp :: Plus , rhs : Box :: new (rhdl :: vlog :: Expr :: Unary (rhdl :: vlog :: ExprUnary { op : rhdl :: vlog :: UnaryOp :: Not , arg : Box :: new (rhdl :: vlog :: Expr :: Paren (Box :: new (rhdl :: vlog :: Expr :: Binary (rhdl :: vlog :: ExprBinary { lhs : Box :: new (rhdl :: vlog :: Expr :: Binary (rhdl :: vlog :: ExprBinary { lhs : Box :: new (rhdl :: vlog :: Expr :: Unary (rhdl :: vlog :: ExprUnary { op : rhdl :: vlog :: UnaryOp :: Xor , arg : Box :: new (rhdl :: vlog :: Expr :: Literal (4)) , })) , op : rhdl :: vlog :: BinaryOp :: Plus , rhs : Box :: new (rhdl :: vlog :: Expr :: Binary (rhdl :: vlog :: ExprBinary { lhs : Box :: new (rhdl :: vlog :: Expr :: Binary (rhdl :: vlog :: ExprBinary { lhs : Box :: new (rhdl :: vlog :: Expr :: Binary (rhdl :: vlog :: ExprBinary { lhs : Box :: new (rhdl :: vlog :: Expr :: Literal (4)) , op : rhdl :: vlog :: BinaryOp :: Mul , rhs : Box :: new (rhdl :: vlog :: Expr :: Ident (stringify ! (c) . into ())) })) , op : rhdl :: vlog :: BinaryOp :: Mul , rhs : Box :: new (rhdl :: vlog :: Expr :: Literal (6)) })) , op : rhdl :: vlog :: BinaryOp :: Mod , rhs : Box :: new (rhdl :: vlog :: Expr :: Literal (8)) })) })) , op : rhdl :: vlog :: BinaryOp :: And , rhs : Box :: new (rhdl :: vlog :: Expr :: Literal (5)) })))) , })) })