vlog :: module_def (stringify ! (dut) , { let elem0 = vlog :: port (vlog :: input () , vlog :: declaration (vlog :: wire () , vlog :: unsigned (0 ..= 7) , stringify ! (arg_0))) ; let elem1 = vlog :: port (vlog :: input () , vlog :: declaration (vlog :: wire () , vlog :: unsigned (0 ..= 7) , stringify ! (arg_1))) ; let elem2 = vlog :: port (vlog :: output () , vlog :: declaration (vlog :: reg () , vlog :: unsigned (0 ..= 0) , stringify ! (out))) ; vec ! [elem0 , elem1 , elem2] } , { let elem0 = vlog :: declaration_item (vlog :: declaration (vlog :: reg () , vlog :: unsigned (0 ..= 0) , stringify ! (r0))) ; let elem1 = vlog :: declaration_item (vlog :: declaration (vlog :: reg () , vlog :: unsigned (0 ..= 0) , stringify ! (r1))) ; let elem2 = vlog :: declaration_item (vlog :: declaration (vlog :: reg () , vlog :: unsigned (0 ..= 0) , stringify ! (r2))) ; let elem3 = vlog :: declaration_item (vlog :: declaration (vlog :: reg () , vlog :: unsigned (0 ..= 0) , stringify ! (r3))) ; let elem4 = vlog :: declaration_item (vlog :: declaration (vlog :: reg () , vlog :: unsigned (0 ..= 0) , stringify ! (r4))) ; let elem5 = vlog :: declaration_item (vlog :: declaration (vlog :: reg () , vlog :: unsigned (0 ..= 0) , stringify ! (r5))) ; let elem6 = vlog :: declaration_item (vlog :: declaration (vlog :: reg () , vlog :: unsigned (0 ..= 0) , stringify ! (r6))) ; let elem7 = vlog :: declaration_item (vlog :: declaration (vlog :: reg () , vlog :: unsigned (0 ..= 0) , stringify ! (r7))) ; let elem8 = vlog :: declaration_item (vlog :: declaration (vlog :: reg () , vlog :: unsigned (0 ..= 0) , stringify ! (r8))) ; let elem9 = vlog :: declaration_item (vlog :: declaration (vlog :: reg () , vlog :: unsigned (0 ..= 0) , stringify ! (r9))) ; let elem10 = vlog :: declaration_item (vlog :: declaration (vlog :: reg () , vlog :: unsigned (0 ..= 0) , stringify ! (r10))) ; let elem11 = vlog :: declaration_item (vlog :: declaration (vlog :: reg () , vlog :: unsigned (0 ..= 0) , stringify ! (r11))) ; let elem12 = vlog :: declaration_item (vlog :: declaration (vlog :: reg () , vlog :: unsigned (0 ..= 0) , stringify ! (r12))) ; let elem13 = vlog :: declaration_item (vlog :: declaration (vlog :: reg () , vlog :: unsigned (0 ..= 0) , stringify ! (r13))) ; let elem14 = vlog :: declaration_item (vlog :: declaration (vlog :: reg () , vlog :: unsigned (0 ..= 0) , stringify ! (r14))) ; let elem15 = vlog :: declaration_item (vlog :: declaration (vlog :: reg () , vlog :: unsigned (0 ..= 0) , stringify ! (r15))) ; let elem16 = vlog :: declaration_item (vlog :: declaration (vlog :: reg () , vlog :: unsigned (0 ..= 0) , stringify ! (r16))) ; let elem17 = vlog :: stmt_item (vlog :: always_stmt ({ let elem0 = vlog :: star () ; vec ! [elem0] } , vlog :: block_stmt ({ let elem0 = vlog :: assign_stmt (stringify ! (r0) , vlog :: index_expr (stringify ! (arg_0) , vlog :: literal_expr (0) , None)) ; let elem1 = vlog :: assign_stmt (stringify ! (r1) , vlog :: index_expr (stringify ! (arg_0) , vlog :: literal_expr (1) , None)) ; let elem2 = vlog :: assign_stmt (stringify ! (r2) , vlog :: index_expr (stringify ! (arg_0) , vlog :: literal_expr (2) , None)) ; let elem3 = vlog :: assign_stmt (stringify ! (r3) , vlog :: index_expr (stringify ! (arg_0) , vlog :: literal_expr (3) , None)) ; let elem4 = vlog :: assign_stmt (stringify ! (r4) , vlog :: index_expr (stringify ! (arg_0) , vlog :: literal_expr (4) , None)) ; let elem5 = vlog :: assign_stmt (stringify ! (r5) , vlog :: index_expr (stringify ! (arg_0) , vlog :: literal_expr (5) , None)) ; let elem6 = vlog :: assign_stmt (stringify ! (r6) , vlog :: index_expr (stringify ! (arg_0) , vlog :: literal_expr (6) , None)) ; let elem7 = vlog :: assign_stmt (stringify ! (r7) , vlog :: index_expr (stringify ! (arg_0) , vlog :: literal_expr (7) , None)) ; let elem8 = vlog :: assign_stmt (stringify ! (r8) , vlog :: index_expr (stringify ! (arg_1) , vlog :: literal_expr (0) , None)) ; let elem9 = vlog :: assign_stmt (stringify ! (r9) , vlog :: index_expr (stringify ! (arg_1) , vlog :: literal_expr (1) , None)) ; let elem10 = vlog :: assign_stmt (stringify ! (r10) , vlog :: index_expr (stringify ! (arg_1) , vlog :: literal_expr (2) , None)) ; let elem11 = vlog :: assign_stmt (stringify ! (r11) , vlog :: index_expr (stringify ! (arg_1) , vlog :: literal_expr (3) , None)) ; let elem12 = vlog :: assign_stmt (stringify ! (r12) , vlog :: index_expr (stringify ! (arg_1) , vlog :: literal_expr (4) , None)) ; let elem13 = vlog :: assign_stmt (stringify ! (r13) , vlog :: index_expr (stringify ! (arg_1) , vlog :: literal_expr (5) , None)) ; let elem14 = vlog :: assign_stmt (stringify ! (r14) , vlog :: index_expr (stringify ! (arg_1) , vlog :: literal_expr (6) , None)) ; let elem15 = vlog :: assign_stmt (stringify ! (r15) , vlog :: index_expr (stringify ! (arg_1) , vlog :: literal_expr (7) , None)) ; let elem16 = vlog :: concat_assign_stmt ({ let elem0 = vlog :: ident_expr (stringify ! (r16)) ; vec ! [elem0] } , vlog :: binary_expr (vlog :: function_expr (stringify ! (signed) , { let elem0 = vlog :: concat_expr ({ let elem0 = vlog :: ident_expr (stringify ! (r7)) ; let elem1 = vlog :: ident_expr (stringify ! (r6)) ; let elem2 = vlog :: ident_expr (stringify ! (r5)) ; let elem3 = vlog :: ident_expr (stringify ! (r4)) ; let elem4 = vlog :: ident_expr (stringify ! (r3)) ; let elem5 = vlog :: ident_expr (stringify ! (r2)) ; let elem6 = vlog :: ident_expr (stringify ! (r1)) ; let elem7 = vlog :: ident_expr (stringify ! (r0)) ; vec ! [elem0 , elem1 , elem2 , elem3 , elem4 , elem5 , elem6 , elem7] }) ; vec ! [elem0] }) , vlog :: binary_ge () , vlog :: function_expr (stringify ! (signed) , { let elem0 = vlog :: concat_expr ({ let elem0 = vlog :: ident_expr (stringify ! (r15)) ; let elem1 = vlog :: ident_expr (stringify ! (r14)) ; let elem2 = vlog :: ident_expr (stringify ! (r13)) ; let elem3 = vlog :: ident_expr (stringify ! (r12)) ; let elem4 = vlog :: ident_expr (stringify ! (r11)) ; let elem5 = vlog :: ident_expr (stringify ! (r10)) ; let elem6 = vlog :: ident_expr (stringify ! (r9)) ; let elem7 = vlog :: ident_expr (stringify ! (r8)) ; vec ! [elem0 , elem1 , elem2 , elem3 , elem4 , elem5 , elem6 , elem7] }) ; vec ! [elem0] }))) ; let elem17 = vlog :: assign_stmt (stringify ! (out) , vlog :: concat_expr ({ let elem0 = vlog :: ident_expr (stringify ! (r16)) ; vec ! [elem0] })) ; vec ! [elem0 , elem1 , elem2 , elem3 , elem4 , elem5 , elem6 , elem7 , elem8 , elem9 , elem10 , elem11 , elem12 , elem13 , elem14 , elem15 , elem16 , elem17] }))) ; vec ! [elem0 , elem1 , elem2 , elem3 , elem4 , elem5 , elem6 , elem7 , elem8 , elem9 , elem10 , elem11 , elem12 , elem13 , elem14 , elem15 , elem16 , elem17] })