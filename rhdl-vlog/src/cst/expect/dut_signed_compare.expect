vlog :: module_def (stringify ! (dut) , { let mut ret = Vec :: with_capacity (3usize) ; ret . push (vlog :: port (vlog :: input () , vlog :: declaration (vlog :: wire () , vlog :: unsigned (0 ..= 7) , stringify ! (arg_0)))) ; ret . push (vlog :: port (vlog :: input () , vlog :: declaration (vlog :: wire () , vlog :: unsigned (0 ..= 7) , stringify ! (arg_1)))) ; ret . push (vlog :: port (vlog :: output () , vlog :: declaration (vlog :: reg () , vlog :: unsigned (0 ..= 0) , stringify ! (out)))) ; ret } , { let mut ret = Vec :: with_capacity (18usize) ; ret . push (vlog :: declaration_item (vlog :: declaration_list (vlog :: reg () , vlog :: unsigned (0 ..= 0) , { let mut ret = Vec :: with_capacity (1usize) ; ret . push (vlog :: decl_kind (stringify ! (r0) , None)) ; ret }))) ; ret . push (vlog :: declaration_item (vlog :: declaration_list (vlog :: reg () , vlog :: unsigned (0 ..= 0) , { let mut ret = Vec :: with_capacity (1usize) ; ret . push (vlog :: decl_kind (stringify ! (r1) , None)) ; ret }))) ; ret . push (vlog :: declaration_item (vlog :: declaration_list (vlog :: reg () , vlog :: unsigned (0 ..= 0) , { let mut ret = Vec :: with_capacity (1usize) ; ret . push (vlog :: decl_kind (stringify ! (r2) , None)) ; ret }))) ; ret . push (vlog :: declaration_item (vlog :: declaration_list (vlog :: reg () , vlog :: unsigned (0 ..= 0) , { let mut ret = Vec :: with_capacity (1usize) ; ret . push (vlog :: decl_kind (stringify ! (r3) , None)) ; ret }))) ; ret . push (vlog :: declaration_item (vlog :: declaration_list (vlog :: reg () , vlog :: unsigned (0 ..= 0) , { let mut ret = Vec :: with_capacity (1usize) ; ret . push (vlog :: decl_kind (stringify ! (r4) , None)) ; ret }))) ; ret . push (vlog :: declaration_item (vlog :: declaration_list (vlog :: reg () , vlog :: unsigned (0 ..= 0) , { let mut ret = Vec :: with_capacity (1usize) ; ret . push (vlog :: decl_kind (stringify ! (r5) , None)) ; ret }))) ; ret . push (vlog :: declaration_item (vlog :: declaration_list (vlog :: reg () , vlog :: unsigned (0 ..= 0) , { let mut ret = Vec :: with_capacity (1usize) ; ret . push (vlog :: decl_kind (stringify ! (r6) , None)) ; ret }))) ; ret . push (vlog :: declaration_item (vlog :: declaration_list (vlog :: reg () , vlog :: unsigned (0 ..= 0) , { let mut ret = Vec :: with_capacity (1usize) ; ret . push (vlog :: decl_kind (stringify ! (r7) , None)) ; ret }))) ; ret . push (vlog :: declaration_item (vlog :: declaration_list (vlog :: reg () , vlog :: unsigned (0 ..= 0) , { let mut ret = Vec :: with_capacity (1usize) ; ret . push (vlog :: decl_kind (stringify ! (r8) , None)) ; ret }))) ; ret . push (vlog :: declaration_item (vlog :: declaration_list (vlog :: reg () , vlog :: unsigned (0 ..= 0) , { let mut ret = Vec :: with_capacity (1usize) ; ret . push (vlog :: decl_kind (stringify ! (r9) , None)) ; ret }))) ; ret . push (vlog :: declaration_item (vlog :: declaration_list (vlog :: reg () , vlog :: unsigned (0 ..= 0) , { let mut ret = Vec :: with_capacity (1usize) ; ret . push (vlog :: decl_kind (stringify ! (r10) , None)) ; ret }))) ; ret . push (vlog :: declaration_item (vlog :: declaration_list (vlog :: reg () , vlog :: unsigned (0 ..= 0) , { let mut ret = Vec :: with_capacity (1usize) ; ret . push (vlog :: decl_kind (stringify ! (r11) , None)) ; ret }))) ; ret . push (vlog :: declaration_item (vlog :: declaration_list (vlog :: reg () , vlog :: unsigned (0 ..= 0) , { let mut ret = Vec :: with_capacity (1usize) ; ret . push (vlog :: decl_kind (stringify ! (r12) , None)) ; ret }))) ; ret . push (vlog :: declaration_item (vlog :: declaration_list (vlog :: reg () , vlog :: unsigned (0 ..= 0) , { let mut ret = Vec :: with_capacity (1usize) ; ret . push (vlog :: decl_kind (stringify ! (r13) , None)) ; ret }))) ; ret . push (vlog :: declaration_item (vlog :: declaration_list (vlog :: reg () , vlog :: unsigned (0 ..= 0) , { let mut ret = Vec :: with_capacity (1usize) ; ret . push (vlog :: decl_kind (stringify ! (r14) , None)) ; ret }))) ; ret . push (vlog :: declaration_item (vlog :: declaration_list (vlog :: reg () , vlog :: unsigned (0 ..= 0) , { let mut ret = Vec :: with_capacity (1usize) ; ret . push (vlog :: decl_kind (stringify ! (r15) , None)) ; ret }))) ; ret . push (vlog :: declaration_item (vlog :: declaration_list (vlog :: reg () , vlog :: unsigned (0 ..= 0) , { let mut ret = Vec :: with_capacity (1usize) ; ret . push (vlog :: decl_kind (stringify ! (r16) , None)) ; ret }))) ; ret . push (vlog :: stmt_item (vlog :: always_stmt ({ let mut ret = Vec :: with_capacity (1usize) ; ret . push (vlog :: star ()) ; ret } , vlog :: block_stmt ({ let mut ret = Vec :: with_capacity (18usize) ; ret . push (vlog :: assign_stmt (vlog :: assign_target_ident (stringify ! (r0)) , vlog :: index_expr (stringify ! (arg_0) , vlog :: literal_expr (0) , None))) ; ret . push (vlog :: assign_stmt (vlog :: assign_target_ident (stringify ! (r1)) , vlog :: index_expr (stringify ! (arg_0) , vlog :: literal_expr (1) , None))) ; ret . push (vlog :: assign_stmt (vlog :: assign_target_ident (stringify ! (r2)) , vlog :: index_expr (stringify ! (arg_0) , vlog :: literal_expr (2) , None))) ; ret . push (vlog :: assign_stmt (vlog :: assign_target_ident (stringify ! (r3)) , vlog :: index_expr (stringify ! (arg_0) , vlog :: literal_expr (3) , None))) ; ret . push (vlog :: assign_stmt (vlog :: assign_target_ident (stringify ! (r4)) , vlog :: index_expr (stringify ! (arg_0) , vlog :: literal_expr (4) , None))) ; ret . push (vlog :: assign_stmt (vlog :: assign_target_ident (stringify ! (r5)) , vlog :: index_expr (stringify ! (arg_0) , vlog :: literal_expr (5) , None))) ; ret . push (vlog :: assign_stmt (vlog :: assign_target_ident (stringify ! (r6)) , vlog :: index_expr (stringify ! (arg_0) , vlog :: literal_expr (6) , None))) ; ret . push (vlog :: assign_stmt (vlog :: assign_target_ident (stringify ! (r7)) , vlog :: index_expr (stringify ! (arg_0) , vlog :: literal_expr (7) , None))) ; ret . push (vlog :: assign_stmt (vlog :: assign_target_ident (stringify ! (r8)) , vlog :: index_expr (stringify ! (arg_1) , vlog :: literal_expr (0) , None))) ; ret . push (vlog :: assign_stmt (vlog :: assign_target_ident (stringify ! (r9)) , vlog :: index_expr (stringify ! (arg_1) , vlog :: literal_expr (1) , None))) ; ret . push (vlog :: assign_stmt (vlog :: assign_target_ident (stringify ! (r10)) , vlog :: index_expr (stringify ! (arg_1) , vlog :: literal_expr (2) , None))) ; ret . push (vlog :: assign_stmt (vlog :: assign_target_ident (stringify ! (r11)) , vlog :: index_expr (stringify ! (arg_1) , vlog :: literal_expr (3) , None))) ; ret . push (vlog :: assign_stmt (vlog :: assign_target_ident (stringify ! (r12)) , vlog :: index_expr (stringify ! (arg_1) , vlog :: literal_expr (4) , None))) ; ret . push (vlog :: assign_stmt (vlog :: assign_target_ident (stringify ! (r13)) , vlog :: index_expr (stringify ! (arg_1) , vlog :: literal_expr (5) , None))) ; ret . push (vlog :: assign_stmt (vlog :: assign_target_ident (stringify ! (r14)) , vlog :: index_expr (stringify ! (arg_1) , vlog :: literal_expr (6) , None))) ; ret . push (vlog :: assign_stmt (vlog :: assign_target_ident (stringify ! (r15)) , vlog :: index_expr (stringify ! (arg_1) , vlog :: literal_expr (7) , None))) ; ret . push (vlog :: concat_assign_stmt ({ let mut ret = Vec :: with_capacity (1usize) ; ret . push (vlog :: ident_expr (stringify ! (r16))) ; ret } , vlog :: binary_expr (vlog :: function_expr (stringify ! (signed) , { let mut ret = Vec :: with_capacity (1usize) ; ret . push (vlog :: concat_expr ({ let mut ret = Vec :: with_capacity (8usize) ; ret . push (vlog :: ident_expr (stringify ! (r7))) ; ret . push (vlog :: ident_expr (stringify ! (r6))) ; ret . push (vlog :: ident_expr (stringify ! (r5))) ; ret . push (vlog :: ident_expr (stringify ! (r4))) ; ret . push (vlog :: ident_expr (stringify ! (r3))) ; ret . push (vlog :: ident_expr (stringify ! (r2))) ; ret . push (vlog :: ident_expr (stringify ! (r1))) ; ret . push (vlog :: ident_expr (stringify ! (r0))) ; ret })) ; ret }) , vlog :: binary_ge () , vlog :: function_expr (stringify ! (signed) , { let mut ret = Vec :: with_capacity (1usize) ; ret . push (vlog :: concat_expr ({ let mut ret = Vec :: with_capacity (8usize) ; ret . push (vlog :: ident_expr (stringify ! (r15))) ; ret . push (vlog :: ident_expr (stringify ! (r14))) ; ret . push (vlog :: ident_expr (stringify ! (r13))) ; ret . push (vlog :: ident_expr (stringify ! (r12))) ; ret . push (vlog :: ident_expr (stringify ! (r11))) ; ret . push (vlog :: ident_expr (stringify ! (r10))) ; ret . push (vlog :: ident_expr (stringify ! (r9))) ; ret . push (vlog :: ident_expr (stringify ! (r8))) ; ret })) ; ret })))) ; ret . push (vlog :: assign_stmt (vlog :: assign_target_ident (stringify ! (out)) , vlog :: concat_expr ({ let mut ret = Vec :: with_capacity (1usize) ; ret . push (vlog :: ident_expr (stringify ! (r16))) ; ret }))) ; ret })))) ; ret })