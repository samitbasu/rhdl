{ let arg0 = rhdl :: vlog :: Port { direction : rhdl :: vlog :: Direction :: Input , decl : rhdl :: vlog :: Declaration { kind : rhdl :: vlog :: HDLKind :: Wire , signed_width : rhdl :: vlog :: SignedWidth :: Unsigned (0 ..= 7) , name : stringify ! (arg_0) . into () } , } ; let arg1 = rhdl :: vlog :: Port { direction : rhdl :: vlog :: Direction :: Output , decl : rhdl :: vlog :: Declaration { kind : rhdl :: vlog :: HDLKind :: Reg , signed_width : rhdl :: vlog :: SignedWidth :: Unsigned (0 ..= 7) , name : stringify ! (out) . into () } , } ; let args_vec = vec ! [arg0 , arg1 ,] ; let item0 = rhdl :: vlog :: Item :: Declaration (rhdl :: vlog :: Declaration { kind : rhdl :: vlog :: HDLKind :: Reg , signed_width : rhdl :: vlog :: SignedWidth :: Unsigned (0 ..= 0) , name : stringify ! (r0) . into () }) ; let item1 = rhdl :: vlog :: Item :: Declaration (rhdl :: vlog :: Declaration { kind : rhdl :: vlog :: HDLKind :: Reg , signed_width : rhdl :: vlog :: SignedWidth :: Unsigned (0 ..= 0) , name : stringify ! (r1) . into () }) ; let item2 = rhdl :: vlog :: Item :: Declaration (rhdl :: vlog :: Declaration { kind : rhdl :: vlog :: HDLKind :: Reg , signed_width : rhdl :: vlog :: SignedWidth :: Unsigned (0 ..= 0) , name : stringify ! (r2) . into () }) ; let item3 = rhdl :: vlog :: Item :: Declaration (rhdl :: vlog :: Declaration { kind : rhdl :: vlog :: HDLKind :: Reg , signed_width : rhdl :: vlog :: SignedWidth :: Unsigned (0 ..= 0) , name : stringify ! (r3) . into () }) ; let item4 = rhdl :: vlog :: Item :: Declaration (rhdl :: vlog :: Declaration { kind : rhdl :: vlog :: HDLKind :: Reg , signed_width : rhdl :: vlog :: SignedWidth :: Unsigned (0 ..= 0) , name : stringify ! (r4) . into () }) ; let item5 = rhdl :: vlog :: Item :: Declaration (rhdl :: vlog :: Declaration { kind : rhdl :: vlog :: HDLKind :: Reg , signed_width : rhdl :: vlog :: SignedWidth :: Unsigned (0 ..= 0) , name : stringify ! (r5) . into () }) ; let item6 = rhdl :: vlog :: Item :: Declaration (rhdl :: vlog :: Declaration { kind : rhdl :: vlog :: HDLKind :: Reg , signed_width : rhdl :: vlog :: SignedWidth :: Unsigned (0 ..= 0) , name : stringify ! (r6) . into () }) ; let item7 = rhdl :: vlog :: Item :: Declaration (rhdl :: vlog :: Declaration { kind : rhdl :: vlog :: HDLKind :: Reg , signed_width : rhdl :: vlog :: SignedWidth :: Unsigned (0 ..= 0) , name : stringify ! (r7) . into () }) ; let item8 = rhdl :: vlog :: Item :: Declaration (rhdl :: vlog :: Declaration { kind : rhdl :: vlog :: HDLKind :: Reg , signed_width : rhdl :: vlog :: SignedWidth :: Unsigned (0 ..= 0) , name : stringify ! (r8) . into () }) ; let item9 = rhdl :: vlog :: Item :: Declaration (rhdl :: vlog :: Declaration { kind : rhdl :: vlog :: HDLKind :: Reg , signed_width : rhdl :: vlog :: SignedWidth :: Unsigned (0 ..= 0) , name : stringify ! (r9) . into () }) ; let item10 = rhdl :: vlog :: Item :: Declaration (rhdl :: vlog :: Declaration { kind : rhdl :: vlog :: HDLKind :: Reg , signed_width : rhdl :: vlog :: SignedWidth :: Unsigned (0 ..= 0) , name : stringify ! (r10) . into () }) ; let item11 = rhdl :: vlog :: Item :: Declaration (rhdl :: vlog :: Declaration { kind : rhdl :: vlog :: HDLKind :: Reg , signed_width : rhdl :: vlog :: SignedWidth :: Unsigned (0 ..= 0) , name : stringify ! (r11) . into () }) ; let item12 = rhdl :: vlog :: Item :: Declaration (rhdl :: vlog :: Declaration { kind : rhdl :: vlog :: HDLKind :: Reg , signed_width : rhdl :: vlog :: SignedWidth :: Unsigned (0 ..= 0) , name : stringify ! (r12) . into () }) ; let item13 = rhdl :: vlog :: Item :: Declaration (rhdl :: vlog :: Declaration { kind : rhdl :: vlog :: HDLKind :: Reg , signed_width : rhdl :: vlog :: SignedWidth :: Unsigned (0 ..= 0) , name : stringify ! (r13) . into () }) ; let item14 = rhdl :: vlog :: Item :: Declaration (rhdl :: vlog :: Declaration { kind : rhdl :: vlog :: HDLKind :: Reg , signed_width : rhdl :: vlog :: SignedWidth :: Unsigned (0 ..= 0) , name : stringify ! (r14) . into () }) ; let item15 = rhdl :: vlog :: Item :: Declaration (rhdl :: vlog :: Declaration { kind : rhdl :: vlog :: HDLKind :: Reg , signed_width : rhdl :: vlog :: SignedWidth :: Unsigned (0 ..= 0) , name : stringify ! (r15) . into () }) ; let item16 = rhdl :: vlog :: Item :: Statement (rhdl :: vlog :: Stmt :: Always (rhdl :: vlog :: Always { sensitivity : vec ! [rhdl :: vlog :: Sensitivity :: Star] , body : Box :: new (rhdl :: vlog :: Stmt :: Block ({ let stmt0 = rhdl :: vlog :: Stmt :: Assign (rhdl :: vlog :: Assign { target : stringify ! (r0) . into () , rhs : Box :: new (rhdl :: vlog :: Expr :: Index (rhdl :: vlog :: ExprIndex { target : stringify ! (arg_0) . into () , address : rhdl :: vlog :: ExprIndexAddress { msb : Box :: new (rhdl :: vlog :: Expr :: Literal (0)) , lsb : . map (Box :: new) , } , })) , }) ; let stmt1 = rhdl :: vlog :: Stmt :: Assign (rhdl :: vlog :: Assign { target : stringify ! (r1) . into () , rhs : Box :: new (rhdl :: vlog :: Expr :: Index (rhdl :: vlog :: ExprIndex { target : stringify ! (arg_0) . into () , address : rhdl :: vlog :: ExprIndexAddress { msb : Box :: new (rhdl :: vlog :: Expr :: Literal (1)) , lsb : . map (Box :: new) , } , })) , }) ; let stmt2 = rhdl :: vlog :: Stmt :: Assign (rhdl :: vlog :: Assign { target : stringify ! (r2) . into () , rhs : Box :: new (rhdl :: vlog :: Expr :: Index (rhdl :: vlog :: ExprIndex { target : stringify ! (arg_0) . into () , address : rhdl :: vlog :: ExprIndexAddress { msb : Box :: new (rhdl :: vlog :: Expr :: Literal (2)) , lsb : . map (Box :: new) , } , })) , }) ; let stmt3 = rhdl :: vlog :: Stmt :: Assign (rhdl :: vlog :: Assign { target : stringify ! (r3) . into () , rhs : Box :: new (rhdl :: vlog :: Expr :: Index (rhdl :: vlog :: ExprIndex { target : stringify ! (arg_0) . into () , address : rhdl :: vlog :: ExprIndexAddress { msb : Box :: new (rhdl :: vlog :: Expr :: Literal (3)) , lsb : . map (Box :: new) , } , })) , }) ; let stmt4 = rhdl :: vlog :: Stmt :: Assign (rhdl :: vlog :: Assign { target : stringify ! (r4) . into () , rhs : Box :: new (rhdl :: vlog :: Expr :: Index (rhdl :: vlog :: ExprIndex { target : stringify ! (arg_0) . into () , address : rhdl :: vlog :: ExprIndexAddress { msb : Box :: new (rhdl :: vlog :: Expr :: Literal (4)) , lsb : . map (Box :: new) , } , })) , }) ; let stmt5 = rhdl :: vlog :: Stmt :: Assign (rhdl :: vlog :: Assign { target : stringify ! (r5) . into () , rhs : Box :: new (rhdl :: vlog :: Expr :: Index (rhdl :: vlog :: ExprIndex { target : stringify ! (arg_0) . into () , address : rhdl :: vlog :: ExprIndexAddress { msb : Box :: new (rhdl :: vlog :: Expr :: Literal (5)) , lsb : . map (Box :: new) , } , })) , }) ; let stmt6 = rhdl :: vlog :: Stmt :: Assign (rhdl :: vlog :: Assign { target : stringify ! (r6) . into () , rhs : Box :: new (rhdl :: vlog :: Expr :: Index (rhdl :: vlog :: ExprIndex { target : stringify ! (arg_0) . into () , address : rhdl :: vlog :: ExprIndexAddress { msb : Box :: new (rhdl :: vlog :: Expr :: Literal (6)) , lsb : . map (Box :: new) , } , })) , }) ; let stmt7 = rhdl :: vlog :: Stmt :: Assign (rhdl :: vlog :: Assign { target : stringify ! (r7) . into () , rhs : Box :: new (rhdl :: vlog :: Expr :: Index (rhdl :: vlog :: ExprIndex { target : stringify ! (arg_0) . into () , address : rhdl :: vlog :: ExprIndexAddress { msb : Box :: new (rhdl :: vlog :: Expr :: Literal (7)) , lsb : . map (Box :: new) , } , })) , }) ; let stmt8 = rhdl :: vlog :: Stmt :: ConcatAssign (rhdl :: vlog :: ConcatAssign { target : vec ! [rhdl :: vlog :: Expr :: Ident (stringify ! (r15) . into ()) , rhdl :: vlog :: Expr :: Ident (stringify ! (r14) . into ()) , rhdl :: vlog :: Expr :: Ident (stringify ! (r13) . into ()) , rhdl :: vlog :: Expr :: Ident (stringify ! (r12) . into ()) , rhdl :: vlog :: Expr :: Ident (stringify ! (r11) . into ()) , rhdl :: vlog :: Expr :: Ident (stringify ! (r10) . into ()) , rhdl :: vlog :: Expr :: Ident (stringify ! (r9) . into ()) , rhdl :: vlog :: Expr :: Ident (stringify ! (r8) . into ()) ,] rhs : Box :: new (rhdl :: vlog :: Expr :: Binary (rhdl :: vlog :: ExprBinary { lhs : Box :: new (rhdl :: vlog :: Expr :: Concat (vec ! [rhdl :: vlog :: Expr :: Constant (rhdl :: vlog :: LitVerilog { width : 1 , value : stringify ! (b0) . into () , }) , rhdl :: vlog :: Expr :: Constant (rhdl :: vlog :: LitVerilog { width : 1 , value : stringify ! (b0) . into () , }) , rhdl :: vlog :: Expr :: Constant (rhdl :: vlog :: LitVerilog { width : 1 , value : stringify ! (b0) . into () , }) , rhdl :: vlog :: Expr :: Constant (rhdl :: vlog :: LitVerilog { width : 1 , value : stringify ! (b0) . into () , }) , rhdl :: vlog :: Expr :: Constant (rhdl :: vlog :: LitVerilog { width : 1 , value : stringify ! (b0) . into () , }) , rhdl :: vlog :: Expr :: Constant (rhdl :: vlog :: LitVerilog { width : 1 , value : stringify ! (b1) . into () , }) , rhdl :: vlog :: Expr :: Constant (rhdl :: vlog :: LitVerilog { width : 1 , value : stringify ! (b1) . into () , }) , rhdl :: vlog :: Expr :: Constant (rhdl :: vlog :: LitVerilog { width : 1 , value : stringify ! (b0) . into () , }) ,])) , op : rhdl :: vlog :: BinaryOp :: Plus , rhs : Box :: new (rhdl :: vlog :: Expr :: Concat (vec ! [rhdl :: vlog :: Expr :: Ident (stringify ! (r7) . into ()) , rhdl :: vlog :: Expr :: Ident (stringify ! (r6) . into ()) , rhdl :: vlog :: Expr :: Ident (stringify ! (r5) . into ()) , rhdl :: vlog :: Expr :: Ident (stringify ! (r4) . into ()) , rhdl :: vlog :: Expr :: Ident (stringify ! (r3) . into ()) , rhdl :: vlog :: Expr :: Ident (stringify ! (r2) . into ()) , rhdl :: vlog :: Expr :: Ident (stringify ! (r1) . into ()) , rhdl :: vlog :: Expr :: Ident (stringify ! (r0) . into ()) ,])) })) , }) ; let stmt9 = rhdl :: vlog :: Stmt :: Assign (rhdl :: vlog :: Assign { target : stringify ! (out) . into () , rhs : Box :: new (rhdl :: vlog :: Expr :: Concat (vec ! [rhdl :: vlog :: Expr :: Ident (stringify ! (r15) . into ()) , rhdl :: vlog :: Expr :: Ident (stringify ! (r14) . into ()) , rhdl :: vlog :: Expr :: Ident (stringify ! (r13) . into ()) , rhdl :: vlog :: Expr :: Ident (stringify ! (r12) . into ()) , rhdl :: vlog :: Expr :: Ident (stringify ! (r11) . into ()) , rhdl :: vlog :: Expr :: Ident (stringify ! (r10) . into ()) , rhdl :: vlog :: Expr :: Ident (stringify ! (r9) . into ()) , rhdl :: vlog :: Expr :: Ident (stringify ! (r8) . into ()) ,])) , }) ; vec ! [stmt0 , stmt1 , stmt2 , stmt3 , stmt4 , stmt5 , stmt6 , stmt7 , stmt8 , stmt9 ,] })) , })) ; let items_vec = vec ! [item0 , item1 , item2 , item3 , item4 , item5 , item6 , item7 , item8 , item9 , item10 , item11 , item12 , item13 , item14 , item15 , item16 ,] ; rhdl :: vlog :: ModuleDef { name : stringify ! (dut) . into () , args : args_vec , items : items_vec , } }