vlog :: module_def (stringify ! (foo) , { let elem0 = vlog :: port (vlog :: input () , vlog :: declaration (vlog :: wire () , vlog :: unsigned (0 ..= 2) , stringify ! (clock_reset))) ; let elem1 = vlog :: port (vlog :: input () , vlog :: declaration (vlog :: wire () , vlog :: unsigned (0 ..= 7) , stringify ! (i))) ; let elem2 = vlog :: port (vlog :: output () , vlog :: declaration (vlog :: wire () , vlog :: unsigned (0 ..= 7) , stringify ! (o))) ; vec ! [elem0 , elem1 , elem2] } , { let elem0 = vlog :: declaration_item (vlog :: declaration (vlog :: wire () , vlog :: unsigned (0 ..= 0) , stringify ! (clock))) ; let elem1 = vlog :: declaration_item (vlog :: declaration (vlog :: wire () , vlog :: unsigned (0 ..= 0) , stringify ! (reset))) ; let elem2 = vlog :: stmt_item (vlog :: continuous_assign_stmt (stringify ! (clock) , vlog :: index_expr (stringify ! (clock_reset) , vlog :: literal_expr (0) , None))) ; let elem3 = vlog :: stmt_item (vlog :: continuous_assign_stmt (stringify ! (wire) , vlog :: index_expr (stringify ! (clock_reset) , vlog :: literal_expr (1) , None))) ; let elem4 = vlog :: stmt_item (vlog :: always_stmt ({ let elem0 = vlog :: pos_edge (stringify ! (clock)) ; vec ! [elem0] } , vlog :: block_stmt ({ let elem0 = vlog :: if_stmt (vlog :: ident_expr (stringify ! (reset)) , vlog :: block_stmt ({ let elem0 = vlog :: nonblock_assign_stmt (stringify ! (o) , vlog :: constant_expr (vlog :: lit_verilog (8 , stringify ! (b0)))) ; vec ! [elem0] }) , Some (vlog :: block_stmt ({ let elem0 = vlog :: nonblock_assign_stmt (stringify ! (o) , vlog :: ident_expr (stringify ! (i))) ; vec ! [elem0] }))) ; vec ! [elem0] }))) ; vec ! [elem0 , elem1 , elem2 , elem3 , elem4] })