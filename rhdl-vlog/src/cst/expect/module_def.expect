{ let arg0 = rhdl :: vlog :: Port { direction : rhdl :: vlog :: Direction :: Input , decl : rhdl :: vlog :: Declaration { kind : rhdl :: vlog :: HDLKind :: Wire , signed_width : rhdl :: vlog :: SignedWidth :: Unsigned (0 ..= 2) , name : stringify ! (clock_reset) . into () } , } ; let arg1 = rhdl :: vlog :: Port { direction : rhdl :: vlog :: Direction :: Input , decl : rhdl :: vlog :: Declaration { kind : rhdl :: vlog :: HDLKind :: Wire , signed_width : rhdl :: vlog :: SignedWidth :: Unsigned (0 ..= 7) , name : stringify ! (i) . into () } , } ; let arg2 = rhdl :: vlog :: Port { direction : rhdl :: vlog :: Direction :: Output , decl : rhdl :: vlog :: Declaration { kind : rhdl :: vlog :: HDLKind :: Wire , signed_width : rhdl :: vlog :: SignedWidth :: Unsigned (0 ..= 7) , name : stringify ! (o) . into () } , } ; let args_vec = vec ! [arg0 , arg1 , arg2 ,] ; let items_vec = vec ! [] ; rhdl :: vlog :: ModuleDef { name : stringify ! (foo) . into () , args : args_vec , items : items_vec , } }