[{"Start":"HtmlBlock"},{"Html":"<pre><code class=\"hljs hide-boring\"><span style='color:var(--cyan,#0aa)'>xor ❯</span> <b>cargo build -q</b>\n<span style='color:var(--cyan,#0aa)'>xor ❯</span> <b>cargo test</b>\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n\nrunning 1 test\ntest test_verilog_output ... FAILED\n\nfailures:\n\n---- test_verilog_output stdout ----\n\n\n<b><span style='color:var(--bright-red,#f55)'>error<span style='color:var(--bright-white,#fff)'>: expect test failed</span></span></b>\n   <b><span style='color:var(--blue,#00a)'>--></span></b> xor.v.expect\n\nYou can update all `expect!` tests by running:\n\n    env UPDATE_EXPECT=1 cargo test\n\nTo update a single test, place the cursor on `expect` token and use `run` feature of rust-analyzer.\n\n<b>Expect</b>:\n----\n\n----\n\n<b>Actual</b>:\n----\nmodule xor_gate(input wire [1:0] i, output wire [0:0] o);\n   wire [0:0] od;\n   assign o = od[0:0];\n   assign od = kernel_xor_gate(i);\n   function [0:0] kernel_xor_gate(input reg [1:0] arg_0);\n         reg [1:0] r0;\n         reg [0:0] r1;\n         reg [0:0] r2;\n         reg [0:0] r3;\n         begin\n            r0 = arg_0;\n            r1 = r0[0:0];\n            r2 = r0[1:1];\n            r3 = r1 ^ r2;\n            kernel_xor_gate = r3;\n         end\n   endfunction\nendmodule\n\n----\n\n<b>Diff</b>:\n----\n<u><span style='color:var(--green,#0a0)'>module xor_gate(input wire [1:0] i, output wire [0:0] o);\n   wire [0:0] od;\n   assign o = od[0:0];\n   assign od = kernel_xor_gate(i);\n   function [0:0] kernel_xor_gate(input reg [1:0] arg_0);\n         reg [1:0] r0;\n         reg [0:0] r1;\n         reg [0:0] r2;\n         reg [0:0] r3;\n         begin\n            r0 = arg_0;\n            r1 = r0[0:0];\n            r2 = r0[1:1];\n            r3 = r1 ^ r2;\n            kernel_xor_gate = r3;\n         end\n   endfunction\nendmodule\n</span></u>\n----\n\n\n\nfailures:\n    test_verilog_output\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.01s\n\n<b><span style='color:var(--green,#0a0)'>   Compiling</span></b> xor v0.1.0 (/private/tmp/rhdl/xor)\n<b><span style='color:var(--yellow,#a60)'>warning</span></b><b>: unused import: `rhdl::prelude::*`</b>\n <b><span style='color:#55f'>--> </span></b>tests/test_verilog.rs:1:5\n  <b><span style='color:#55f'>|</span></b>\n<b><span style='color:#55f'>1</span></b> <b><span style='color:#55f'>|</span></b> use rhdl::prelude::*;\n  <b><span style='color:#55f'>|</span></b>     <b><span style='color:var(--yellow,#a60)'>^^^^^^^^^^^^^^^^</span></b>\n  <b><span style='color:#55f'>|</span></b>\n  <b><span style='color:#55f'>= </span></b><b>note</b>: `#[warn(unused_imports)]` on by default\n\n<b><span style='color:var(--yellow,#a60)'>warning</span></b><b>: unused import: `xor::*`</b>\n <b><span style='color:#55f'>--> </span></b>tests/test_verilog.rs:2:5\n  <b><span style='color:#55f'>|</span></b>\n<b><span style='color:#55f'>2</span></b> <b><span style='color:#55f'>|</span></b> use xor::*;\n  <b><span style='color:#55f'>|</span></b>     <b><span style='color:var(--yellow,#a60)'>^^^^^^</span></b>\n\n<b><span style='color:var(--yellow,#a60)'>warning</span></b><b>:</b> `xor` (test \"test_verilog\") generated 2 warnings (run `cargo fix --test \"test_verilog\"` to apply 2 suggestions)\n<b><span style='color:var(--green,#0a0)'>    Finished</span></b> `test` profile [unoptimized + debuginfo] target(s) in 0.93s\n<b><span style='color:var(--green,#0a0)'>     Running</span></b> unittests src/lib.rs (target/debug/deps/xor-c110ce9318586ae6)\n<b><span style='color:var(--green,#0a0)'>     Running</span></b> tests/expect_verilog.rs (target/debug/deps/expect_verilog-dc8d95cfd1965d10)\n<b><span style='color:var(--red,#a00)'>error</span></b><b>:</b> test failed, to rerun pass `--test expect_verilog`\n</code></pre>"},{"End":"HtmlBlock"}]