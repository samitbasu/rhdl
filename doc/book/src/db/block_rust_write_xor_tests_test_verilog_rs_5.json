[{"Start":{"CodeBlock":{"Fenced":"rust"}}},{"Text":"use rhdl::prelude::*;\nuse xor::*;\n\n#[test]\nfn test_verilog_output() {\n    let expect = expect_test::expect![[r#\"\n        module xor_gate(input wire [1:0] i, output wire [0:0] o);\n           wire [0:0] od;\n           assign o = od[0:0];\n           assign od = kernel_xor_gate(i);\n           function [0:0] kernel_xor_gate(input reg [1:0] arg_0);\n                 reg [1:0] or0;\n                 reg [0:0] or1;\n                 reg [0:0] or2;\n                 reg [0:0] or3;\n                 begin\n                    or0 = arg_0;\n                    or1 = or0[0:0];\n                    or2 = or0[1:1];\n                    or3 = or1 ^ or2;\n                    kernel_xor_gate = or3;\n                 end\n           endfunction\n        endmodule\n    \"#]];\n    let gate = XorGate;\n    let hdl = gate.hdl(\"xor_gate\")?;\n    expect.assert_eq(&hdl.as_module().to_string());\n    Ok(())\n}"},{"End":"CodeBlock"}]