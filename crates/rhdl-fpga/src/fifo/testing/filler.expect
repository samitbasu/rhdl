module testbench();
   reg [1:0] clock_reset;
   reg [0:0] i;
   wire [6:0] o;
   reg [6:0] rust_out;
   uut t(.clock_reset(clock_reset), .i(i), .o(o));
   initial begin
      #0;
      clock_reset = 2'b10;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 1 at time 0", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b11;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1100010;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 3 at time 51", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b1100010;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 4 at time 100", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 6 at time 151", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 7 at time 200", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 9 at time 251", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 10 at time 300", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 12 at time 351", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 13 at time 400", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 15 at time 451", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 16 at time 500", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1100101;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1100101;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 18 at time 551", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b1100101;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 19 at time 600", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 21 at time 651", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 22 at time 700", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 24 at time 751", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 25 at time 800", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 27 at time 851", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 28 at time 900", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 30 at time 951", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 31 at time 1000", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1100110;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1100110;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 33 at time 1051", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b1100110;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 34 at time 1100", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1010010;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1010010;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 36 at time 1151", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b1010010;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 37 at time 1200", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1001010;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1001010;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 39 at time 1251", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b1001010;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 40 at time 1300", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1010001;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1010001;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 42 at time 1351", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b1010001;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 43 at time 1400", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1111100;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1111100;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 45 at time 1451", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b1111100;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 46 at time 1500", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 48 at time 1551", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 49 at time 1600", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 51 at time 1651", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 52 at time 1700", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 54 at time 1751", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 55 at time 1800", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 57 at time 1851", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 58 at time 1900", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1111100;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1111100;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 60 at time 1951", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b1111100;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 61 at time 2000", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1000101;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1000101;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 63 at time 2051", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b1000101;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 64 at time 2100", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 66 at time 2151", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 67 at time 2200", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 69 at time 2251", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 70 at time 2300", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 72 at time 2351", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 73 at time 2400", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 75 at time 2451", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 76 at time 2500", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1001101;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1001101;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 78 at time 2551", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b1001101;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 79 at time 2600", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 81 at time 2651", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 82 at time 2700", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 84 at time 2751", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 85 at time 2800", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 87 at time 2851", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 88 at time 2900", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 90 at time 2951", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 91 at time 3000", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1110001;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1110001;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 93 at time 3051", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b1110001;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 94 at time 3100", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1001011;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1001011;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 96 at time 3151", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b1001011;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 97 at time 3200", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 99 at time 3251", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 100 at time 3300", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 102 at time 3351", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 103 at time 3400", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 105 at time 3451", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 106 at time 3500", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 108 at time 3551", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 109 at time 3600", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1000110;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1000110;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 111 at time 3651", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b1000110;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 112 at time 3700", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 114 at time 3751", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 115 at time 3800", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 117 at time 3851", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 118 at time 3900", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 120 at time 3951", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 121 at time 4000", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 123 at time 4051", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 124 at time 4100", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1000001;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1000001;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 126 at time 4151", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b1000001;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 127 at time 4200", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1111101;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1111101;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 129 at time 4251", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b1111101;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 130 at time 4300", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 132 at time 4351", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b1000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 133 at time 4400", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1010001;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1010001;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 135 at time 4451", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b1010001;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 136 at time 4500", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 138 at time 4551", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 139 at time 4600", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 141 at time 4651", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 142 at time 4700", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 144 at time 4751", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 145 at time 4800", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 147 at time 4851", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b0000000;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 148 at time 4900", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1111101;
      #1;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b1111101;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 150 at time 4951", rust_out, o);
         $finish;
      end
      #48;
      clock_reset = 2'b00;
      i = 1'b0;
      rust_out = 7'b1111101;
      #1;
      if (o !== rust_out) begin
         $display("TESTBENCH FAILED: Expected %b, got %b Test 151 at time 5000", rust_out, o);
         $finish;
      end
      #49;
      clock_reset = 2'b01;
      i = 1'b0;
      rust_out = 7'b0000000;
      $display("TESTBENCH OK");
      $finish;
   end
endmodule
module uut(input wire [1:0] clock_reset, input wire [0:0] i, output wire [6:0] o);
   wire [11:0] od;
   wire [4:0] d;
   wire [61:0] q;
   assign o = od[6:0];
   uut__marker_const_0_b6 c0(.clock_reset(clock_reset), .o(q[5:0]));
   uut_rng c1(.clock_reset(clock_reset), .i(d[0:0]), .o(q[37:6]));
   uut_sleep_counter c2(.clock_reset(clock_reset), .i(d[4:1]), .o(q[41:38]));
   uut_sleep_len_const_4_b4 c3(.clock_reset(clock_reset), .o(q[45:42]));
   uut_write_probability_const_8000_b16 c4(.clock_reset(clock_reset), .o(q[61:46]));
   assign d = od[11:7];
   assign od = kernel_filler_kernel(clock_reset, i, q);
   function [11:0] kernel_filler_kernel(input reg [1:0] arg_0, input reg [0:0] arg_1, input reg [61:0] arg_2);
         reg [0:0] or0;
         reg [3:0] or1;
         reg [61:0] or2;
         // d
         reg [4:0] or3;
         reg [0:0] or4;
         reg [3:0] or5;
         reg [0:0] or6;
         reg [0:0] or7;
         reg [31:0] or8;
         reg [31:0] or9;
         reg [0:0] or10;
         // o
         reg [5:0] or11;
         reg [31:0] or12;
         reg [0:0] or13;
         reg [5:0] or14;
         // o
         reg [5:0] or15;
         reg [31:0] or16;
         reg [0:0] or17;
         reg [5:0] or18;
         // o
         reg [5:0] or19;
         reg [31:0] or20;
         reg [0:0] or21;
         reg [5:0] or22;
         // o
         reg [5:0] or23;
         reg [31:0] or24;
         reg [0:0] or25;
         reg [5:0] or26;
         // o
         reg [5:0] or27;
         reg [31:0] or28;
         reg [0:0] or29;
         reg [5:0] or30;
         // o
         reg [5:0] or31;
         reg [6:0] or32;
         reg [5:0] or33;
         // o
         reg [6:0] or34;
         // d
         reg [4:0] or35;
         reg [31:0] or36;
         reg [31:0] or37;
         reg [0:0] or38;
         // o
         reg [15:0] or39;
         reg [31:0] or40;
         reg [0:0] or41;
         reg [15:0] or42;
         // o
         reg [15:0] or43;
         reg [31:0] or44;
         reg [0:0] or45;
         reg [15:0] or46;
         // o
         reg [15:0] or47;
         reg [31:0] or48;
         reg [0:0] or49;
         reg [15:0] or50;
         // o
         reg [15:0] or51;
         reg [31:0] or52;
         reg [0:0] or53;
         reg [15:0] or54;
         // o
         reg [15:0] or55;
         reg [31:0] or56;
         reg [0:0] or57;
         reg [15:0] or58;
         // o
         reg [15:0] or59;
         reg [31:0] or60;
         reg [0:0] or61;
         reg [15:0] or62;
         // o
         reg [15:0] or63;
         reg [31:0] or64;
         reg [0:0] or65;
         reg [15:0] or66;
         // o
         reg [15:0] or67;
         reg [31:0] or68;
         reg [0:0] or69;
         reg [15:0] or70;
         // o
         reg [15:0] or71;
         reg [31:0] or72;
         reg [0:0] or73;
         reg [15:0] or74;
         // o
         reg [15:0] or75;
         reg [31:0] or76;
         reg [0:0] or77;
         reg [15:0] or78;
         // o
         reg [15:0] or79;
         reg [31:0] or80;
         reg [0:0] or81;
         reg [15:0] or82;
         // o
         reg [15:0] or83;
         reg [31:0] or84;
         reg [0:0] or85;
         reg [15:0] or86;
         // o
         reg [15:0] or87;
         reg [31:0] or88;
         reg [0:0] or89;
         reg [15:0] or90;
         // o
         reg [15:0] or91;
         reg [31:0] or92;
         reg [0:0] or93;
         reg [15:0] or94;
         // o
         reg [15:0] or95;
         reg [31:0] or96;
         reg [0:0] or97;
         reg [15:0] or98;
         // o
         reg [15:0] or99;
         reg [15:0] or100;
         reg [0:0] or101;
         reg [3:0] or102;
         reg [3:0] or103;
         // d
         reg [4:0] or104;
         // d
         reg [4:0] or105;
         // o
         reg [6:0] or106;
         reg [3:0] or107;
         reg [0:0] or108;
         reg [3:0] or109;
         reg [3:0] or110;
         // d
         reg [4:0] or111;
         // d
         reg [4:0] or112;
         reg [0:0] or113;
         reg [1:0] or114;
         reg [0:0] or115;
         // o
         reg [6:0] or116;
         // o
         reg [6:0] or117;
         reg [11:0] or118;
         localparam ol0 = 5'bXXXX0;
         localparam ol1 = 4'b0000;
         localparam ol2 = 32'b00000000000000000000000000000001;
         localparam ol3 = 6'b000001;
         localparam ol4 = 6'b000000;
         localparam ol5 = 32'b00000000000000000000000000000010;
         localparam ol6 = 6'b000010;
         localparam ol7 = 32'b00000000000000000000000000000100;
         localparam ol8 = 6'b000100;
         localparam ol9 = 32'b00000000000000000000000000001000;
         localparam ol10 = 6'b001000;
         localparam ol11 = 32'b00000000000000000000000000010000;
         localparam ol12 = 6'b010000;
         localparam ol13 = 32'b00000000000000000000000000100000;
         localparam ol14 = 6'b100000;
         localparam ol15 = 1'b1;
         localparam ol16 = 7'b0000000;
         localparam ol17 = 1'b1;
         localparam ol18 = 32'b00000000000000010000000000000000;
         localparam ol19 = 16'b0000000000000001;
         localparam ol20 = 16'b0000000000000000;
         localparam ol21 = 32'b00000000000000100000000000000000;
         localparam ol22 = 16'b0000000000000010;
         localparam ol23 = 32'b00000000000001000000000000000000;
         localparam ol24 = 16'b0000000000000100;
         localparam ol25 = 32'b00000000000010000000000000000000;
         localparam ol26 = 16'b0000000000001000;
         localparam ol27 = 32'b00000000000100000000000000000000;
         localparam ol28 = 16'b0000000000010000;
         localparam ol29 = 32'b00000000001000000000000000000000;
         localparam ol30 = 16'b0000000000100000;
         localparam ol31 = 32'b00000000010000000000000000000000;
         localparam ol32 = 16'b0000000001000000;
         localparam ol33 = 32'b00000000100000000000000000000000;
         localparam ol34 = 16'b0000000010000000;
         localparam ol35 = 32'b00000001000000000000000000000000;
         localparam ol36 = 16'b0000000100000000;
         localparam ol37 = 32'b00000010000000000000000000000000;
         localparam ol38 = 16'b0000001000000000;
         localparam ol39 = 32'b00000100000000000000000000000000;
         localparam ol40 = 16'b0000010000000000;
         localparam ol41 = 32'b00001000000000000000000000000000;
         localparam ol42 = 16'b0000100000000000;
         localparam ol43 = 32'b00010000000000000000000000000000;
         localparam ol44 = 16'b0001000000000000;
         localparam ol45 = 32'b00100000000000000000000000000000;
         localparam ol46 = 16'b0010000000000000;
         localparam ol47 = 32'b01000000000000000000000000000000;
         localparam ol48 = 16'b0100000000000000;
         localparam ol49 = 32'b10000000000000000000000000000000;
         localparam ol50 = 16'b1000000000000000;
         localparam ol51 = 4'b0000;
         localparam ol52 = 4'b0001;
         localparam ol53 = 7'b0000000;
         begin
            or114 = arg_0;
            or0 = arg_1;
            or2 = arg_2;
            or1 = or2[41:38];
            or3 = ol0;
            or3[4:1] = or1;
            or4 = ~or0;
            or5 = or2[41:38];
            or6 = or5 == ol1;
            or7 = or4 & or6;
            or8 = or2[37:6];
            or9 = or8 & ol2;
            or10 = |or9;
            or11 = or10 ? ol3 : ol4;
            or12 = or8 & ol5;
            or13 = |or12;
            or14 = or11 | ol6;
            or15 = or13 ? or14 : or11;
            or16 = or8 & ol7;
            or17 = |or16;
            or18 = or15 | ol8;
            or19 = or17 ? or18 : or15;
            or20 = or8 & ol9;
            or21 = |or20;
            or22 = or19 | ol10;
            or23 = or21 ? or22 : or19;
            or24 = or8 & ol11;
            or25 = |or24;
            or26 = or23 | ol12;
            or27 = or25 ? or26 : or23;
            or28 = or8 & ol13;
            or29 = |or28;
            or30 = or27 | ol14;
            or31 = or29 ? or30 : or27;
            or33 = or31[5:0];
            or32 = {ol15, or33};
            or34 = ol16;
            or34[6:0] = or32;
            or35 = or3;
            or35[0:0] = ol17;
            or36 = or2[37:6];
            or37 = or36 & ol18;
            or38 = |or37;
            or39 = or38 ? ol19 : ol20;
            or40 = or36 & ol21;
            or41 = |or40;
            or42 = or39 | ol22;
            or43 = or41 ? or42 : or39;
            or44 = or36 & ol23;
            or45 = |or44;
            or46 = or43 | ol24;
            or47 = or45 ? or46 : or43;
            or48 = or36 & ol25;
            or49 = |or48;
            or50 = or47 | ol26;
            or51 = or49 ? or50 : or47;
            or52 = or36 & ol27;
            or53 = |or52;
            or54 = or51 | ol28;
            or55 = or53 ? or54 : or51;
            or56 = or36 & ol29;
            or57 = |or56;
            or58 = or55 | ol30;
            or59 = or57 ? or58 : or55;
            or60 = or36 & ol31;
            or61 = |or60;
            or62 = or59 | ol32;
            or63 = or61 ? or62 : or59;
            or64 = or36 & ol33;
            or65 = |or64;
            or66 = or63 | ol34;
            or67 = or65 ? or66 : or63;
            or68 = or36 & ol35;
            or69 = |or68;
            or70 = or67 | ol36;
            or71 = or69 ? or70 : or67;
            or72 = or36 & ol37;
            or73 = |or72;
            or74 = or71 | ol38;
            or75 = or73 ? or74 : or71;
            or76 = or36 & ol39;
            or77 = |or76;
            or78 = or75 | ol40;
            or79 = or77 ? or78 : or75;
            or80 = or36 & ol41;
            or81 = |or80;
            or82 = or79 | ol42;
            or83 = or81 ? or82 : or79;
            or84 = or36 & ol43;
            or85 = |or84;
            or86 = or83 | ol44;
            or87 = or85 ? or86 : or83;
            or88 = or36 & ol45;
            or89 = |or88;
            or90 = or87 | ol46;
            or91 = or89 ? or90 : or87;
            or92 = or36 & ol47;
            or93 = |or92;
            or94 = or91 | ol48;
            or95 = or93 ? or94 : or91;
            or96 = or36 & ol49;
            or97 = |or96;
            or98 = or95 | ol50;
            or99 = or97 ? or98 : or95;
            or100 = or2[61:46];
            or101 = or99 > or100;
            or102 = or2[45:42];
            or103 = or101 ? or102 : ol51;
            or104 = or35;
            or104[4:1] = or103;
            or105 = or7 ? or104 : or3;
            or106 = or7 ? or34 : ol16;
            or107 = or2[41:38];
            or108 = |or107;
            or109 = or2[41:38];
            or110 = or109 - ol52;
            or111 = or105;
            or111[4:1] = or110;
            or112 = or108 ? or111 : or105;
            or113 = or114[1:1];
            or115 = |or113;
            or116 = or106;
            or116[6:0] = ol53;
            or117 = or115 ? or116 : or106;
            or118 = {or112, or117};
            kernel_filler_kernel = or118;
         end
   endfunction
endmodule
module uut__marker_const_0_b6(input wire [1:0] clock_reset, output wire [5:0] o);
   assign o = 6'b000000;
endmodule
module uut_rng(input wire [1:0] clock_reset, input wire [0:0] i, output wire [31:0] o);
   wire [159:0] od;
   wire [127:0] d;
   wire [127:0] q;
   assign o = od[31:0];
   uut_rng_w c0(.clock_reset(clock_reset), .i(d[127:96]), .o(q[127:96]));
   uut_rng_x c1(.clock_reset(clock_reset), .i(d[31:0]), .o(q[31:0]));
   uut_rng_y c2(.clock_reset(clock_reset), .i(d[63:32]), .o(q[63:32]));
   uut_rng_z c3(.clock_reset(clock_reset), .i(d[95:64]), .o(q[95:64]));
   assign d = od[159:32];
   assign od = kernel_lfsr_kernel(clock_reset, i, q);
   function [159:0] kernel_lfsr_kernel(input reg [1:0] arg_0, input reg [0:0] arg_1, input reg [127:0] arg_2);
         reg [31:0] or0;
         reg [127:0] or1;
         // d
         reg [127:0] or2;
         reg [31:0] or3;
         // d
         reg [127:0] or4;
         reg [31:0] or5;
         // d
         reg [127:0] or6;
         reg [31:0] or7;
         // d
         reg [127:0] or8;
         reg [31:0] or9;
         reg [31:0] or10;
         reg [31:0] or11;
         reg [31:0] or12;
         reg [31:0] or13;
         // d
         reg [127:0] or14;
         reg [31:0] or15;
         // d
         reg [127:0] or16;
         reg [31:0] or17;
         // d
         reg [127:0] or18;
         reg [31:0] or19;
         reg [31:0] or20;
         reg [31:0] or21;
         reg [31:0] or22;
         reg [31:0] or23;
         reg [31:0] or24;
         reg [31:0] or25;
         // d
         reg [127:0] or26;
         // d
         reg [127:0] or27;
         reg [0:0] or28;
         reg [159:0] or29;
         reg [1:0] or30;
         reg [20:0] or31;
         reg [50:0] or32;
         reg [39:0] or33;
         localparam ol0 = 128'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol1 = 11'b00000000000;
         begin
            or30 = arg_0;
            or28 = arg_1;
            or1 = arg_2;
            or0 = or1[31:0];
            or2 = ol0;
            or2[31:0] = or0;
            or3 = or1[63:32];
            or4 = or2;
            or4[63:32] = or3;
            or5 = or1[95:64];
            or6 = or4;
            or6[95:64] = or5;
            or7 = or1[127:96];
            or8 = or6;
            or8[127:96] = or7;
            or9 = or1[31:0];
            or10 = or1[31:0];
            or31 = or10[20:0];
            or11 = {or31, ol1};
            or12 = or9 ^ or11;
            or13 = or1[63:32];
            or14 = or8;
            or14[31:0] = or13;
            or15 = or1[95:64];
            or16 = or14;
            or16[63:32] = or15;
            or17 = or1[127:96];
            or18 = or16;
            or18[95:64] = or17;
            or19 = or1[127:96];
            or20 = or1[127:96];
            or32 = {{19{1'b0}}, or20};
            or21 = or32[50:19];
            or22 = or19 ^ or21;
            or23 = or22 ^ or12;
            or33 = {{8{1'b0}}, or12};
            or24 = or33[39:8];
            or25 = or23 ^ or24;
            or26 = or18;
            or26[127:96] = or25;
            or27 = or28 ? or26 : or8;
            or29 = {or27, or12};
            kernel_lfsr_kernel = or29;
         end
   endfunction
endmodule
module uut_rng_w(input wire [1:0] clock_reset, input wire [31:0] i, output reg [31:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 32'b10000100001100100011001101010010;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 32'b10000100001100100011001101010010;
      end else begin
         o <= i;
      end
   end
endmodule
module uut_rng_x(input wire [1:0] clock_reset, input wire [31:0] i, output reg [31:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 32'b01100010010110010010110001100010;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 32'b01100010010110010010110001100010;
      end else begin
         o <= i;
      end
   end
endmodule
module uut_rng_y(input wire [1:0] clock_reset, input wire [31:0] i, output reg [31:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 32'b01000010001110110110001000100101;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 32'b01000010001110110110001000100101;
      end else begin
         o <= i;
      end
   end
endmodule
module uut_rng_z(input wire [1:0] clock_reset, input wire [31:0] i, output reg [31:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 32'b00111010011000010011100101100110;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 32'b00111010011000010011100101100110;
      end else begin
         o <= i;
      end
   end
endmodule
module uut_sleep_counter(input wire [1:0] clock_reset, input wire [3:0] i, output reg [3:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 4'b0000;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 4'b0000;
      end else begin
         o <= i;
      end
   end
endmodule
module uut_sleep_len_const_4_b4(input wire [1:0] clock_reset, output wire [3:0] o);
   assign o = 4'b0100;
endmodule
module uut_write_probability_const_8000_b16(input wire [1:0] clock_reset, output wire [15:0] o);
   assign o = 16'b1000000000000000;
endmodule
