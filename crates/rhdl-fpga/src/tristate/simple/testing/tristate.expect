module top(input wire [1:0] cr, input wire [15:0] bitz, input wire [9:0] cmd, output wire [15:0] bitz, output wire [1:0] control, output wire [8:0] data);
   wire [27:0] inner_input;
   wire [26:0] inner_output;
   assign inner_input[1:0] = cr;
   assign inner_input[17:2] = bitz;
   assign inner_input[27:18] = cmd;
   assign bitz = inner_output[15:0];
   assign control = inner_output[17:16];
   assign data = inner_output[26:18];
   inner_inner inner_inst(.i(inner_input), .o(inner_output));
endmodule
module inner(input wire [27:0] i, output wire [26:0] o);
   inner_inner c(.clock_reset(i[1:0]), .i(i[27:2]), .o(o));
endmodule
module inner_inner(input wire [1:0] clock_reset, input wire [25:0] i, output wire [26:0] o);
   wire [37:0] od;
   wire [10:0] d;
   wire [10:0] q;
   assign o = od[26:0];
   inner_inner_reg c0(.clock_reset(clock_reset), .i(d[10:3]), .o(q[10:3]));
   inner_inner_state c1(.clock_reset(clock_reset), .i(d[2:0]), .o(q[2:0]));
   assign d = od[37:27];
   assign od = kernel_trizsnd(clock_reset, i, q);
   function [37:0] kernel_trizsnd(input reg [1:0] arg_0, input reg [25:0] arg_1, input reg [10:0] arg_2);
         reg [7:0] r0;
         reg [10:0] r1;
         // d
         reg [10:0] r2;
         reg [2:0] r3;
         reg [9:0] r4;
         reg [25:0] r5;
         reg [0:0] r6;
         reg [8:0] r7;
         reg [0:0] r8;
         reg [7:0] r9;
         // d
         reg [10:0] r10;
         // d
         reg [10:0] r11;
         // state
         reg [2:0] r12;
         // d
         reg [10:0] r13;
         // state
         reg [2:0] r14;
         reg [7:0] r15;
         // o
         reg [26:0] r16;
         // o
         reg [26:0] r17;
         // o
         reg [26:0] r18;
         reg [15:0] r19;
         reg [7:0] r20;
         // d
         reg [10:0] r21;
         reg [7:0] r22;
         reg [8:0] r23;
         reg [7:0] r24;
         // o
         reg [26:0] r25;
         // d
         reg [10:0] r26;
         // o
         reg [26:0] r27;
         // state
         reg [2:0] r28;
         reg [15:0] r29;
         reg [7:0] r30;
         reg [15:0] r31;
         reg [7:0] r32;
         reg [7:0] r33;
         // o
         reg [26:0] r34;
         reg [15:0] r35;
         reg [7:0] r36;
         reg [15:0] r37;
         reg [7:0] r38;
         reg [15:0] r39;
         reg [7:0] r40;
         reg [7:0] r41;
         reg [7:0] r42;
         // o
         reg [26:0] r43;
         // d
         reg [10:0] r44;
         reg [37:0] r45;
         reg [1:0] r46;
         localparam l0 = 11'bXXXXXXXXXXX;
         localparam l1 = 1'b0;
         localparam l2 = 1'b1;
         localparam l3 = 3'b001;
         localparam l4 = 3'b010;
         localparam l5 = 1'b1;
         localparam l6 = 27'b000000000000000000000000000;
         localparam l7 = 8'b11111111;
         localparam l8 = 2'b10;
         localparam l9 = 1'b1;
         localparam l10 = 3'b000;
         localparam l11 = 3'b001;
         localparam l12 = 3'b010;
         localparam l13 = 3'b011;
         localparam l14 = 3'b100;
         localparam l15 = 27'b000000000110000000000000000;
         localparam l16 = 3'b000;
         localparam l17 = 3'b011;
         localparam l18 = 3'b100;
         localparam l19 = 3'b000;
         begin
            r46 = arg_0;
            r5 = arg_1;
            r1 = arg_2;
            r0 = r1[10:3];
            r2 = l0;
            r2[10:3] = r0;
            r3 = r1[2:0];
            r4 = r5[25:16];
            r6 = r4[9:9];
            r7 = r4[8:0];
            r8 = r7[8:8];
            r9 = r7[7:0];
            r10 = r2;
            r10[10:3] = r9;
            case (r8)
               1'b0 : r11 = r10;
               1'b1 : r11 = r2;
            endcase
            case (r8)
               1'b0 : r12 = l3;
               1'b1 : r12 = l4;
            endcase
            case (r6)
               1'b1 : r13 = r11;
               default : r13 = r2;
            endcase
            case (r6)
               1'b1 : r14 = r12;
               default : r14 = r3;
            endcase
            r15 = r1[10:3];
            r16 = l6;
            r16[7:0] = r15;
            r17 = r16;
            r17[15:8] = l7;
            r18 = r17;
            r18[17:16] = l8;
            r19 = r5[15:0];
            r20 = r19[7:0];
            r21 = r2;
            r21[10:3] = r20;
            r22 = r1[10:3];
            r24 = r22[7:0];
            r23 = {l9, r24};
            r25 = l6;
            r25[26:18] = r23;
            case (r3)
               3'b000 : r26 = r13;
               3'b001 : r26 = r2;
               3'b010 : r26 = r2;
               3'b011 : r26 = r21;
               3'b100 : r26 = r2;
            endcase
            case (r3)
               3'b000 : r27 = l6;
               3'b001 : r27 = r18;
               3'b010 : r27 = l15;
               3'b011 : r27 = l6;
               3'b100 : r27 = r25;
            endcase
            case (r3)
               3'b000 : r28 = r14;
               3'b001 : r28 = l16;
               3'b010 : r28 = l17;
               3'b011 : r28 = l18;
               3'b100 : r28 = l19;
            endcase
            r29 = r27[15:0];
            r30 = r29[15:8];
            r31 = r5[15:0];
            r32 = r31[15:8];
            r33 = r30 | r32;
            r34 = r27;
            r34[15:8] = r33;
            r35 = r34[15:0];
            r36 = r35[7:0];
            r37 = r5[15:0];
            r38 = r37[7:0];
            r39 = r5[15:0];
            r40 = r39[15:8];
            r41 = r38 & r40;
            r42 = r36 | r41;
            r43 = r34;
            r43[7:0] = r42;
            r44 = r26;
            r44[2:0] = r28;
            r45 = {r44, r43};
            kernel_trizsnd = r45;
         end
   endfunction
endmodule
module inner_inner_reg(input wire [1:0] clock_reset, input wire [7:0] i, output reg [7:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 8'b00000000;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 8'b00000000;
      end else begin
         o <= i;
      end
   end
endmodule
module inner_inner_state(input wire [1:0] clock_reset, input wire [2:0] i, output reg [2:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 3'b000;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 3'b000;
      end else begin
         o <= i;
      end
   end
endmodule
