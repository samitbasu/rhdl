//
module uut(input wire [18:0] arg_0, output reg [7:0] out);
    reg [0:0] r0;
    reg [0:0] r1;
    reg [0:0] r2;
    reg [0:0] r3;
    reg [0:0] r4;
    reg [0:0] r5;
    reg [0:0] r6;
    reg [0:0] r7;
    reg [0:0] r8;
    reg [0:0] r9;
    reg [0:0] r10;
    reg [0:0] r11;
    reg [0:0] r12;
    reg [0:0] r13;
    reg [0:0] r14;
    reg [0:0] r15;
    reg [0:0] r16;
    reg [0:0] r17;
    reg [0:0] r18;
    wire [0:0] r19;
    wire [0:0] r20;
    wire [0:0] r21;
    wire [0:0] r22;
    wire [0:0] r23;
    wire [0:0] r24;
    wire [0:0] r25;
    wire [0:0] r26;
    uut bb_0 (.o({ r26, r25, r24, r23, r22, r21, r20, r19 }),.i({ r18, r17, r16, r15, r14, r13, r12, r11, r10, r9, r8, r7, r6, r5, r4, r3, r2, r1, r0 }));
    always @(*) begin
        r0 = arg_0[0];
        r1 = arg_0[1];
        r2 = arg_0[2];
        r3 = arg_0[3];
        r4 = arg_0[4];
        r5 = arg_0[5];
        r6 = arg_0[6];
        r7 = arg_0[7];
        r8 = arg_0[8];
        r9 = arg_0[9];
        r10 = arg_0[10];
        r11 = arg_0[11];
        r12 = arg_0[12];
        r13 = arg_0[13];
        r14 = arg_0[14];
        r15 = arg_0[15];
        r16 = arg_0[16];
        r17 = arg_0[17];
        r18 = arg_0[18];
        out = { r26, r25, r24, r23, r22, r21, r20, r19 };
    end
endmodule
//
module uut(input wire [18:0] i, output reg [7:0] o);
    wire [3:0] read_addr;
    wire [0:0] read_clk;
    wire [3:0] write_addr;
    wire [7:0] write_data;
    wire [0:0] write_enable;
    wire [0:0] write_clk;
    reg [7:0] mem[15:0];
    initial begin
        mem[0] = 8'b00001111;
        mem[1] = 8'b00001110;
        mem[2] = 8'b00001101;
        mem[3] = 8'b00001100;
        mem[4] = 8'b00001011;
        mem[5] = 8'b00001010;
        mem[6] = 8'b00001001;
        mem[7] = 8'b00001000;
        mem[8] = 8'b00000111;
        mem[9] = 8'b00000110;
        mem[10] = 8'b00000101;
        mem[11] = 8'b00000100;
        mem[12] = 8'b00000011;
        mem[13] = 8'b00000010;
        mem[14] = 8'b00000001;
        mem[15] = 8'b00000000;
    end
    assign read_addr = i[17:14];
    assign read_clk = i[18];
    assign write_addr = i[3:0];
    assign write_data = i[11:4];
    assign write_enable = i[12];
    assign write_clk = i[13];
    always @(posedge read_clk) begin
        o <= mem[read_addr];
    end
    always @(posedge write_clk) begin
        if (write_enable)
        begin
            mem[write_addr] <= write_data;
        end
    end
endmodule
