module top(input wire [1:0] clock_reset, input wire [111:0] i, output wire [140:0] o);
   wire [394:0] od;
   wire [253:0] d;
   wire [252:0] q;
   assign o = od[140:0];
   top_inbuf c0(.clock_reset(clock_reset), .i(d[70:0]), .o(q[70:0]));
   top_outbuf c1(.clock_reset(clock_reset), .i(d[251:216]), .o(q[250:215]));
   top_read_controller c2(.clock_reset(clock_reset), .i(d[215:146]), .o(q[214:146]));
   top_state c3(.clock_reset(clock_reset), .i(d[253:252]), .o(q[252:251]));
   top_write_controller c4(.clock_reset(clock_reset), .i(d[145:71]), .o(q[145:71]));
   assign d = od[394:141];
   assign od = kernel_kernel(clock_reset, i, q);
   function [394:0] kernel_kernel(input reg [1:0] arg_0, input reg [111:0] arg_1, input reg [252:0] arg_2);
         reg [1:0] or0;
         reg [252:0] or1;
         // d
         reg [253:0] or2;
         reg [69:0] or3;
         reg [111:0] or4;
         // d
         reg [253:0] or5;
         reg [35:0] or6;
         reg [0:0] or7;
         // d
         reg [253:0] or8;
         // d
         reg [253:0] or9;
         // d
         reg [253:0] or10;
         reg [1:0] or11;
         reg [68:0] or12;
         reg [33:0] or13;
         reg [0:0] or14;
         reg [32:0] or15;
         reg [33:0] or16;
         reg [34:0] or17;
         reg [33:0] or18;
         // d
         reg [253:0] or19;
         // d
         reg [253:0] or20;
         // d
         reg [253:0] or21;
         // will_unload
         reg [0:0] or22;
         // d
         reg [253:0] or23;
         // will_unload
         reg [0:0] or24;
         reg [74:0] or25;
         reg [2:0] or26;
         reg [0:0] or27;
         reg [1:0] or28;
         reg [33:0] or29;
         reg [34:0] or30;
         reg [33:0] or31;
         // d
         reg [253:0] or32;
         // d
         reg [253:0] or33;
         // d
         reg [253:0] or34;
         // will_unload
         reg [0:0] or35;
         // d
         reg [253:0] or36;
         // will_unload
         reg [0:0] or37;
         // d
         reg [253:0] or38;
         // will_unload
         reg [0:0] or39;
         reg [74:0] or40;
         reg [0:0] or41;
         reg [68:0] or42;
         reg [0:0] or43;
         reg [0:0] or44;
         reg [1:0] or45;
         reg [0:0] or46;
         reg [0:0] or47;
         reg [0:0] or48;
         reg [70:0] or49;
         reg [69:0] or50;
         reg [0:0] or51;
         reg [0:0] or52;
         reg [0:0] or53;
         reg [4:0] or54;
         // d
         reg [253:0] or55;
         // d
         reg [253:0] or56;
         reg [35:0] or57;
         // d
         reg [253:0] or58;
         // d
         reg [253:0] or59;
         // d
         reg [253:0] or60;
         reg [70:0] or61;
         reg [69:0] or62;
         reg [0:0] or63;
         reg [68:0] or64;
         reg [0:0] or65;
         reg [31:0] or66;
         // d
         reg [253:0] or67;
         reg [32:0] or68;
         reg [31:0] or69;
         // d
         reg [253:0] or70;
         reg [67:0] or71;
         // d
         reg [253:0] or72;
         reg [68:0] or73;
         reg [67:0] or74;
         // d
         reg [253:0] or75;
         // d
         reg [253:0] or76;
         // d
         reg [253:0] or77;
         // d
         reg [253:0] or78;
         reg [0:0] or79;
         // d
         reg [253:0] or80;
         reg [68:0] or81;
         reg [33:0] or82;
         // o
         reg [140:0] or83;
         reg [70:0] or84;
         reg [0:0] or85;
         // o
         reg [140:0] or86;
         reg [35:0] or87;
         reg [34:0] or88;
         // o
         reg [140:0] or89;
         reg [74:0] or90;
         reg [70:0] or91;
         // o
         reg [140:0] or92;
         reg [394:0] or93;
         reg [1:0] or94;
         localparam ol0 = 254'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol1 = 35'b00000000000000000000000000000000000;
         localparam ol2 = 34'b1000000000000000000000000000000000;
         localparam ol3 = 1'b1;
         localparam ol4 = 2'b00;
         localparam ol5 = 1'b1;
         localparam ol6 = 1'b0;
         localparam ol7 = 1'b1;
         localparam ol8 = 34'b0000000000000000000000000000000000;
         localparam ol9 = 1'b1;
         localparam ol10 = 2'b00;
         localparam ol11 = 1'b1;
         localparam ol12 = 1'b1;
         localparam ol13 = 2'b00;
         localparam ol14 = 2'b10;
         localparam ol15 = 2'b01;
         localparam ol16 = 2'b00;
         localparam ol17 = 1'b1;
         localparam ol18 = 1'b1;
         localparam ol19 = 1'b0;
         localparam ol20 = 1'b0;
         localparam ol21 = 69'b000000000000000000000000000000000000000000000000000000000000000000000;
         localparam ol22 = 33'b000000000000000000000000000000000;
         localparam ol23 = 2'b10;
         localparam ol24 = 1'b1;
         localparam ol25 = 2'b01;
         localparam ol26 = 1'b1;
         localparam ol27 = 1'b1;
         localparam ol28 = 1'b0;
         localparam ol29 = 1'b1;
         localparam ol30 = 141'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         begin
            or94 = arg_0;
            or4 = arg_1;
            or1 = arg_2;
            or0 = or1[252:251];
            or2 = ol0;
            or2[253:252] = or0;
            or3 = or4[69:0];
            or5 = or2;
            or5[69:0] = or3;
            or6 = or1[250:215];
            or7 = or6[35:35];
            or8 = or5;
            or8[215:215] = or7;
            or9 = or8;
            or9[145:145] = or7;
            or10 = or9;
            or10[250:216] = ol1;
            or11 = or1[252:251];
            or12 = or1[214:146];
            or13 = or12[68:35];
            or14 = or13[33:33];
            or15 = or13[32:0];
            or16 = ol2;
            or16[32:0] = or15;
            or18 = or16[33:0];
            or17 = {ol3, or18};
            or19 = or10;
            or19[250:216] = or17;
            or20 = or19;
            or20[253:252] = ol4;
            or21 = or7 ? or20 : or19;
            or22 = or7 ? ol5 : ol6;
            case (or14)
               1'b1 : or23 = or21;
               default : or23 = or10;
            endcase
            case (or14)
               1'b1 : or24 = or22;
               default : or24 = ol6;
            endcase
            or25 = or1[145:71];
            or26 = or25[74:72];
            or27 = or26[2:2];
            or28 = or26[1:0];
            or29 = ol8;
            or29[1:0] = or28;
            or31 = or29[33:0];
            or30 = {ol9, or31};
            or32 = or10;
            or32[250:216] = or30;
            or33 = or32;
            or33[253:252] = ol10;
            or34 = or7 ? or33 : or32;
            or35 = or7 ? ol11 : ol6;
            case (or27)
               1'b1 : or36 = or34;
               default : or36 = or10;
            endcase
            case (or27)
               1'b1 : or37 = or35;
               default : or37 = ol6;
            endcase
            case (or11)
               2'b00 : or38 = or10;
               2'b10 : or38 = or23;
               2'b01 : or38 = or36;
            endcase
            case (or11)
               2'b00 : or39 = ol6;
               2'b10 : or39 = or24;
               2'b01 : or39 = or37;
            endcase
            or40 = or1[145:71];
            or41 = or40[71:71];
            or42 = or1[214:146];
            or43 = or42[34:34];
            or44 = or41 & or43;
            or45 = or1[252:251];
            or46 = or45 == ol16;
            or47 = or46 | or39;
            or48 = or44 & or47;
            or49 = or1[70:0];
            or50 = or49[69:0];
            or51 = or50[69:69];
            case (or51)
               1'b1 : or52 = ol18;
               1'b0 : or52 = ol20;
            endcase
            or53 = or48 & or52;
            or54 = or4[75:71];
            or55 = or38;
            or55[75:71] = or54;
            or56 = or55;
            or56[144:76] = ol21;
            or57 = or4[111:76];
            or58 = or56;
            or58[181:146] = or57;
            or59 = or58;
            or59[214:182] = ol22;
            or60 = or59;
            or60[70:70] = or53;
            or61 = or1[70:0];
            or62 = or61[69:0];
            or63 = or62[69:69];
            or64 = or62[68:0];
            or65 = or64[68:68];
            or66 = or64[31:0];
            or67 = or60;
            or67[253:252] = ol23;
            or69 = or66[31:0];
            or68 = {ol24, or69};
            or70 = or67;
            or70[214:182] = or68;
            or71 = or64[67:0];
            or72 = or60;
            or72[253:252] = ol25;
            or74 = or71[67:0];
            or73 = {ol26, or74};
            or75 = or72;
            or75[144:76] = or73;
            case (or65)
               1'b1 : or76 = or70;
               1'b0 : or76 = or75;
            endcase
            case (or63)
               1'b1 : or77 = or76;
               default : or77 = or60;
            endcase
            or78 = or53 ? or77 : or60;
            or79 = or4[70:70];
            or80 = or78;
            or80[251:251] = or79;
            or81 = or1[214:146];
            or82 = or81[33:0];
            or83 = ol30;
            or83[140:107] = or82;
            or84 = or1[70:0];
            or85 = or84[70:70];
            or86 = or83;
            or86[35:35] = or85;
            or87 = or1[250:215];
            or88 = or87[34:0];
            or89 = or86;
            or89[34:0] = or88;
            or90 = or1[145:71];
            or91 = or90[70:0];
            or92 = or89;
            or92[106:36] = or91;
            or93 = {or80, or92};
            kernel_kernel = or93;
         end
   endfunction
endmodule
module top_inbuf(input wire [1:0] clock_reset, input wire [70:0] i, output wire [70:0] o);
   wire [141:0] od;
   wire [70:0] d;
   wire [70:0] q;
   assign o = od[70:0];
   top_inbuf_inner c0(.clock_reset(clock_reset), .i(d[70:0]), .o(q[70:0]));
   assign d = od[141:71];
   assign od = kernel_option_carloni_kernel(clock_reset, i, q);
   function [141:0] kernel_option_carloni_kernel(input reg [1:0] arg_0, input reg [70:0] arg_1, input reg [70:0] arg_2);
         reg [69:0] or0;
         reg [70:0] or1;
         reg [0:0] or2;
         reg [68:0] or3;
         reg [69:0] or4;
         reg [69:0] or5;
         reg [0:0] or6;
         reg [68:0] or7;
         // d
         reg [70:0] or8;
         reg [0:0] or9;
         // d
         reg [70:0] or10;
         reg [0:0] or11;
         reg [0:0] or12;
         // d
         reg [70:0] or13;
         reg [70:0] or14;
         reg [0:0] or15;
         reg [0:0] or16;
         reg [0:0] or17;
         reg [0:0] or18;
         // o
         reg [70:0] or19;
         reg [0:0] or20;
         reg [0:0] or21;
         reg [68:0] or22;
         reg [69:0] or23;
         reg [68:0] or24;
         reg [69:0] or25;
         // o
         reg [70:0] or26;
         reg [141:0] or27;
         reg [1:0] or28;
         localparam ol0 = 1'b1;
         localparam ol1 = 1'b1;
         localparam ol2 = 1'b0;
         localparam ol3 = 70'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0;
         localparam ol4 = 71'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol5 = 1'b0;
         localparam ol6 = 71'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol7 = 1'b1;
         localparam ol8 = 70'b0000000000000000000000000000000000000000000000000000000000000000000000;
         begin
            or28 = arg_0;
            or1 = arg_1;
            or14 = arg_2;
            or0 = or1[69:0];
            or2 = or0[69:69];
            or3 = or0[68:0];
            or4 = {or3, ol0};
            case (or2)
               1'b1 : or5 = or4;
               1'b0 : or5 = ol3;
            endcase
            or6 = or5[0:0];
            or7 = or5[69:1];
            or8 = ol4;
            or8[68:0] = or7;
            or9 = ~or6;
            or10 = or8;
            or10[69:69] = or9;
            or11 = or1[70:70];
            or12 = ~or11;
            or13 = or10;
            or13[70:70] = or12;
            or15 = or14[70:70];
            or16 = ~or15;
            or17 = ol5;
            or18 = or17;
            or18[0:0] = or16;
            or19 = ol6;
            or19[70:70] = or18;
            or20 = or14[69:69];
            or21 = ~or20;
            or22 = or14[68:0];
            or24 = or22[68:0];
            or23 = {ol7, or24};
            or25 = or21 ? or23 : ol8;
            or26 = or19;
            or26[69:0] = or25;
            or27 = {or13, or26};
            kernel_option_carloni_kernel = or27;
         end
   endfunction
endmodule
module top_inbuf_inner(input wire [1:0] clock_reset, input wire [70:0] i, output wire [70:0] o);
   wire [210:0] od;
   wire [139:0] d;
   wire [139:0] q;
   assign o = od[70:0];
   top_inbuf_inner_aux_ff c0(.clock_reset(clock_reset), .i(d[137:69]), .o(q[137:69]));
   top_inbuf_inner_main_ff c1(.clock_reset(clock_reset), .i(d[68:0]), .o(q[68:0]));
   top_inbuf_inner_state_ff c2(.clock_reset(clock_reset), .i(d[139:139]), .o(q[139:139]));
   top_inbuf_inner_void_ff c3(.clock_reset(clock_reset), .i(d[138:138]), .o(q[138:138]));
   assign d = od[210:71];
   assign od = kernel_carloni_kernel(clock_reset, i, q);
   function [210:0] kernel_carloni_kernel(input reg [1:0] arg_0, input reg [70:0] arg_1, input reg [139:0] arg_2);
         reg [0:0] or0;
         reg [139:0] or1;
         reg [0:0] or2;
         reg [70:0] or3;
         reg [0:0] or4;
         reg [0:0] or5;
         reg [0:0] or6;
         reg [0:0] or7;
         reg [0:0] or8;
         reg [0:0] or9;
         // d
         reg [139:0] or10;
         reg [0:0] or11;
         reg [0:0] or12;
         reg [0:0] or13;
         reg [0:0] or14;
         reg [0:0] or15;
         reg [0:0] or16;
         reg [0:0] or17;
         // d
         reg [139:0] or18;
         // aux_en
         reg [0:0] or19;
         // d
         reg [139:0] or20;
         // aux_en
         reg [0:0] or21;
         // d
         reg [139:0] or22;
         // main_en
         reg [0:0] or23;
         reg [0:0] or24;
         // d
         reg [139:0] or25;
         // d
         reg [139:0] or26;
         // main_en
         reg [0:0] or27;
         // sel
         reg [0:0] or28;
         // stop_out
         reg [0:0] or29;
         // aux_en
         reg [0:0] or30;
         // d
         reg [139:0] or31;
         // main_en
         reg [0:0] or32;
         // sel
         reg [0:0] or33;
         // stop_out
         reg [0:0] or34;
         reg [68:0] or35;
         reg [68:0] or36;
         reg [68:0] or37;
         // d
         reg [139:0] or38;
         reg [68:0] or39;
         reg [68:0] or40;
         reg [68:0] or41;
         reg [68:0] or42;
         reg [68:0] or43;
         // d
         reg [139:0] or44;
         reg [0:0] or45;
         reg [0:0] or46;
         reg [0:0] or47;
         reg [0:0] or48;
         // d
         reg [139:0] or49;
         reg [68:0] or50;
         // o
         reg [70:0] or51;
         reg [0:0] or52;
         // o
         reg [70:0] or53;
         // o
         reg [70:0] or54;
         reg [0:0] or55;
         reg [1:0] or56;
         reg [0:0] or57;
         // o
         reg [70:0] or58;
         // o
         reg [70:0] or59;
         // o
         reg [70:0] or60;
         reg [210:0] or61;
         localparam ol0 = 140'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol1 = 1'b1;
         localparam ol2 = 1'b1;
         localparam ol3 = 1'b0;
         localparam ol4 = 1'b1;
         localparam ol5 = 1'b0;
         localparam ol6 = 1'b0;
         localparam ol7 = 1'b1;
         localparam ol8 = 1'b0;
         localparam ol9 = 1'b1;
         localparam ol10 = 1'b1;
         localparam ol11 = 1'b1;
         localparam ol12 = 1'b0;
         localparam ol13 = 1'b1;
         localparam ol14 = 1'b0;
         localparam ol15 = 1'b0;
         localparam ol16 = 71'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol17 = 1'b1;
         localparam ol18 = 1'b1;
         begin
            or56 = arg_0;
            or3 = arg_1;
            or1 = arg_2;
            or0 = or1[138:138];
            or2 = or3[70:70];
            or4 = or3[69:69];
            or5 = ~or4;
            or6 = ~or0;
            or7 = or5 & or6;
            or8 = or2 & or7;
            or9 = or1[139:139];
            or10 = ol0;
            or10[139:139] = or9;
            or11 = or1[139:139];
            or12 = or3[70:70];
            or13 = ~or12;
            or14 = or3[69:69];
            or15 = ~or14;
            or16 = or15 & or0;
            or17 = or13 | or16;
            or18 = or10;
            or18[139:139] = ol1;
            or19 = or8 ? ol2 : ol3;
            or20 = or8 ? or18 : or10;
            or21 = or17 ? ol3 : or19;
            or22 = or17 ? or10 : or20;
            or23 = or17 ? ol4 : ol5;
            or24 = or3[70:70];
            or25 = or10;
            or25[139:139] = ol6;
            or26 = or24 ? or10 : or25;
            or27 = or24 ? ol5 : ol7;
            or28 = or24 ? ol8 : ol9;
            or29 = or24 ? ol10 : ol11;
            case (or11)
               1'b0 : or30 = or21;
               1'b1 : or30 = ol3;
            endcase
            case (or11)
               1'b0 : or31 = or22;
               1'b1 : or31 = or26;
            endcase
            case (or11)
               1'b0 : or32 = or23;
               1'b1 : or32 = or27;
            endcase
            case (or11)
               1'b0 : or33 = ol8;
               1'b1 : or33 = or28;
            endcase
            case (or11)
               1'b0 : or34 = ol14;
               1'b1 : or34 = or29;
            endcase
            or35 = or3[68:0];
            or36 = or1[137:69];
            or37 = or30 ? or35 : or36;
            or38 = or31;
            or38[137:69] = or37;
            or39 = or1[137:69];
            or40 = or3[68:0];
            or41 = or33 ? or39 : or40;
            or42 = or1[68:0];
            or43 = or32 ? or41 : or42;
            or44 = or38;
            or44[68:0] = or43;
            or45 = or3[69:69];
            or46 = or33 ? ol15 : or45;
            or47 = or1[138:138];
            or48 = or32 ? or46 : or47;
            or49 = or44;
            or49[138:138] = or48;
            or50 = or1[68:0];
            or51 = ol16;
            or51[68:0] = or50;
            or52 = or1[138:138];
            or53 = or51;
            or53[69:69] = or52;
            or54 = or53;
            or54[70:70] = or34;
            or55 = or56[1:1];
            or57 = |or55;
            or58 = or54;
            or58[69:69] = ol17;
            or59 = or58;
            or59[70:70] = ol18;
            or60 = or57 ? or59 : or54;
            or61 = {or49, or60};
            kernel_carloni_kernel = or61;
         end
   endfunction
endmodule
module top_inbuf_inner_aux_ff(input wire [1:0] clock_reset, input wire [68:0] i, output reg [68:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 69'b000000000000000000000000000000000000000000000000000000000000000000000;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 69'b000000000000000000000000000000000000000000000000000000000000000000000;
      end else begin
         o <= i;
      end
   end
endmodule
module top_inbuf_inner_main_ff(input wire [1:0] clock_reset, input wire [68:0] i, output reg [68:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 69'b000000000000000000000000000000000000000000000000000000000000000000000;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 69'b000000000000000000000000000000000000000000000000000000000000000000000;
      end else begin
         o <= i;
      end
   end
endmodule
module top_inbuf_inner_state_ff(input wire [1:0] clock_reset, input wire [0:0] i, output reg [0:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 1'b0;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 1'b0;
      end else begin
         o <= i;
      end
   end
endmodule
module top_inbuf_inner_void_ff(input wire [1:0] clock_reset, input wire [0:0] i, output reg [0:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 1'b1;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 1'b1;
      end else begin
         o <= i;
      end
   end
endmodule
module top_outbuf(input wire [1:0] clock_reset, input wire [35:0] i, output wire [35:0] o);
   wire [71:0] od;
   wire [35:0] d;
   wire [35:0] q;
   assign o = od[35:0];
   top_outbuf_inner c0(.clock_reset(clock_reset), .i(d[35:0]), .o(q[35:0]));
   assign d = od[71:36];
   assign od = kernel_option_carloni_kernel(clock_reset, i, q);
   function [71:0] kernel_option_carloni_kernel(input reg [1:0] arg_0, input reg [35:0] arg_1, input reg [35:0] arg_2);
         reg [34:0] or0;
         reg [35:0] or1;
         reg [0:0] or2;
         reg [33:0] or3;
         reg [34:0] or4;
         reg [34:0] or5;
         reg [0:0] or6;
         reg [33:0] or7;
         // d
         reg [35:0] or8;
         reg [0:0] or9;
         // d
         reg [35:0] or10;
         reg [0:0] or11;
         reg [0:0] or12;
         // d
         reg [35:0] or13;
         reg [35:0] or14;
         reg [0:0] or15;
         reg [0:0] or16;
         reg [0:0] or17;
         reg [0:0] or18;
         // o
         reg [35:0] or19;
         reg [0:0] or20;
         reg [0:0] or21;
         reg [33:0] or22;
         reg [34:0] or23;
         reg [33:0] or24;
         reg [34:0] or25;
         // o
         reg [35:0] or26;
         reg [71:0] or27;
         reg [1:0] or28;
         localparam ol0 = 1'b1;
         localparam ol1 = 1'b1;
         localparam ol2 = 1'b0;
         localparam ol3 = 35'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0;
         localparam ol4 = 36'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol5 = 1'b0;
         localparam ol6 = 36'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol7 = 1'b1;
         localparam ol8 = 35'b00000000000000000000000000000000000;
         begin
            or28 = arg_0;
            or1 = arg_1;
            or14 = arg_2;
            or0 = or1[34:0];
            or2 = or0[34:34];
            or3 = or0[33:0];
            or4 = {or3, ol0};
            case (or2)
               1'b1 : or5 = or4;
               1'b0 : or5 = ol3;
            endcase
            or6 = or5[0:0];
            or7 = or5[34:1];
            or8 = ol4;
            or8[33:0] = or7;
            or9 = ~or6;
            or10 = or8;
            or10[34:34] = or9;
            or11 = or1[35:35];
            or12 = ~or11;
            or13 = or10;
            or13[35:35] = or12;
            or15 = or14[35:35];
            or16 = ~or15;
            or17 = ol5;
            or18 = or17;
            or18[0:0] = or16;
            or19 = ol6;
            or19[35:35] = or18;
            or20 = or14[34:34];
            or21 = ~or20;
            or22 = or14[33:0];
            or24 = or22[33:0];
            or23 = {ol7, or24};
            or25 = or21 ? or23 : ol8;
            or26 = or19;
            or26[34:0] = or25;
            or27 = {or13, or26};
            kernel_option_carloni_kernel = or27;
         end
   endfunction
endmodule
module top_outbuf_inner(input wire [1:0] clock_reset, input wire [35:0] i, output wire [35:0] o);
   wire [105:0] od;
   wire [69:0] d;
   wire [69:0] q;
   assign o = od[35:0];
   top_outbuf_inner_aux_ff c0(.clock_reset(clock_reset), .i(d[67:34]), .o(q[67:34]));
   top_outbuf_inner_main_ff c1(.clock_reset(clock_reset), .i(d[33:0]), .o(q[33:0]));
   top_outbuf_inner_state_ff c2(.clock_reset(clock_reset), .i(d[69:69]), .o(q[69:69]));
   top_outbuf_inner_void_ff c3(.clock_reset(clock_reset), .i(d[68:68]), .o(q[68:68]));
   assign d = od[105:36];
   assign od = kernel_carloni_kernel(clock_reset, i, q);
   function [105:0] kernel_carloni_kernel(input reg [1:0] arg_0, input reg [35:0] arg_1, input reg [69:0] arg_2);
         reg [0:0] or0;
         reg [69:0] or1;
         reg [0:0] or2;
         reg [35:0] or3;
         reg [0:0] or4;
         reg [0:0] or5;
         reg [0:0] or6;
         reg [0:0] or7;
         reg [0:0] or8;
         reg [0:0] or9;
         // d
         reg [69:0] or10;
         reg [0:0] or11;
         reg [0:0] or12;
         reg [0:0] or13;
         reg [0:0] or14;
         reg [0:0] or15;
         reg [0:0] or16;
         reg [0:0] or17;
         // d
         reg [69:0] or18;
         // aux_en
         reg [0:0] or19;
         // d
         reg [69:0] or20;
         // aux_en
         reg [0:0] or21;
         // d
         reg [69:0] or22;
         // main_en
         reg [0:0] or23;
         reg [0:0] or24;
         // d
         reg [69:0] or25;
         // d
         reg [69:0] or26;
         // main_en
         reg [0:0] or27;
         // sel
         reg [0:0] or28;
         // stop_out
         reg [0:0] or29;
         // aux_en
         reg [0:0] or30;
         // d
         reg [69:0] or31;
         // main_en
         reg [0:0] or32;
         // sel
         reg [0:0] or33;
         // stop_out
         reg [0:0] or34;
         reg [33:0] or35;
         reg [33:0] or36;
         reg [33:0] or37;
         // d
         reg [69:0] or38;
         reg [33:0] or39;
         reg [33:0] or40;
         reg [33:0] or41;
         reg [33:0] or42;
         reg [33:0] or43;
         // d
         reg [69:0] or44;
         reg [0:0] or45;
         reg [0:0] or46;
         reg [0:0] or47;
         reg [0:0] or48;
         // d
         reg [69:0] or49;
         reg [33:0] or50;
         // o
         reg [35:0] or51;
         reg [0:0] or52;
         // o
         reg [35:0] or53;
         // o
         reg [35:0] or54;
         reg [0:0] or55;
         reg [1:0] or56;
         reg [0:0] or57;
         // o
         reg [35:0] or58;
         // o
         reg [35:0] or59;
         // o
         reg [35:0] or60;
         reg [105:0] or61;
         localparam ol0 = 70'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol1 = 1'b1;
         localparam ol2 = 1'b1;
         localparam ol3 = 1'b0;
         localparam ol4 = 1'b1;
         localparam ol5 = 1'b0;
         localparam ol6 = 1'b0;
         localparam ol7 = 1'b1;
         localparam ol8 = 1'b0;
         localparam ol9 = 1'b1;
         localparam ol10 = 1'b1;
         localparam ol11 = 1'b1;
         localparam ol12 = 1'b0;
         localparam ol13 = 1'b1;
         localparam ol14 = 1'b0;
         localparam ol15 = 1'b0;
         localparam ol16 = 36'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol17 = 1'b1;
         localparam ol18 = 1'b1;
         begin
            or56 = arg_0;
            or3 = arg_1;
            or1 = arg_2;
            or0 = or1[68:68];
            or2 = or3[35:35];
            or4 = or3[34:34];
            or5 = ~or4;
            or6 = ~or0;
            or7 = or5 & or6;
            or8 = or2 & or7;
            or9 = or1[69:69];
            or10 = ol0;
            or10[69:69] = or9;
            or11 = or1[69:69];
            or12 = or3[35:35];
            or13 = ~or12;
            or14 = or3[34:34];
            or15 = ~or14;
            or16 = or15 & or0;
            or17 = or13 | or16;
            or18 = or10;
            or18[69:69] = ol1;
            or19 = or8 ? ol2 : ol3;
            or20 = or8 ? or18 : or10;
            or21 = or17 ? ol3 : or19;
            or22 = or17 ? or10 : or20;
            or23 = or17 ? ol4 : ol5;
            or24 = or3[35:35];
            or25 = or10;
            or25[69:69] = ol6;
            or26 = or24 ? or10 : or25;
            or27 = or24 ? ol5 : ol7;
            or28 = or24 ? ol8 : ol9;
            or29 = or24 ? ol10 : ol11;
            case (or11)
               1'b0 : or30 = or21;
               1'b1 : or30 = ol3;
            endcase
            case (or11)
               1'b0 : or31 = or22;
               1'b1 : or31 = or26;
            endcase
            case (or11)
               1'b0 : or32 = or23;
               1'b1 : or32 = or27;
            endcase
            case (or11)
               1'b0 : or33 = ol8;
               1'b1 : or33 = or28;
            endcase
            case (or11)
               1'b0 : or34 = ol14;
               1'b1 : or34 = or29;
            endcase
            or35 = or3[33:0];
            or36 = or1[67:34];
            or37 = or30 ? or35 : or36;
            or38 = or31;
            or38[67:34] = or37;
            or39 = or1[67:34];
            or40 = or3[33:0];
            or41 = or33 ? or39 : or40;
            or42 = or1[33:0];
            or43 = or32 ? or41 : or42;
            or44 = or38;
            or44[33:0] = or43;
            or45 = or3[34:34];
            or46 = or33 ? ol15 : or45;
            or47 = or1[68:68];
            or48 = or32 ? or46 : or47;
            or49 = or44;
            or49[68:68] = or48;
            or50 = or1[33:0];
            or51 = ol16;
            or51[33:0] = or50;
            or52 = or1[68:68];
            or53 = or51;
            or53[34:34] = or52;
            or54 = or53;
            or54[35:35] = or34;
            or55 = or56[1:1];
            or57 = |or55;
            or58 = or54;
            or58[34:34] = ol17;
            or59 = or58;
            or59[35:35] = ol18;
            or60 = or57 ? or59 : or54;
            or61 = {or49, or60};
            kernel_carloni_kernel = or61;
         end
   endfunction
endmodule
module top_outbuf_inner_aux_ff(input wire [1:0] clock_reset, input wire [33:0] i, output reg [33:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 34'b0000000000000000000000000000000001;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 34'b0000000000000000000000000000000001;
      end else begin
         o <= i;
      end
   end
endmodule
module top_outbuf_inner_main_ff(input wire [1:0] clock_reset, input wire [33:0] i, output reg [33:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 34'b0000000000000000000000000000000001;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 34'b0000000000000000000000000000000001;
      end else begin
         o <= i;
      end
   end
endmodule
module top_outbuf_inner_state_ff(input wire [1:0] clock_reset, input wire [0:0] i, output reg [0:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 1'b0;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 1'b0;
      end else begin
         o <= i;
      end
   end
endmodule
module top_outbuf_inner_void_ff(input wire [1:0] clock_reset, input wire [0:0] i, output reg [0:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 1'b1;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 1'b1;
      end else begin
         o <= i;
      end
   end
endmodule
module top_read_controller(input wire [1:0] clock_reset, input wire [69:0] i, output wire [68:0] o);
   wire [174:0] od;
   wire [105:0] d;
   wire [104:0] q;
   assign o = od[68:0];
   top_read_controller_inbuf c0(.clock_reset(clock_reset), .i(d[33:0]), .o(q[33:0]));
   top_read_controller_map c1(.clock_reset(clock_reset), .i(d[69:34]), .o(q[68:34]));
   top_read_controller_outbuf c2(.clock_reset(clock_reset), .i(d[105:70]), .o(q[104:69]));
   assign d = od[174:69];
   assign od = kernel_kernel(clock_reset, i, q);
   function [174:0] kernel_kernel(input reg [1:0] arg_0, input reg [69:0] arg_1, input reg [104:0] arg_2);
         reg [32:0] or0;
         reg [69:0] or1;
         // d
         reg [105:0] or2;
         reg [35:0] or3;
         reg [0:0] or4;
         // d
         reg [105:0] or5;
         reg [35:0] or6;
         reg [1:0] or7;
         reg [35:0] or8;
         reg [31:0] or9;
         reg [33:0] or10;
         reg [33:0] or11;
         // d
         reg [105:0] or12;
         reg [35:0] or13;
         reg [0:0] or14;
         // d
         reg [105:0] or15;
         reg [34:0] or16;
         reg [104:0] or17;
         reg [0:0] or18;
         // d
         reg [105:0] or19;
         reg [35:0] or20;
         reg [34:0] or21;
         // d
         reg [105:0] or22;
         reg [0:0] or23;
         // d
         reg [105:0] or24;
         reg [33:0] or25;
         reg [0:0] or26;
         // o
         reg [68:0] or27;
         reg [34:0] or28;
         reg [33:0] or29;
         // o
         reg [68:0] or30;
         reg [33:0] or31;
         reg [31:0] or32;
         // o
         reg [68:0] or33;
         reg [33:0] or34;
         reg [0:0] or35;
         // o
         reg [68:0] or36;
         reg [35:0] or37;
         reg [0:0] or38;
         // o
         reg [68:0] or39;
         reg [174:0] or40;
         reg [1:0] or41;
         localparam ol0 = 106'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol1 = 34'b0000000000000000000000000000000000;
         localparam ol2 = 69'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         begin
            or41 = arg_0;
            or1 = arg_1;
            or17 = arg_2;
            or0 = or1[68:36];
            or2 = ol0;
            or2[32:0] = or0;
            or3 = or1[35:0];
            or4 = or3[0:0];
            or5 = or2;
            or5[33:33] = or4;
            or6 = or1[35:0];
            or7 = or6[34:33];
            or8 = or1[35:0];
            or9 = or8[32:1];
            or10 = ol1;
            or10[1:0] = or7;
            or11 = or10;
            or11[33:2] = or9;
            or12 = or5;
            or12[103:70] = or11;
            or13 = or1[35:0];
            or14 = or13[35:35];
            or15 = or12;
            or15[104:104] = or14;
            or16 = or17[68:34];
            or18 = or16[34:34];
            or19 = or15;
            or19[105:105] = or18;
            or20 = or17[104:69];
            or21 = or20[34:0];
            or22 = or19;
            or22[68:34] = or21;
            or23 = or1[69:69];
            or24 = or22;
            or24[69:69] = or23;
            or25 = or17[33:0];
            or26 = or25[33:33];
            or27 = ol2;
            or27[34:34] = or26;
            or28 = or17[68:34];
            or29 = or28[33:0];
            or30 = or27;
            or30[68:35] = or29;
            or31 = or17[33:0];
            or32 = or31[31:0];
            or33 = or30;
            or33[31:0] = or32;
            or34 = or17[33:0];
            or35 = or34[32:32];
            or36 = or33;
            or36[32:32] = or35;
            or37 = or17[104:69];
            or38 = or37[35:35];
            or39 = or36;
            or39[33:33] = or38;
            or40 = {or24, or39};
            kernel_kernel = or40;
         end
   endfunction
endmodule
module top_read_controller_inbuf(input wire [1:0] clock_reset, input wire [33:0] i, output wire [33:0] o);
   wire [67:0] od;
   wire [33:0] d;
   wire [33:0] q;
   assign o = od[33:0];
   top_read_controller_inbuf_outbuf c0(.clock_reset(clock_reset), .i(d[33:0]), .o(q[33:0]));
   assign d = od[67:34];
   assign od = kernel_kernel(clock_reset, i, q);
   function [67:0] kernel_kernel(input reg [1:0] arg_0, input reg [33:0] arg_1, input reg [33:0] arg_2);
         reg [32:0] or0;
         reg [33:0] or1;
         reg [0:0] or2;
         reg [31:0] or3;
         // tdata
         reg [31:0] or4;
         // tvalid
         reg [0:0] or5;
         // d
         reg [33:0] or6;
         reg [0:0] or7;
         // d
         reg [33:0] or8;
         reg [0:0] or9;
         reg [0:0] or10;
         // d
         reg [33:0] or11;
         reg [33:0] or12;
         reg [31:0] or13;
         // o
         reg [33:0] or14;
         reg [0:0] or15;
         reg [0:0] or16;
         // o
         reg [33:0] or17;
         reg [0:0] or18;
         reg [0:0] or19;
         reg [0:0] or20;
         reg [0:0] or21;
         // o
         reg [33:0] or22;
         reg [67:0] or23;
         reg [1:0] or24;
         localparam ol0 = 1'b1;
         localparam ol1 = 32'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol2 = 1'b1;
         localparam ol3 = 1'b0;
         localparam ol4 = 34'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol5 = 34'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol6 = 1'b0;
         begin
            or24 = arg_0;
            or1 = arg_1;
            or12 = arg_2;
            or0 = or1[32:0];
            or2 = or0[32:32];
            or3 = or0[31:0];
            case (or2)
               1'b1 : or4 = or3;
               default : or4 = ol1;
            endcase
            case (or2)
               1'b1 : or5 = ol2;
               default : or5 = ol3;
            endcase
            or6 = ol4;
            or6[31:0] = or4;
            or7 = ~or5;
            or8 = or6;
            or8[32:32] = or7;
            or9 = or1[33:33];
            or10 = ~or9;
            or11 = or8;
            or11[33:33] = or10;
            or13 = or12[31:0];
            or14 = ol5;
            or14[31:0] = or13;
            or15 = or12[32:32];
            or16 = ~or15;
            or17 = or14;
            or17[32:32] = or16;
            or18 = or12[33:33];
            or19 = ~or18;
            or20 = ol6;
            or21 = or20;
            or21[0:0] = or19;
            or22 = or17;
            or22[33:33] = or21;
            or23 = {or11, or22};
            kernel_kernel = or23;
         end
   endfunction
endmodule
module top_read_controller_inbuf_outbuf(input wire [1:0] clock_reset, input wire [33:0] i, output wire [33:0] o);
   wire [99:0] od;
   wire [65:0] d;
   wire [65:0] q;
   assign o = od[33:0];
   top_read_controller_inbuf_outbuf_aux_ff c0(.clock_reset(clock_reset), .i(d[63:32]), .o(q[63:32]));
   top_read_controller_inbuf_outbuf_main_ff c1(.clock_reset(clock_reset), .i(d[31:0]), .o(q[31:0]));
   top_read_controller_inbuf_outbuf_state_ff c2(.clock_reset(clock_reset), .i(d[65:65]), .o(q[65:65]));
   top_read_controller_inbuf_outbuf_void_ff c3(.clock_reset(clock_reset), .i(d[64:64]), .o(q[64:64]));
   assign d = od[99:34];
   assign od = kernel_carloni_kernel(clock_reset, i, q);
   function [99:0] kernel_carloni_kernel(input reg [1:0] arg_0, input reg [33:0] arg_1, input reg [65:0] arg_2);
         reg [0:0] or0;
         reg [65:0] or1;
         reg [0:0] or2;
         reg [33:0] or3;
         reg [0:0] or4;
         reg [0:0] or5;
         reg [0:0] or6;
         reg [0:0] or7;
         reg [0:0] or8;
         reg [0:0] or9;
         // d
         reg [65:0] or10;
         reg [0:0] or11;
         reg [0:0] or12;
         reg [0:0] or13;
         reg [0:0] or14;
         reg [0:0] or15;
         reg [0:0] or16;
         reg [0:0] or17;
         // d
         reg [65:0] or18;
         // aux_en
         reg [0:0] or19;
         // d
         reg [65:0] or20;
         // aux_en
         reg [0:0] or21;
         // d
         reg [65:0] or22;
         // main_en
         reg [0:0] or23;
         reg [0:0] or24;
         // d
         reg [65:0] or25;
         // d
         reg [65:0] or26;
         // main_en
         reg [0:0] or27;
         // sel
         reg [0:0] or28;
         // stop_out
         reg [0:0] or29;
         // aux_en
         reg [0:0] or30;
         // d
         reg [65:0] or31;
         // main_en
         reg [0:0] or32;
         // sel
         reg [0:0] or33;
         // stop_out
         reg [0:0] or34;
         reg [31:0] or35;
         reg [31:0] or36;
         reg [31:0] or37;
         // d
         reg [65:0] or38;
         reg [31:0] or39;
         reg [31:0] or40;
         reg [31:0] or41;
         reg [31:0] or42;
         reg [31:0] or43;
         // d
         reg [65:0] or44;
         reg [0:0] or45;
         reg [0:0] or46;
         reg [0:0] or47;
         reg [0:0] or48;
         // d
         reg [65:0] or49;
         reg [31:0] or50;
         // o
         reg [33:0] or51;
         reg [0:0] or52;
         // o
         reg [33:0] or53;
         // o
         reg [33:0] or54;
         reg [0:0] or55;
         reg [1:0] or56;
         reg [0:0] or57;
         // o
         reg [33:0] or58;
         // o
         reg [33:0] or59;
         // o
         reg [33:0] or60;
         reg [99:0] or61;
         localparam ol0 = 66'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol1 = 1'b1;
         localparam ol2 = 1'b1;
         localparam ol3 = 1'b0;
         localparam ol4 = 1'b1;
         localparam ol5 = 1'b0;
         localparam ol6 = 1'b0;
         localparam ol7 = 1'b1;
         localparam ol8 = 1'b0;
         localparam ol9 = 1'b1;
         localparam ol10 = 1'b1;
         localparam ol11 = 1'b1;
         localparam ol12 = 1'b0;
         localparam ol13 = 1'b1;
         localparam ol14 = 1'b0;
         localparam ol15 = 1'b0;
         localparam ol16 = 34'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol17 = 1'b1;
         localparam ol18 = 1'b1;
         begin
            or56 = arg_0;
            or3 = arg_1;
            or1 = arg_2;
            or0 = or1[64:64];
            or2 = or3[33:33];
            or4 = or3[32:32];
            or5 = ~or4;
            or6 = ~or0;
            or7 = or5 & or6;
            or8 = or2 & or7;
            or9 = or1[65:65];
            or10 = ol0;
            or10[65:65] = or9;
            or11 = or1[65:65];
            or12 = or3[33:33];
            or13 = ~or12;
            or14 = or3[32:32];
            or15 = ~or14;
            or16 = or15 & or0;
            or17 = or13 | or16;
            or18 = or10;
            or18[65:65] = ol1;
            or19 = or8 ? ol2 : ol3;
            or20 = or8 ? or18 : or10;
            or21 = or17 ? ol3 : or19;
            or22 = or17 ? or10 : or20;
            or23 = or17 ? ol4 : ol5;
            or24 = or3[33:33];
            or25 = or10;
            or25[65:65] = ol6;
            or26 = or24 ? or10 : or25;
            or27 = or24 ? ol5 : ol7;
            or28 = or24 ? ol8 : ol9;
            or29 = or24 ? ol10 : ol11;
            case (or11)
               1'b0 : or30 = or21;
               1'b1 : or30 = ol3;
            endcase
            case (or11)
               1'b0 : or31 = or22;
               1'b1 : or31 = or26;
            endcase
            case (or11)
               1'b0 : or32 = or23;
               1'b1 : or32 = or27;
            endcase
            case (or11)
               1'b0 : or33 = ol8;
               1'b1 : or33 = or28;
            endcase
            case (or11)
               1'b0 : or34 = ol14;
               1'b1 : or34 = or29;
            endcase
            or35 = or3[31:0];
            or36 = or1[63:32];
            or37 = or30 ? or35 : or36;
            or38 = or31;
            or38[63:32] = or37;
            or39 = or1[63:32];
            or40 = or3[31:0];
            or41 = or33 ? or39 : or40;
            or42 = or1[31:0];
            or43 = or32 ? or41 : or42;
            or44 = or38;
            or44[31:0] = or43;
            or45 = or3[32:32];
            or46 = or33 ? ol15 : or45;
            or47 = or1[64:64];
            or48 = or32 ? or46 : or47;
            or49 = or44;
            or49[64:64] = or48;
            or50 = or1[31:0];
            or51 = ol16;
            or51[31:0] = or50;
            or52 = or1[64:64];
            or53 = or51;
            or53[32:32] = or52;
            or54 = or53;
            or54[33:33] = or34;
            or55 = or56[1:1];
            or57 = |or55;
            or58 = or54;
            or58[32:32] = ol17;
            or59 = or58;
            or59[33:33] = ol18;
            or60 = or57 ? or59 : or54;
            or61 = {or49, or60};
            kernel_carloni_kernel = or61;
         end
   endfunction
endmodule
module top_read_controller_inbuf_outbuf_aux_ff(input wire [1:0] clock_reset, input wire [31:0] i, output reg [31:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 32'b00000000000000000000000000000000;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 32'b00000000000000000000000000000000;
      end else begin
         o <= i;
      end
   end
endmodule
module top_read_controller_inbuf_outbuf_main_ff(input wire [1:0] clock_reset, input wire [31:0] i, output reg [31:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 32'b00000000000000000000000000000000;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 32'b00000000000000000000000000000000;
      end else begin
         o <= i;
      end
   end
endmodule
module top_read_controller_inbuf_outbuf_state_ff(input wire [1:0] clock_reset, input wire [0:0] i, output reg [0:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 1'b0;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 1'b0;
      end else begin
         o <= i;
      end
   end
endmodule
module top_read_controller_inbuf_outbuf_void_ff(input wire [1:0] clock_reset, input wire [0:0] i, output reg [0:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 1'b1;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 1'b1;
      end else begin
         o <= i;
      end
   end
endmodule
module top_read_controller_map(input wire [1:0] clock_reset, input wire [35:0] i, output wire [34:0] o);
   wire [104:0] od;
   wire [69:0] d;
   wire [68:0] q;
   assign o = od[34:0];
   top_read_controller_map_func c0(.clock_reset(clock_reset), .i(d[69:36]), .o(q[68:36]));
   top_read_controller_map_input_buffer c1(.clock_reset(clock_reset), .i(d[35:0]), .o(q[35:0]));
   assign d = od[104:35];
   assign od = kernel_kernel(clock_reset, i, q);
   function [104:0] kernel_kernel(input reg [1:0] arg_0, input reg [35:0] arg_1, input reg [68:0] arg_2);
         reg [34:0] or0;
         reg [35:0] or1;
         // d
         reg [69:0] or2;
         reg [0:0] or3;
         reg [0:0] or4;
         reg [0:0] or5;
         // d
         reg [69:0] or6;
         reg [35:0] or7;
         reg [68:0] or8;
         reg [34:0] or9;
         reg [0:0] or10;
         reg [33:0] or11;
         // d
         reg [69:0] or12;
         reg [32:0] or13;
         reg [33:0] or14;
         reg [32:0] or15;
         // d
         reg [69:0] or16;
         // d
         reg [69:0] or17;
         reg [33:0] or18;
         reg [35:0] or19;
         reg [0:0] or20;
         reg [34:0] or21;
         reg [34:0] or22;
         reg [104:0] or23;
         reg [1:0] or24;
         localparam ol0 = 70'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol1 = 1'b0;
         localparam ol2 = 1'b1;
         localparam ol3 = 34'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol4 = 1'b1;
         localparam ol5 = 34'b0000000000000000000000000000000000;
         localparam ol6 = 35'b00000000000000000000000000000000000;
         begin
            or24 = arg_0;
            or1 = arg_1;
            or8 = arg_2;
            or0 = or1[34:0];
            or2 = ol0;
            or2[34:0] = or0;
            or3 = or1[35:35];
            or4 = ol1;
            or5 = or4;
            or5[0:0] = or3;
            or6 = or2;
            or6[35:35] = or5;
            or7 = or8[35:0];
            or9 = or7[34:0];
            or10 = or9[34:34];
            or11 = or9[33:0];
            or12 = or6;
            or12[69:36] = or11;
            or13 = or8[68:36];
            or15 = or13[32:0];
            or14 = {ol2, or15};
            or16 = or6;
            or16[69:36] = ol3;
            case (or10)
               1'b1 : or17 = or12;
               default : or17 = or16;
            endcase
            case (or10)
               1'b1 : or18 = or14;
               default : or18 = ol5;
            endcase
            or19 = or8[35:0];
            or20 = or19[35:35];
            or21 = ol6;
            or21[33:0] = or18;
            or22 = or21;
            or22[34:34] = or20;
            or23 = {or17, or22};
            kernel_kernel = or23;
         end
   endfunction
endmodule
module top_read_controller_map_func(input wire [1:0] clock_reset, input wire [33:0] i, output wire [32:0] o);
   assign o = kernel_map_result(clock_reset, i);
   function [32:0] kernel_map_result(input reg [1:0] arg_0, input reg [33:0] arg_1);
         reg [1:0] or0;
         reg [33:0] or1;
         reg [31:0] or2;
         reg [32:0] or3;
         reg [31:0] or4;
         reg [32:0] or5;
         reg [32:0] or6;
         reg [1:0] or7;
         localparam ol0 = 33'b100000000000000000000000000000000;
         localparam ol1 = 33'b100000000000000000000000000000000;
         localparam ol2 = 2'b00;
         localparam ol3 = 2'b01;
         localparam ol4 = 2'b11;
         localparam ol5 = 33'b000000000000000000000000000000001;
         localparam ol6 = 2'b10;
         localparam ol7 = 33'b000000000000000000000000000000000;
         localparam ol8 = 33'b000000000000000000000000000000001;
         begin
            or7 = arg_0;
            or1 = arg_1;
            or0 = or1[1:0];
            or2 = or1[33:2];
            or3 = ol0;
            or3[31:0] = or2;
            or4 = or1[33:2];
            or5 = ol1;
            or5[31:0] = or4;
            case (or0)
               2'b00 : or6 = or3;
               2'b01 : or6 = or5;
               2'b11 : or6 = ol5;
               2'b10 : or6 = ol7;
               default : or6 = ol8;
            endcase
            kernel_map_result = or6;
         end
   endfunction
endmodule
module top_read_controller_map_input_buffer(input wire [1:0] clock_reset, input wire [35:0] i, output wire [35:0] o);
   wire [71:0] od;
   wire [35:0] d;
   wire [35:0] q;
   assign o = od[35:0];
   top_read_controller_map_input_buffer_inner c0(.clock_reset(clock_reset), .i(d[35:0]), .o(q[35:0]));
   assign d = od[71:36];
   assign od = kernel_option_carloni_kernel(clock_reset, i, q);
   function [71:0] kernel_option_carloni_kernel(input reg [1:0] arg_0, input reg [35:0] arg_1, input reg [35:0] arg_2);
         reg [34:0] or0;
         reg [35:0] or1;
         reg [0:0] or2;
         reg [33:0] or3;
         reg [34:0] or4;
         reg [34:0] or5;
         reg [0:0] or6;
         reg [33:0] or7;
         // d
         reg [35:0] or8;
         reg [0:0] or9;
         // d
         reg [35:0] or10;
         reg [0:0] or11;
         reg [0:0] or12;
         // d
         reg [35:0] or13;
         reg [35:0] or14;
         reg [0:0] or15;
         reg [0:0] or16;
         reg [0:0] or17;
         reg [0:0] or18;
         // o
         reg [35:0] or19;
         reg [0:0] or20;
         reg [0:0] or21;
         reg [33:0] or22;
         reg [34:0] or23;
         reg [33:0] or24;
         reg [34:0] or25;
         // o
         reg [35:0] or26;
         reg [71:0] or27;
         reg [1:0] or28;
         localparam ol0 = 1'b1;
         localparam ol1 = 1'b1;
         localparam ol2 = 1'b0;
         localparam ol3 = 35'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0;
         localparam ol4 = 36'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol5 = 1'b0;
         localparam ol6 = 36'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol7 = 1'b1;
         localparam ol8 = 35'b00000000000000000000000000000000000;
         begin
            or28 = arg_0;
            or1 = arg_1;
            or14 = arg_2;
            or0 = or1[34:0];
            or2 = or0[34:34];
            or3 = or0[33:0];
            or4 = {or3, ol0};
            case (or2)
               1'b1 : or5 = or4;
               1'b0 : or5 = ol3;
            endcase
            or6 = or5[0:0];
            or7 = or5[34:1];
            or8 = ol4;
            or8[33:0] = or7;
            or9 = ~or6;
            or10 = or8;
            or10[34:34] = or9;
            or11 = or1[35:35];
            or12 = ~or11;
            or13 = or10;
            or13[35:35] = or12;
            or15 = or14[35:35];
            or16 = ~or15;
            or17 = ol5;
            or18 = or17;
            or18[0:0] = or16;
            or19 = ol6;
            or19[35:35] = or18;
            or20 = or14[34:34];
            or21 = ~or20;
            or22 = or14[33:0];
            or24 = or22[33:0];
            or23 = {ol7, or24};
            or25 = or21 ? or23 : ol8;
            or26 = or19;
            or26[34:0] = or25;
            or27 = {or13, or26};
            kernel_option_carloni_kernel = or27;
         end
   endfunction
endmodule
module top_read_controller_map_input_buffer_inner(input wire [1:0] clock_reset, input wire [35:0] i, output wire [35:0] o);
   wire [105:0] od;
   wire [69:0] d;
   wire [69:0] q;
   assign o = od[35:0];
   top_read_controller_map_input_buffer_inner_aux_ff c0(.clock_reset(clock_reset), .i(d[67:34]), .o(q[67:34]));
   top_read_controller_map_input_buffer_inner_main_ff c1(.clock_reset(clock_reset), .i(d[33:0]), .o(q[33:0]));
   top_read_controller_map_input_buffer_inner_state_ff c2(.clock_reset(clock_reset), .i(d[69:69]), .o(q[69:69]));
   top_read_controller_map_input_buffer_inner_void_ff c3(.clock_reset(clock_reset), .i(d[68:68]), .o(q[68:68]));
   assign d = od[105:36];
   assign od = kernel_carloni_kernel(clock_reset, i, q);
   function [105:0] kernel_carloni_kernel(input reg [1:0] arg_0, input reg [35:0] arg_1, input reg [69:0] arg_2);
         reg [0:0] or0;
         reg [69:0] or1;
         reg [0:0] or2;
         reg [35:0] or3;
         reg [0:0] or4;
         reg [0:0] or5;
         reg [0:0] or6;
         reg [0:0] or7;
         reg [0:0] or8;
         reg [0:0] or9;
         // d
         reg [69:0] or10;
         reg [0:0] or11;
         reg [0:0] or12;
         reg [0:0] or13;
         reg [0:0] or14;
         reg [0:0] or15;
         reg [0:0] or16;
         reg [0:0] or17;
         // d
         reg [69:0] or18;
         // aux_en
         reg [0:0] or19;
         // d
         reg [69:0] or20;
         // aux_en
         reg [0:0] or21;
         // d
         reg [69:0] or22;
         // main_en
         reg [0:0] or23;
         reg [0:0] or24;
         // d
         reg [69:0] or25;
         // d
         reg [69:0] or26;
         // main_en
         reg [0:0] or27;
         // sel
         reg [0:0] or28;
         // stop_out
         reg [0:0] or29;
         // aux_en
         reg [0:0] or30;
         // d
         reg [69:0] or31;
         // main_en
         reg [0:0] or32;
         // sel
         reg [0:0] or33;
         // stop_out
         reg [0:0] or34;
         reg [33:0] or35;
         reg [33:0] or36;
         reg [33:0] or37;
         // d
         reg [69:0] or38;
         reg [33:0] or39;
         reg [33:0] or40;
         reg [33:0] or41;
         reg [33:0] or42;
         reg [33:0] or43;
         // d
         reg [69:0] or44;
         reg [0:0] or45;
         reg [0:0] or46;
         reg [0:0] or47;
         reg [0:0] or48;
         // d
         reg [69:0] or49;
         reg [33:0] or50;
         // o
         reg [35:0] or51;
         reg [0:0] or52;
         // o
         reg [35:0] or53;
         // o
         reg [35:0] or54;
         reg [0:0] or55;
         reg [1:0] or56;
         reg [0:0] or57;
         // o
         reg [35:0] or58;
         // o
         reg [35:0] or59;
         // o
         reg [35:0] or60;
         reg [105:0] or61;
         localparam ol0 = 70'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol1 = 1'b1;
         localparam ol2 = 1'b1;
         localparam ol3 = 1'b0;
         localparam ol4 = 1'b1;
         localparam ol5 = 1'b0;
         localparam ol6 = 1'b0;
         localparam ol7 = 1'b1;
         localparam ol8 = 1'b0;
         localparam ol9 = 1'b1;
         localparam ol10 = 1'b1;
         localparam ol11 = 1'b1;
         localparam ol12 = 1'b0;
         localparam ol13 = 1'b1;
         localparam ol14 = 1'b0;
         localparam ol15 = 1'b0;
         localparam ol16 = 36'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol17 = 1'b1;
         localparam ol18 = 1'b1;
         begin
            or56 = arg_0;
            or3 = arg_1;
            or1 = arg_2;
            or0 = or1[68:68];
            or2 = or3[35:35];
            or4 = or3[34:34];
            or5 = ~or4;
            or6 = ~or0;
            or7 = or5 & or6;
            or8 = or2 & or7;
            or9 = or1[69:69];
            or10 = ol0;
            or10[69:69] = or9;
            or11 = or1[69:69];
            or12 = or3[35:35];
            or13 = ~or12;
            or14 = or3[34:34];
            or15 = ~or14;
            or16 = or15 & or0;
            or17 = or13 | or16;
            or18 = or10;
            or18[69:69] = ol1;
            or19 = or8 ? ol2 : ol3;
            or20 = or8 ? or18 : or10;
            or21 = or17 ? ol3 : or19;
            or22 = or17 ? or10 : or20;
            or23 = or17 ? ol4 : ol5;
            or24 = or3[35:35];
            or25 = or10;
            or25[69:69] = ol6;
            or26 = or24 ? or10 : or25;
            or27 = or24 ? ol5 : ol7;
            or28 = or24 ? ol8 : ol9;
            or29 = or24 ? ol10 : ol11;
            case (or11)
               1'b0 : or30 = or21;
               1'b1 : or30 = ol3;
            endcase
            case (or11)
               1'b0 : or31 = or22;
               1'b1 : or31 = or26;
            endcase
            case (or11)
               1'b0 : or32 = or23;
               1'b1 : or32 = or27;
            endcase
            case (or11)
               1'b0 : or33 = ol8;
               1'b1 : or33 = or28;
            endcase
            case (or11)
               1'b0 : or34 = ol14;
               1'b1 : or34 = or29;
            endcase
            or35 = or3[33:0];
            or36 = or1[67:34];
            or37 = or30 ? or35 : or36;
            or38 = or31;
            or38[67:34] = or37;
            or39 = or1[67:34];
            or40 = or3[33:0];
            or41 = or33 ? or39 : or40;
            or42 = or1[33:0];
            or43 = or32 ? or41 : or42;
            or44 = or38;
            or44[33:0] = or43;
            or45 = or3[34:34];
            or46 = or33 ? ol15 : or45;
            or47 = or1[68:68];
            or48 = or32 ? or46 : or47;
            or49 = or44;
            or49[68:68] = or48;
            or50 = or1[33:0];
            or51 = ol16;
            or51[33:0] = or50;
            or52 = or1[68:68];
            or53 = or51;
            or53[34:34] = or52;
            or54 = or53;
            or54[35:35] = or34;
            or55 = or56[1:1];
            or57 = |or55;
            or58 = or54;
            or58[34:34] = ol17;
            or59 = or58;
            or59[35:35] = ol18;
            or60 = or57 ? or59 : or54;
            or61 = {or49, or60};
            kernel_carloni_kernel = or61;
         end
   endfunction
endmodule
module top_read_controller_map_input_buffer_inner_aux_ff(input wire [1:0] clock_reset, input wire [33:0] i, output reg [33:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 34'b0000000000000000000000000000000000;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 34'b0000000000000000000000000000000000;
      end else begin
         o <= i;
      end
   end
endmodule
module top_read_controller_map_input_buffer_inner_main_ff(input wire [1:0] clock_reset, input wire [33:0] i, output reg [33:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 34'b0000000000000000000000000000000000;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 34'b0000000000000000000000000000000000;
      end else begin
         o <= i;
      end
   end
endmodule
module top_read_controller_map_input_buffer_inner_state_ff(input wire [1:0] clock_reset, input wire [0:0] i, output reg [0:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 1'b0;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 1'b0;
      end else begin
         o <= i;
      end
   end
endmodule
module top_read_controller_map_input_buffer_inner_void_ff(input wire [1:0] clock_reset, input wire [0:0] i, output reg [0:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 1'b1;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 1'b1;
      end else begin
         o <= i;
      end
   end
endmodule
module top_read_controller_outbuf(input wire [1:0] clock_reset, input wire [35:0] i, output wire [35:0] o);
   wire [71:0] od;
   wire [35:0] d;
   wire [35:0] q;
   assign o = od[35:0];
   top_read_controller_outbuf_inbuf c0(.clock_reset(clock_reset), .i(d[35:0]), .o(q[35:0]));
   assign d = od[71:36];
   assign od = kernel_kernel(clock_reset, i, q);
   function [71:0] kernel_kernel(input reg [1:0] arg_0, input reg [35:0] arg_1, input reg [35:0] arg_2);
         reg [33:0] or0;
         reg [35:0] or1;
         // d
         reg [35:0] or2;
         reg [0:0] or3;
         reg [0:0] or4;
         // d
         reg [35:0] or5;
         reg [0:0] or6;
         reg [0:0] or7;
         // d
         reg [35:0] or8;
         reg [35:0] or9;
         reg [0:0] or10;
         reg [0:0] or11;
         reg [33:0] or12;
         reg [34:0] or13;
         reg [33:0] or14;
         reg [34:0] or15;
         reg [0:0] or16;
         reg [0:0] or17;
         // o
         reg [35:0] or18;
         // o
         reg [35:0] or19;
         reg [71:0] or20;
         reg [1:0] or21;
         localparam ol0 = 36'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol1 = 1'b1;
         localparam ol2 = 35'b00000000000000000000000000000000000;
         localparam ol3 = 36'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         begin
            or21 = arg_0;
            or1 = arg_1;
            or9 = arg_2;
            or0 = or1[33:0];
            or2 = ol0;
            or2[33:0] = or0;
            or3 = or1[34:34];
            or4 = ~or3;
            or5 = or2;
            or5[34:34] = or4;
            or6 = or1[35:35];
            or7 = ~or6;
            or8 = or5;
            or8[35:35] = or7;
            or10 = or9[34:34];
            or11 = ~or10;
            or12 = or9[33:0];
            or14 = or12[33:0];
            or13 = {ol1, or14};
            or15 = or11 ? or13 : ol2;
            or16 = or9[35:35];
            or17 = ~or16;
            or18 = ol3;
            or18[35:35] = or17;
            or19 = or18;
            or19[34:0] = or15;
            or20 = {or8, or19};
            kernel_kernel = or20;
         end
   endfunction
endmodule
module top_read_controller_outbuf_inbuf(input wire [1:0] clock_reset, input wire [35:0] i, output wire [35:0] o);
   wire [105:0] od;
   wire [69:0] d;
   wire [69:0] q;
   assign o = od[35:0];
   top_read_controller_outbuf_inbuf_aux_ff c0(.clock_reset(clock_reset), .i(d[67:34]), .o(q[67:34]));
   top_read_controller_outbuf_inbuf_main_ff c1(.clock_reset(clock_reset), .i(d[33:0]), .o(q[33:0]));
   top_read_controller_outbuf_inbuf_state_ff c2(.clock_reset(clock_reset), .i(d[69:69]), .o(q[69:69]));
   top_read_controller_outbuf_inbuf_void_ff c3(.clock_reset(clock_reset), .i(d[68:68]), .o(q[68:68]));
   assign d = od[105:36];
   assign od = kernel_carloni_kernel(clock_reset, i, q);
   function [105:0] kernel_carloni_kernel(input reg [1:0] arg_0, input reg [35:0] arg_1, input reg [69:0] arg_2);
         reg [0:0] or0;
         reg [69:0] or1;
         reg [0:0] or2;
         reg [35:0] or3;
         reg [0:0] or4;
         reg [0:0] or5;
         reg [0:0] or6;
         reg [0:0] or7;
         reg [0:0] or8;
         reg [0:0] or9;
         // d
         reg [69:0] or10;
         reg [0:0] or11;
         reg [0:0] or12;
         reg [0:0] or13;
         reg [0:0] or14;
         reg [0:0] or15;
         reg [0:0] or16;
         reg [0:0] or17;
         // d
         reg [69:0] or18;
         // aux_en
         reg [0:0] or19;
         // d
         reg [69:0] or20;
         // aux_en
         reg [0:0] or21;
         // d
         reg [69:0] or22;
         // main_en
         reg [0:0] or23;
         reg [0:0] or24;
         // d
         reg [69:0] or25;
         // d
         reg [69:0] or26;
         // main_en
         reg [0:0] or27;
         // sel
         reg [0:0] or28;
         // stop_out
         reg [0:0] or29;
         // aux_en
         reg [0:0] or30;
         // d
         reg [69:0] or31;
         // main_en
         reg [0:0] or32;
         // sel
         reg [0:0] or33;
         // stop_out
         reg [0:0] or34;
         reg [33:0] or35;
         reg [33:0] or36;
         reg [33:0] or37;
         // d
         reg [69:0] or38;
         reg [33:0] or39;
         reg [33:0] or40;
         reg [33:0] or41;
         reg [33:0] or42;
         reg [33:0] or43;
         // d
         reg [69:0] or44;
         reg [0:0] or45;
         reg [0:0] or46;
         reg [0:0] or47;
         reg [0:0] or48;
         // d
         reg [69:0] or49;
         reg [33:0] or50;
         // o
         reg [35:0] or51;
         reg [0:0] or52;
         // o
         reg [35:0] or53;
         // o
         reg [35:0] or54;
         reg [0:0] or55;
         reg [1:0] or56;
         reg [0:0] or57;
         // o
         reg [35:0] or58;
         // o
         reg [35:0] or59;
         // o
         reg [35:0] or60;
         reg [105:0] or61;
         localparam ol0 = 70'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol1 = 1'b1;
         localparam ol2 = 1'b1;
         localparam ol3 = 1'b0;
         localparam ol4 = 1'b1;
         localparam ol5 = 1'b0;
         localparam ol6 = 1'b0;
         localparam ol7 = 1'b1;
         localparam ol8 = 1'b0;
         localparam ol9 = 1'b1;
         localparam ol10 = 1'b1;
         localparam ol11 = 1'b1;
         localparam ol12 = 1'b0;
         localparam ol13 = 1'b1;
         localparam ol14 = 1'b0;
         localparam ol15 = 1'b0;
         localparam ol16 = 36'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol17 = 1'b1;
         localparam ol18 = 1'b1;
         begin
            or56 = arg_0;
            or3 = arg_1;
            or1 = arg_2;
            or0 = or1[68:68];
            or2 = or3[35:35];
            or4 = or3[34:34];
            or5 = ~or4;
            or6 = ~or0;
            or7 = or5 & or6;
            or8 = or2 & or7;
            or9 = or1[69:69];
            or10 = ol0;
            or10[69:69] = or9;
            or11 = or1[69:69];
            or12 = or3[35:35];
            or13 = ~or12;
            or14 = or3[34:34];
            or15 = ~or14;
            or16 = or15 & or0;
            or17 = or13 | or16;
            or18 = or10;
            or18[69:69] = ol1;
            or19 = or8 ? ol2 : ol3;
            or20 = or8 ? or18 : or10;
            or21 = or17 ? ol3 : or19;
            or22 = or17 ? or10 : or20;
            or23 = or17 ? ol4 : ol5;
            or24 = or3[35:35];
            or25 = or10;
            or25[69:69] = ol6;
            or26 = or24 ? or10 : or25;
            or27 = or24 ? ol5 : ol7;
            or28 = or24 ? ol8 : ol9;
            or29 = or24 ? ol10 : ol11;
            case (or11)
               1'b0 : or30 = or21;
               1'b1 : or30 = ol3;
            endcase
            case (or11)
               1'b0 : or31 = or22;
               1'b1 : or31 = or26;
            endcase
            case (or11)
               1'b0 : or32 = or23;
               1'b1 : or32 = or27;
            endcase
            case (or11)
               1'b0 : or33 = ol8;
               1'b1 : or33 = or28;
            endcase
            case (or11)
               1'b0 : or34 = ol14;
               1'b1 : or34 = or29;
            endcase
            or35 = or3[33:0];
            or36 = or1[67:34];
            or37 = or30 ? or35 : or36;
            or38 = or31;
            or38[67:34] = or37;
            or39 = or1[67:34];
            or40 = or3[33:0];
            or41 = or33 ? or39 : or40;
            or42 = or1[33:0];
            or43 = or32 ? or41 : or42;
            or44 = or38;
            or44[33:0] = or43;
            or45 = or3[34:34];
            or46 = or33 ? ol15 : or45;
            or47 = or1[68:68];
            or48 = or32 ? or46 : or47;
            or49 = or44;
            or49[68:68] = or48;
            or50 = or1[33:0];
            or51 = ol16;
            or51[33:0] = or50;
            or52 = or1[68:68];
            or53 = or51;
            or53[34:34] = or52;
            or54 = or53;
            or54[35:35] = or34;
            or55 = or56[1:1];
            or57 = |or55;
            or58 = or54;
            or58[34:34] = ol17;
            or59 = or58;
            or59[35:35] = ol18;
            or60 = or57 ? or59 : or54;
            or61 = {or49, or60};
            kernel_carloni_kernel = or61;
         end
   endfunction
endmodule
module top_read_controller_outbuf_inbuf_aux_ff(input wire [1:0] clock_reset, input wire [33:0] i, output reg [33:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 34'b0000000000000000000000000000000000;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 34'b0000000000000000000000000000000000;
      end else begin
         o <= i;
      end
   end
endmodule
module top_read_controller_outbuf_inbuf_main_ff(input wire [1:0] clock_reset, input wire [33:0] i, output reg [33:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 34'b0000000000000000000000000000000000;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 34'b0000000000000000000000000000000000;
      end else begin
         o <= i;
      end
   end
endmodule
module top_read_controller_outbuf_inbuf_state_ff(input wire [1:0] clock_reset, input wire [0:0] i, output reg [0:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 1'b0;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 1'b0;
      end else begin
         o <= i;
      end
   end
endmodule
module top_read_controller_outbuf_inbuf_void_ff(input wire [1:0] clock_reset, input wire [0:0] i, output reg [0:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 1'b1;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 1'b1;
      end else begin
         o <= i;
      end
   end
endmodule
module top_state(input wire [1:0] clock_reset, input wire [1:0] i, output reg [1:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 2'b00;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 2'b00;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller(input wire [1:0] clock_reset, input wire [74:0] i, output wire [74:0] o);
   wire [225:0] od;
   wire [150:0] d;
   wire [150:0] q;
   assign o = od[74:0];
   top_write_controller_addr_buf c0(.clock_reset(clock_reset), .i(d[104:71]), .o(q[104:71]));
   top_write_controller_data_buf c1(.clock_reset(clock_reset), .i(d[142:105]), .o(q[142:105]));
   top_write_controller_map c2(.clock_reset(clock_reset), .i(d[146:143]), .o(q[146:143]));
   top_write_controller_outbuf c3(.clock_reset(clock_reset), .i(d[150:147]), .o(q[150:147]));
   top_write_controller_tee c4(.clock_reset(clock_reset), .i(d[70:0]), .o(q[70:0]));
   assign d = od[225:75];
   assign od = kernel_kernel(clock_reset, i, q);
   function [225:0] kernel_kernel(input reg [1:0] arg_0, input reg [74:0] arg_1, input reg [150:0] arg_2);
         reg [68:0] or0;
         reg [74:0] or1;
         reg [0:0] or2;
         reg [67:0] or3;
         reg [31:0] or4;
         reg [35:0] or5;
         reg [67:0] or6;
         reg [68:0] or7;
         reg [67:0] or8;
         // d
         reg [150:0] or9;
         // d
         reg [150:0] or10;
         reg [70:0] or11;
         reg [150:0] or12;
         reg [32:0] or13;
         // d
         reg [150:0] or14;
         reg [33:0] or15;
         reg [0:0] or16;
         // d
         reg [150:0] or17;
         reg [70:0] or18;
         reg [36:0] or19;
         // d
         reg [150:0] or20;
         reg [37:0] or21;
         reg [0:0] or22;
         // d
         reg [150:0] or23;
         reg [70:0] or24;
         reg [0:0] or25;
         reg [0:0] or26;
         reg [0:0] or27;
         // o
         reg [74:0] or28;
         reg [33:0] or29;
         reg [31:0] or30;
         // o
         reg [74:0] or31;
         reg [33:0] or32;
         reg [0:0] or33;
         // o
         reg [74:0] or34;
         reg [4:0] or35;
         reg [0:0] or36;
         // d
         reg [150:0] or37;
         reg [37:0] or38;
         reg [35:0] or39;
         reg [31:0] or40;
         // o
         reg [74:0] or41;
         reg [37:0] or42;
         reg [35:0] or43;
         reg [3:0] or44;
         // o
         reg [74:0] or45;
         reg [37:0] or46;
         reg [0:0] or47;
         // o
         reg [74:0] or48;
         reg [4:0] or49;
         reg [0:0] or50;
         // d
         reg [150:0] or51;
         reg [4:0] or52;
         reg [1:0] or53;
         // d
         reg [150:0] or54;
         reg [4:0] or55;
         reg [0:0] or56;
         // d
         reg [150:0] or57;
         reg [3:0] or58;
         reg [0:0] or59;
         // o
         reg [74:0] or60;
         reg [3:0] or61;
         reg [2:0] or62;
         // d
         reg [150:0] or63;
         reg [3:0] or64;
         reg [0:0] or65;
         // d
         reg [150:0] or66;
         reg [3:0] or67;
         reg [2:0] or68;
         // o
         reg [74:0] or69;
         reg [0:0] or70;
         // d
         reg [150:0] or71;
         reg [225:0] or72;
         reg [1:0] or73;
         localparam ol0 = 1'b1;
         localparam ol1 = 151'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX000000000000000000000000000000000000000000000000000000000000000000000;
         localparam ol2 = 1'b1;
         localparam ol3 = 1'b0;
         localparam ol4 = 75'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         begin
            or73 = arg_0;
            or1 = arg_1;
            or12 = arg_2;
            or0 = or1[73:5];
            or2 = or0[68:68];
            or3 = or0[67:0];
            or4 = or3[31:0];
            or5 = or3[67:32];
            or6 = {or5, or4};
            or8 = or6[67:0];
            or7 = {ol0, or8};
            or9 = ol1;
            or9[68:0] = or7;
            case (or2)
               1'b1 : or10 = or9;
               default : or10 = ol1;
            endcase
            or11 = or12[70:0];
            or13 = or11[32:0];
            or14 = or10;
            or14[103:71] = or13;
            or15 = or12[104:71];
            or16 = or15[33:33];
            or17 = or14;
            or17[69:69] = or16;
            or18 = or12[70:0];
            or19 = or18[69:33];
            or20 = or17;
            or20[141:105] = or19;
            or21 = or12[142:105];
            or22 = or21[37:37];
            or23 = or20;
            or23[70:70] = or22;
            or24 = or12[70:0];
            or25 = or24[70:70];
            or26 = ol3;
            or27 = or26;
            or27[0:0] = or25;
            or28 = ol4;
            or28[71:71] = or27;
            or29 = or12[104:71];
            or30 = or29[31:0];
            or31 = or28;
            or31[31:0] = or30;
            or32 = or12[104:71];
            or33 = or32[32:32];
            or34 = or31;
            or34[32:32] = or33;
            or35 = or1[4:0];
            or36 = or35[0:0];
            or37 = or23;
            or37[104:104] = or36;
            or38 = or12[142:105];
            or39 = or38[35:0];
            or40 = or39[31:0];
            or41 = or34;
            or41[64:33] = or40;
            or42 = or12[142:105];
            or43 = or42[35:0];
            or44 = or43[35:32];
            or45 = or41;
            or45[68:65] = or44;
            or46 = or12[142:105];
            or47 = or46[36:36];
            or48 = or45;
            or48[69:69] = or47;
            or49 = or1[4:0];
            or50 = or49[1:1];
            or51 = or37;
            or51[142:142] = or50;
            or52 = or1[4:0];
            or53 = or52[3:2];
            or54 = or51;
            or54[148:147] = or53;
            or55 = or1[4:0];
            or56 = or55[4:4];
            or57 = or54;
            or57[149:149] = or56;
            or58 = or12[150:147];
            or59 = or58[3:3];
            or60 = or48;
            or60[70:70] = or59;
            or61 = or12[150:147];
            or62 = or61[2:0];
            or63 = or57;
            or63[145:143] = or62;
            or64 = or12[146:143];
            or65 = or64[3:3];
            or66 = or63;
            or66[150:150] = or65;
            or67 = or12[146:143];
            or68 = or67[2:0];
            or69 = or60;
            or69[74:72] = or68;
            or70 = or1[74:74];
            or71 = or66;
            or71[146:146] = or70;
            or72 = {or71, or69};
            kernel_kernel = or72;
         end
   endfunction
endmodule
module top_write_controller_addr_buf(input wire [1:0] clock_reset, input wire [33:0] i, output wire [33:0] o);
   wire [67:0] od;
   wire [33:0] d;
   wire [33:0] q;
   assign o = od[33:0];
   top_write_controller_addr_buf_outbuf c0(.clock_reset(clock_reset), .i(d[33:0]), .o(q[33:0]));
   assign d = od[67:34];
   assign od = kernel_kernel(clock_reset, i, q);
   function [67:0] kernel_kernel(input reg [1:0] arg_0, input reg [33:0] arg_1, input reg [33:0] arg_2);
         reg [32:0] or0;
         reg [33:0] or1;
         reg [0:0] or2;
         reg [31:0] or3;
         // tdata
         reg [31:0] or4;
         // tvalid
         reg [0:0] or5;
         // d
         reg [33:0] or6;
         reg [0:0] or7;
         // d
         reg [33:0] or8;
         reg [0:0] or9;
         reg [0:0] or10;
         // d
         reg [33:0] or11;
         reg [33:0] or12;
         reg [31:0] or13;
         // o
         reg [33:0] or14;
         reg [0:0] or15;
         reg [0:0] or16;
         // o
         reg [33:0] or17;
         reg [0:0] or18;
         reg [0:0] or19;
         reg [0:0] or20;
         reg [0:0] or21;
         // o
         reg [33:0] or22;
         reg [67:0] or23;
         reg [1:0] or24;
         localparam ol0 = 1'b1;
         localparam ol1 = 32'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol2 = 1'b1;
         localparam ol3 = 1'b0;
         localparam ol4 = 34'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol5 = 34'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol6 = 1'b0;
         begin
            or24 = arg_0;
            or1 = arg_1;
            or12 = arg_2;
            or0 = or1[32:0];
            or2 = or0[32:32];
            or3 = or0[31:0];
            case (or2)
               1'b1 : or4 = or3;
               default : or4 = ol1;
            endcase
            case (or2)
               1'b1 : or5 = ol2;
               default : or5 = ol3;
            endcase
            or6 = ol4;
            or6[31:0] = or4;
            or7 = ~or5;
            or8 = or6;
            or8[32:32] = or7;
            or9 = or1[33:33];
            or10 = ~or9;
            or11 = or8;
            or11[33:33] = or10;
            or13 = or12[31:0];
            or14 = ol5;
            or14[31:0] = or13;
            or15 = or12[32:32];
            or16 = ~or15;
            or17 = or14;
            or17[32:32] = or16;
            or18 = or12[33:33];
            or19 = ~or18;
            or20 = ol6;
            or21 = or20;
            or21[0:0] = or19;
            or22 = or17;
            or22[33:33] = or21;
            or23 = {or11, or22};
            kernel_kernel = or23;
         end
   endfunction
endmodule
module top_write_controller_addr_buf_outbuf(input wire [1:0] clock_reset, input wire [33:0] i, output wire [33:0] o);
   wire [99:0] od;
   wire [65:0] d;
   wire [65:0] q;
   assign o = od[33:0];
   top_write_controller_addr_buf_outbuf_aux_ff c0(.clock_reset(clock_reset), .i(d[63:32]), .o(q[63:32]));
   top_write_controller_addr_buf_outbuf_main_ff c1(.clock_reset(clock_reset), .i(d[31:0]), .o(q[31:0]));
   top_write_controller_addr_buf_outbuf_state_ff c2(.clock_reset(clock_reset), .i(d[65:65]), .o(q[65:65]));
   top_write_controller_addr_buf_outbuf_void_ff c3(.clock_reset(clock_reset), .i(d[64:64]), .o(q[64:64]));
   assign d = od[99:34];
   assign od = kernel_carloni_kernel(clock_reset, i, q);
   function [99:0] kernel_carloni_kernel(input reg [1:0] arg_0, input reg [33:0] arg_1, input reg [65:0] arg_2);
         reg [0:0] or0;
         reg [65:0] or1;
         reg [0:0] or2;
         reg [33:0] or3;
         reg [0:0] or4;
         reg [0:0] or5;
         reg [0:0] or6;
         reg [0:0] or7;
         reg [0:0] or8;
         reg [0:0] or9;
         // d
         reg [65:0] or10;
         reg [0:0] or11;
         reg [0:0] or12;
         reg [0:0] or13;
         reg [0:0] or14;
         reg [0:0] or15;
         reg [0:0] or16;
         reg [0:0] or17;
         // d
         reg [65:0] or18;
         // aux_en
         reg [0:0] or19;
         // d
         reg [65:0] or20;
         // aux_en
         reg [0:0] or21;
         // d
         reg [65:0] or22;
         // main_en
         reg [0:0] or23;
         reg [0:0] or24;
         // d
         reg [65:0] or25;
         // d
         reg [65:0] or26;
         // main_en
         reg [0:0] or27;
         // sel
         reg [0:0] or28;
         // stop_out
         reg [0:0] or29;
         // aux_en
         reg [0:0] or30;
         // d
         reg [65:0] or31;
         // main_en
         reg [0:0] or32;
         // sel
         reg [0:0] or33;
         // stop_out
         reg [0:0] or34;
         reg [31:0] or35;
         reg [31:0] or36;
         reg [31:0] or37;
         // d
         reg [65:0] or38;
         reg [31:0] or39;
         reg [31:0] or40;
         reg [31:0] or41;
         reg [31:0] or42;
         reg [31:0] or43;
         // d
         reg [65:0] or44;
         reg [0:0] or45;
         reg [0:0] or46;
         reg [0:0] or47;
         reg [0:0] or48;
         // d
         reg [65:0] or49;
         reg [31:0] or50;
         // o
         reg [33:0] or51;
         reg [0:0] or52;
         // o
         reg [33:0] or53;
         // o
         reg [33:0] or54;
         reg [0:0] or55;
         reg [1:0] or56;
         reg [0:0] or57;
         // o
         reg [33:0] or58;
         // o
         reg [33:0] or59;
         // o
         reg [33:0] or60;
         reg [99:0] or61;
         localparam ol0 = 66'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol1 = 1'b1;
         localparam ol2 = 1'b1;
         localparam ol3 = 1'b0;
         localparam ol4 = 1'b1;
         localparam ol5 = 1'b0;
         localparam ol6 = 1'b0;
         localparam ol7 = 1'b1;
         localparam ol8 = 1'b0;
         localparam ol9 = 1'b1;
         localparam ol10 = 1'b1;
         localparam ol11 = 1'b1;
         localparam ol12 = 1'b0;
         localparam ol13 = 1'b1;
         localparam ol14 = 1'b0;
         localparam ol15 = 1'b0;
         localparam ol16 = 34'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol17 = 1'b1;
         localparam ol18 = 1'b1;
         begin
            or56 = arg_0;
            or3 = arg_1;
            or1 = arg_2;
            or0 = or1[64:64];
            or2 = or3[33:33];
            or4 = or3[32:32];
            or5 = ~or4;
            or6 = ~or0;
            or7 = or5 & or6;
            or8 = or2 & or7;
            or9 = or1[65:65];
            or10 = ol0;
            or10[65:65] = or9;
            or11 = or1[65:65];
            or12 = or3[33:33];
            or13 = ~or12;
            or14 = or3[32:32];
            or15 = ~or14;
            or16 = or15 & or0;
            or17 = or13 | or16;
            or18 = or10;
            or18[65:65] = ol1;
            or19 = or8 ? ol2 : ol3;
            or20 = or8 ? or18 : or10;
            or21 = or17 ? ol3 : or19;
            or22 = or17 ? or10 : or20;
            or23 = or17 ? ol4 : ol5;
            or24 = or3[33:33];
            or25 = or10;
            or25[65:65] = ol6;
            or26 = or24 ? or10 : or25;
            or27 = or24 ? ol5 : ol7;
            or28 = or24 ? ol8 : ol9;
            or29 = or24 ? ol10 : ol11;
            case (or11)
               1'b0 : or30 = or21;
               1'b1 : or30 = ol3;
            endcase
            case (or11)
               1'b0 : or31 = or22;
               1'b1 : or31 = or26;
            endcase
            case (or11)
               1'b0 : or32 = or23;
               1'b1 : or32 = or27;
            endcase
            case (or11)
               1'b0 : or33 = ol8;
               1'b1 : or33 = or28;
            endcase
            case (or11)
               1'b0 : or34 = ol14;
               1'b1 : or34 = or29;
            endcase
            or35 = or3[31:0];
            or36 = or1[63:32];
            or37 = or30 ? or35 : or36;
            or38 = or31;
            or38[63:32] = or37;
            or39 = or1[63:32];
            or40 = or3[31:0];
            or41 = or33 ? or39 : or40;
            or42 = or1[31:0];
            or43 = or32 ? or41 : or42;
            or44 = or38;
            or44[31:0] = or43;
            or45 = or3[32:32];
            or46 = or33 ? ol15 : or45;
            or47 = or1[64:64];
            or48 = or32 ? or46 : or47;
            or49 = or44;
            or49[64:64] = or48;
            or50 = or1[31:0];
            or51 = ol16;
            or51[31:0] = or50;
            or52 = or1[64:64];
            or53 = or51;
            or53[32:32] = or52;
            or54 = or53;
            or54[33:33] = or34;
            or55 = or56[1:1];
            or57 = |or55;
            or58 = or54;
            or58[32:32] = ol17;
            or59 = or58;
            or59[33:33] = ol18;
            or60 = or57 ? or59 : or54;
            or61 = {or49, or60};
            kernel_carloni_kernel = or61;
         end
   endfunction
endmodule
module top_write_controller_addr_buf_outbuf_aux_ff(input wire [1:0] clock_reset, input wire [31:0] i, output reg [31:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 32'b00000000000000000000000000000000;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 32'b00000000000000000000000000000000;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_addr_buf_outbuf_main_ff(input wire [1:0] clock_reset, input wire [31:0] i, output reg [31:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 32'b00000000000000000000000000000000;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 32'b00000000000000000000000000000000;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_addr_buf_outbuf_state_ff(input wire [1:0] clock_reset, input wire [0:0] i, output reg [0:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 1'b0;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 1'b0;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_addr_buf_outbuf_void_ff(input wire [1:0] clock_reset, input wire [0:0] i, output reg [0:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 1'b1;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 1'b1;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_data_buf(input wire [1:0] clock_reset, input wire [37:0] i, output wire [37:0] o);
   wire [75:0] od;
   wire [37:0] d;
   wire [37:0] q;
   assign o = od[37:0];
   top_write_controller_data_buf_outbuf c0(.clock_reset(clock_reset), .i(d[37:0]), .o(q[37:0]));
   assign d = od[75:38];
   assign od = kernel_kernel(clock_reset, i, q);
   function [75:0] kernel_kernel(input reg [1:0] arg_0, input reg [37:0] arg_1, input reg [37:0] arg_2);
         reg [36:0] or0;
         reg [37:0] or1;
         reg [0:0] or2;
         reg [35:0] or3;
         // tdata
         reg [35:0] or4;
         // tvalid
         reg [0:0] or5;
         // d
         reg [37:0] or6;
         reg [0:0] or7;
         // d
         reg [37:0] or8;
         reg [0:0] or9;
         reg [0:0] or10;
         // d
         reg [37:0] or11;
         reg [37:0] or12;
         reg [35:0] or13;
         // o
         reg [37:0] or14;
         reg [0:0] or15;
         reg [0:0] or16;
         // o
         reg [37:0] or17;
         reg [0:0] or18;
         reg [0:0] or19;
         reg [0:0] or20;
         reg [0:0] or21;
         // o
         reg [37:0] or22;
         reg [75:0] or23;
         reg [1:0] or24;
         localparam ol0 = 1'b1;
         localparam ol1 = 36'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol2 = 1'b1;
         localparam ol3 = 1'b0;
         localparam ol4 = 38'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol5 = 38'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol6 = 1'b0;
         begin
            or24 = arg_0;
            or1 = arg_1;
            or12 = arg_2;
            or0 = or1[36:0];
            or2 = or0[36:36];
            or3 = or0[35:0];
            case (or2)
               1'b1 : or4 = or3;
               default : or4 = ol1;
            endcase
            case (or2)
               1'b1 : or5 = ol2;
               default : or5 = ol3;
            endcase
            or6 = ol4;
            or6[35:0] = or4;
            or7 = ~or5;
            or8 = or6;
            or8[36:36] = or7;
            or9 = or1[37:37];
            or10 = ~or9;
            or11 = or8;
            or11[37:37] = or10;
            or13 = or12[35:0];
            or14 = ol5;
            or14[35:0] = or13;
            or15 = or12[36:36];
            or16 = ~or15;
            or17 = or14;
            or17[36:36] = or16;
            or18 = or12[37:37];
            or19 = ~or18;
            or20 = ol6;
            or21 = or20;
            or21[0:0] = or19;
            or22 = or17;
            or22[37:37] = or21;
            or23 = {or11, or22};
            kernel_kernel = or23;
         end
   endfunction
endmodule
module top_write_controller_data_buf_outbuf(input wire [1:0] clock_reset, input wire [37:0] i, output wire [37:0] o);
   wire [111:0] od;
   wire [73:0] d;
   wire [73:0] q;
   assign o = od[37:0];
   top_write_controller_data_buf_outbuf_aux_ff c0(.clock_reset(clock_reset), .i(d[71:36]), .o(q[71:36]));
   top_write_controller_data_buf_outbuf_main_ff c1(.clock_reset(clock_reset), .i(d[35:0]), .o(q[35:0]));
   top_write_controller_data_buf_outbuf_state_ff c2(.clock_reset(clock_reset), .i(d[73:73]), .o(q[73:73]));
   top_write_controller_data_buf_outbuf_void_ff c3(.clock_reset(clock_reset), .i(d[72:72]), .o(q[72:72]));
   assign d = od[111:38];
   assign od = kernel_carloni_kernel(clock_reset, i, q);
   function [111:0] kernel_carloni_kernel(input reg [1:0] arg_0, input reg [37:0] arg_1, input reg [73:0] arg_2);
         reg [0:0] or0;
         reg [73:0] or1;
         reg [0:0] or2;
         reg [37:0] or3;
         reg [0:0] or4;
         reg [0:0] or5;
         reg [0:0] or6;
         reg [0:0] or7;
         reg [0:0] or8;
         reg [0:0] or9;
         // d
         reg [73:0] or10;
         reg [0:0] or11;
         reg [0:0] or12;
         reg [0:0] or13;
         reg [0:0] or14;
         reg [0:0] or15;
         reg [0:0] or16;
         reg [0:0] or17;
         // d
         reg [73:0] or18;
         // aux_en
         reg [0:0] or19;
         // d
         reg [73:0] or20;
         // aux_en
         reg [0:0] or21;
         // d
         reg [73:0] or22;
         // main_en
         reg [0:0] or23;
         reg [0:0] or24;
         // d
         reg [73:0] or25;
         // d
         reg [73:0] or26;
         // main_en
         reg [0:0] or27;
         // sel
         reg [0:0] or28;
         // stop_out
         reg [0:0] or29;
         // aux_en
         reg [0:0] or30;
         // d
         reg [73:0] or31;
         // main_en
         reg [0:0] or32;
         // sel
         reg [0:0] or33;
         // stop_out
         reg [0:0] or34;
         reg [35:0] or35;
         reg [35:0] or36;
         reg [35:0] or37;
         // d
         reg [73:0] or38;
         reg [35:0] or39;
         reg [35:0] or40;
         reg [35:0] or41;
         reg [35:0] or42;
         reg [35:0] or43;
         // d
         reg [73:0] or44;
         reg [0:0] or45;
         reg [0:0] or46;
         reg [0:0] or47;
         reg [0:0] or48;
         // d
         reg [73:0] or49;
         reg [35:0] or50;
         // o
         reg [37:0] or51;
         reg [0:0] or52;
         // o
         reg [37:0] or53;
         // o
         reg [37:0] or54;
         reg [0:0] or55;
         reg [1:0] or56;
         reg [0:0] or57;
         // o
         reg [37:0] or58;
         // o
         reg [37:0] or59;
         // o
         reg [37:0] or60;
         reg [111:0] or61;
         localparam ol0 = 74'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol1 = 1'b1;
         localparam ol2 = 1'b1;
         localparam ol3 = 1'b0;
         localparam ol4 = 1'b1;
         localparam ol5 = 1'b0;
         localparam ol6 = 1'b0;
         localparam ol7 = 1'b1;
         localparam ol8 = 1'b0;
         localparam ol9 = 1'b1;
         localparam ol10 = 1'b1;
         localparam ol11 = 1'b1;
         localparam ol12 = 1'b0;
         localparam ol13 = 1'b1;
         localparam ol14 = 1'b0;
         localparam ol15 = 1'b0;
         localparam ol16 = 38'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol17 = 1'b1;
         localparam ol18 = 1'b1;
         begin
            or56 = arg_0;
            or3 = arg_1;
            or1 = arg_2;
            or0 = or1[72:72];
            or2 = or3[37:37];
            or4 = or3[36:36];
            or5 = ~or4;
            or6 = ~or0;
            or7 = or5 & or6;
            or8 = or2 & or7;
            or9 = or1[73:73];
            or10 = ol0;
            or10[73:73] = or9;
            or11 = or1[73:73];
            or12 = or3[37:37];
            or13 = ~or12;
            or14 = or3[36:36];
            or15 = ~or14;
            or16 = or15 & or0;
            or17 = or13 | or16;
            or18 = or10;
            or18[73:73] = ol1;
            or19 = or8 ? ol2 : ol3;
            or20 = or8 ? or18 : or10;
            or21 = or17 ? ol3 : or19;
            or22 = or17 ? or10 : or20;
            or23 = or17 ? ol4 : ol5;
            or24 = or3[37:37];
            or25 = or10;
            or25[73:73] = ol6;
            or26 = or24 ? or10 : or25;
            or27 = or24 ? ol5 : ol7;
            or28 = or24 ? ol8 : ol9;
            or29 = or24 ? ol10 : ol11;
            case (or11)
               1'b0 : or30 = or21;
               1'b1 : or30 = ol3;
            endcase
            case (or11)
               1'b0 : or31 = or22;
               1'b1 : or31 = or26;
            endcase
            case (or11)
               1'b0 : or32 = or23;
               1'b1 : or32 = or27;
            endcase
            case (or11)
               1'b0 : or33 = ol8;
               1'b1 : or33 = or28;
            endcase
            case (or11)
               1'b0 : or34 = ol14;
               1'b1 : or34 = or29;
            endcase
            or35 = or3[35:0];
            or36 = or1[71:36];
            or37 = or30 ? or35 : or36;
            or38 = or31;
            or38[71:36] = or37;
            or39 = or1[71:36];
            or40 = or3[35:0];
            or41 = or33 ? or39 : or40;
            or42 = or1[35:0];
            or43 = or32 ? or41 : or42;
            or44 = or38;
            or44[35:0] = or43;
            or45 = or3[36:36];
            or46 = or33 ? ol15 : or45;
            or47 = or1[72:72];
            or48 = or32 ? or46 : or47;
            or49 = or44;
            or49[72:72] = or48;
            or50 = or1[35:0];
            or51 = ol16;
            or51[35:0] = or50;
            or52 = or1[72:72];
            or53 = or51;
            or53[36:36] = or52;
            or54 = or53;
            or54[37:37] = or34;
            or55 = or56[1:1];
            or57 = |or55;
            or58 = or54;
            or58[36:36] = ol17;
            or59 = or58;
            or59[37:37] = ol18;
            or60 = or57 ? or59 : or54;
            or61 = {or49, or60};
            kernel_carloni_kernel = or61;
         end
   endfunction
endmodule
module top_write_controller_data_buf_outbuf_aux_ff(input wire [1:0] clock_reset, input wire [35:0] i, output reg [35:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 36'b000000000000000000000000000000000000;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 36'b000000000000000000000000000000000000;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_data_buf_outbuf_main_ff(input wire [1:0] clock_reset, input wire [35:0] i, output reg [35:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 36'b000000000000000000000000000000000000;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 36'b000000000000000000000000000000000000;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_data_buf_outbuf_state_ff(input wire [1:0] clock_reset, input wire [0:0] i, output reg [0:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 1'b0;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 1'b0;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_data_buf_outbuf_void_ff(input wire [1:0] clock_reset, input wire [0:0] i, output reg [0:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 1'b1;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 1'b1;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_map(input wire [1:0] clock_reset, input wire [3:0] i, output wire [3:0] o);
   wire [9:0] od;
   wire [5:0] d;
   wire [5:0] q;
   assign o = od[3:0];
   top_write_controller_map_func c0(.clock_reset(clock_reset), .i(d[5:4]), .o(q[5:4]));
   top_write_controller_map_input_buffer c1(.clock_reset(clock_reset), .i(d[3:0]), .o(q[3:0]));
   assign d = od[9:4];
   assign od = kernel_kernel(clock_reset, i, q);
   function [9:0] kernel_kernel(input reg [1:0] arg_0, input reg [3:0] arg_1, input reg [5:0] arg_2);
         reg [2:0] or0;
         reg [3:0] or1;
         // d
         reg [5:0] or2;
         reg [0:0] or3;
         reg [0:0] or4;
         reg [0:0] or5;
         // d
         reg [5:0] or6;
         reg [3:0] or7;
         reg [5:0] or8;
         reg [2:0] or9;
         reg [0:0] or10;
         reg [1:0] or11;
         // d
         reg [5:0] or12;
         reg [1:0] or13;
         reg [2:0] or14;
         reg [1:0] or15;
         // d
         reg [5:0] or16;
         // d
         reg [5:0] or17;
         reg [2:0] or18;
         reg [3:0] or19;
         reg [0:0] or20;
         reg [3:0] or21;
         reg [3:0] or22;
         reg [9:0] or23;
         reg [1:0] or24;
         localparam ol0 = 6'bXXXXXX;
         localparam ol1 = 1'b0;
         localparam ol2 = 1'b1;
         localparam ol3 = 2'bXX;
         localparam ol4 = 1'b1;
         localparam ol5 = 3'b000;
         localparam ol6 = 4'b0000;
         begin
            or24 = arg_0;
            or1 = arg_1;
            or8 = arg_2;
            or0 = or1[2:0];
            or2 = ol0;
            or2[2:0] = or0;
            or3 = or1[3:3];
            or4 = ol1;
            or5 = or4;
            or5[0:0] = or3;
            or6 = or2;
            or6[3:3] = or5;
            or7 = or8[3:0];
            or9 = or7[2:0];
            or10 = or9[2:2];
            or11 = or9[1:0];
            or12 = or6;
            or12[5:4] = or11;
            or13 = or8[5:4];
            or15 = or13[1:0];
            or14 = {ol2, or15};
            or16 = or6;
            or16[5:4] = ol3;
            case (or10)
               1'b1 : or17 = or12;
               default : or17 = or16;
            endcase
            case (or10)
               1'b1 : or18 = or14;
               default : or18 = ol5;
            endcase
            or19 = or8[3:0];
            or20 = or19[3:3];
            or21 = ol6;
            or21[2:0] = or18;
            or22 = or21;
            or22[3:3] = or20;
            or23 = {or17, or22};
            kernel_kernel = or23;
         end
   endfunction
endmodule
module top_write_controller_map_func(input wire [1:0] clock_reset, input wire [1:0] i, output wire [1:0] o);
   assign o = kernel_map_result(clock_reset, i);
   function [1:0] kernel_map_result(input reg [1:0] arg_0, input reg [1:0] arg_1);
         reg [1:0] or0;
         reg [1:0] or1;
         reg [1:0] or2;
         localparam ol0 = 2'b00;
         localparam ol1 = 2'b10;
         localparam ol2 = 2'b01;
         localparam ol3 = 2'b10;
         localparam ol4 = 2'b10;
         localparam ol5 = 2'b00;
         localparam ol6 = 2'b01;
         begin
            or2 = arg_0;
            or1 = arg_1;
            case (or1)
               2'b00 : or0 = ol1;
               2'b01 : or0 = ol3;
               2'b10 : or0 = ol5;
               default : or0 = ol6;
            endcase
            kernel_map_result = or0;
         end
   endfunction
endmodule
module top_write_controller_map_input_buffer(input wire [1:0] clock_reset, input wire [3:0] i, output wire [3:0] o);
   wire [7:0] od;
   wire [3:0] d;
   wire [3:0] q;
   assign o = od[3:0];
   top_write_controller_map_input_buffer_inner c0(.clock_reset(clock_reset), .i(d[3:0]), .o(q[3:0]));
   assign d = od[7:4];
   assign od = kernel_option_carloni_kernel(clock_reset, i, q);
   function [7:0] kernel_option_carloni_kernel(input reg [1:0] arg_0, input reg [3:0] arg_1, input reg [3:0] arg_2);
         reg [2:0] or0;
         reg [3:0] or1;
         reg [0:0] or2;
         reg [1:0] or3;
         reg [2:0] or4;
         reg [2:0] or5;
         reg [0:0] or6;
         reg [1:0] or7;
         // d
         reg [3:0] or8;
         reg [0:0] or9;
         // d
         reg [3:0] or10;
         reg [0:0] or11;
         reg [0:0] or12;
         // d
         reg [3:0] or13;
         reg [3:0] or14;
         reg [0:0] or15;
         reg [0:0] or16;
         reg [0:0] or17;
         reg [0:0] or18;
         // o
         reg [3:0] or19;
         reg [0:0] or20;
         reg [0:0] or21;
         reg [1:0] or22;
         reg [2:0] or23;
         reg [1:0] or24;
         reg [2:0] or25;
         // o
         reg [3:0] or26;
         reg [7:0] or27;
         reg [1:0] or28;
         localparam ol0 = 1'b1;
         localparam ol1 = 1'b1;
         localparam ol2 = 1'b0;
         localparam ol3 = 3'bXX0;
         localparam ol4 = 4'bXXXX;
         localparam ol5 = 1'b0;
         localparam ol6 = 4'bXXXX;
         localparam ol7 = 1'b1;
         localparam ol8 = 3'b000;
         begin
            or28 = arg_0;
            or1 = arg_1;
            or14 = arg_2;
            or0 = or1[2:0];
            or2 = or0[2:2];
            or3 = or0[1:0];
            or4 = {or3, ol0};
            case (or2)
               1'b1 : or5 = or4;
               1'b0 : or5 = ol3;
            endcase
            or6 = or5[0:0];
            or7 = or5[2:1];
            or8 = ol4;
            or8[1:0] = or7;
            or9 = ~or6;
            or10 = or8;
            or10[2:2] = or9;
            or11 = or1[3:3];
            or12 = ~or11;
            or13 = or10;
            or13[3:3] = or12;
            or15 = or14[3:3];
            or16 = ~or15;
            or17 = ol5;
            or18 = or17;
            or18[0:0] = or16;
            or19 = ol6;
            or19[3:3] = or18;
            or20 = or14[2:2];
            or21 = ~or20;
            or22 = or14[1:0];
            or24 = or22[1:0];
            or23 = {ol7, or24};
            or25 = or21 ? or23 : ol8;
            or26 = or19;
            or26[2:0] = or25;
            or27 = {or13, or26};
            kernel_option_carloni_kernel = or27;
         end
   endfunction
endmodule
module top_write_controller_map_input_buffer_inner(input wire [1:0] clock_reset, input wire [3:0] i, output wire [3:0] o);
   wire [9:0] od;
   wire [5:0] d;
   wire [5:0] q;
   assign o = od[3:0];
   top_write_controller_map_input_buffer_inner_aux_ff c0(.clock_reset(clock_reset), .i(d[3:2]), .o(q[3:2]));
   top_write_controller_map_input_buffer_inner_main_ff c1(.clock_reset(clock_reset), .i(d[1:0]), .o(q[1:0]));
   top_write_controller_map_input_buffer_inner_state_ff c2(.clock_reset(clock_reset), .i(d[5:5]), .o(q[5:5]));
   top_write_controller_map_input_buffer_inner_void_ff c3(.clock_reset(clock_reset), .i(d[4:4]), .o(q[4:4]));
   assign d = od[9:4];
   assign od = kernel_carloni_kernel(clock_reset, i, q);
   function [9:0] kernel_carloni_kernel(input reg [1:0] arg_0, input reg [3:0] arg_1, input reg [5:0] arg_2);
         reg [0:0] or0;
         reg [5:0] or1;
         reg [0:0] or2;
         reg [3:0] or3;
         reg [0:0] or4;
         reg [0:0] or5;
         reg [0:0] or6;
         reg [0:0] or7;
         reg [0:0] or8;
         reg [0:0] or9;
         // d
         reg [5:0] or10;
         reg [0:0] or11;
         reg [0:0] or12;
         reg [0:0] or13;
         reg [0:0] or14;
         reg [0:0] or15;
         reg [0:0] or16;
         reg [0:0] or17;
         // d
         reg [5:0] or18;
         // aux_en
         reg [0:0] or19;
         // d
         reg [5:0] or20;
         // aux_en
         reg [0:0] or21;
         // d
         reg [5:0] or22;
         // main_en
         reg [0:0] or23;
         reg [0:0] or24;
         // d
         reg [5:0] or25;
         // d
         reg [5:0] or26;
         // main_en
         reg [0:0] or27;
         // sel
         reg [0:0] or28;
         // stop_out
         reg [0:0] or29;
         // aux_en
         reg [0:0] or30;
         // d
         reg [5:0] or31;
         // main_en
         reg [0:0] or32;
         // sel
         reg [0:0] or33;
         // stop_out
         reg [0:0] or34;
         reg [1:0] or35;
         reg [1:0] or36;
         reg [1:0] or37;
         // d
         reg [5:0] or38;
         reg [1:0] or39;
         reg [1:0] or40;
         reg [1:0] or41;
         reg [1:0] or42;
         reg [1:0] or43;
         // d
         reg [5:0] or44;
         reg [0:0] or45;
         reg [0:0] or46;
         reg [0:0] or47;
         reg [0:0] or48;
         // d
         reg [5:0] or49;
         reg [1:0] or50;
         // o
         reg [3:0] or51;
         reg [0:0] or52;
         // o
         reg [3:0] or53;
         // o
         reg [3:0] or54;
         reg [0:0] or55;
         reg [1:0] or56;
         reg [0:0] or57;
         // o
         reg [3:0] or58;
         // o
         reg [3:0] or59;
         // o
         reg [3:0] or60;
         reg [9:0] or61;
         localparam ol0 = 6'bXXXXXX;
         localparam ol1 = 1'b1;
         localparam ol2 = 1'b1;
         localparam ol3 = 1'b0;
         localparam ol4 = 1'b1;
         localparam ol5 = 1'b0;
         localparam ol6 = 1'b0;
         localparam ol7 = 1'b1;
         localparam ol8 = 1'b0;
         localparam ol9 = 1'b1;
         localparam ol10 = 1'b1;
         localparam ol11 = 1'b1;
         localparam ol12 = 1'b0;
         localparam ol13 = 1'b1;
         localparam ol14 = 1'b0;
         localparam ol15 = 1'b0;
         localparam ol16 = 4'bXXXX;
         localparam ol17 = 1'b1;
         localparam ol18 = 1'b1;
         begin
            or56 = arg_0;
            or3 = arg_1;
            or1 = arg_2;
            or0 = or1[4:4];
            or2 = or3[3:3];
            or4 = or3[2:2];
            or5 = ~or4;
            or6 = ~or0;
            or7 = or5 & or6;
            or8 = or2 & or7;
            or9 = or1[5:5];
            or10 = ol0;
            or10[5:5] = or9;
            or11 = or1[5:5];
            or12 = or3[3:3];
            or13 = ~or12;
            or14 = or3[2:2];
            or15 = ~or14;
            or16 = or15 & or0;
            or17 = or13 | or16;
            or18 = or10;
            or18[5:5] = ol1;
            or19 = or8 ? ol2 : ol3;
            or20 = or8 ? or18 : or10;
            or21 = or17 ? ol3 : or19;
            or22 = or17 ? or10 : or20;
            or23 = or17 ? ol4 : ol5;
            or24 = or3[3:3];
            or25 = or10;
            or25[5:5] = ol6;
            or26 = or24 ? or10 : or25;
            or27 = or24 ? ol5 : ol7;
            or28 = or24 ? ol8 : ol9;
            or29 = or24 ? ol10 : ol11;
            case (or11)
               1'b0 : or30 = or21;
               1'b1 : or30 = ol3;
            endcase
            case (or11)
               1'b0 : or31 = or22;
               1'b1 : or31 = or26;
            endcase
            case (or11)
               1'b0 : or32 = or23;
               1'b1 : or32 = or27;
            endcase
            case (or11)
               1'b0 : or33 = ol8;
               1'b1 : or33 = or28;
            endcase
            case (or11)
               1'b0 : or34 = ol14;
               1'b1 : or34 = or29;
            endcase
            or35 = or3[1:0];
            or36 = or1[3:2];
            or37 = or30 ? or35 : or36;
            or38 = or31;
            or38[3:2] = or37;
            or39 = or1[3:2];
            or40 = or3[1:0];
            or41 = or33 ? or39 : or40;
            or42 = or1[1:0];
            or43 = or32 ? or41 : or42;
            or44 = or38;
            or44[1:0] = or43;
            or45 = or3[2:2];
            or46 = or33 ? ol15 : or45;
            or47 = or1[4:4];
            or48 = or32 ? or46 : or47;
            or49 = or44;
            or49[4:4] = or48;
            or50 = or1[1:0];
            or51 = ol16;
            or51[1:0] = or50;
            or52 = or1[4:4];
            or53 = or51;
            or53[2:2] = or52;
            or54 = or53;
            or54[3:3] = or34;
            or55 = or56[1:1];
            or57 = |or55;
            or58 = or54;
            or58[2:2] = ol17;
            or59 = or58;
            or59[3:3] = ol18;
            or60 = or57 ? or59 : or54;
            or61 = {or49, or60};
            kernel_carloni_kernel = or61;
         end
   endfunction
endmodule
module top_write_controller_map_input_buffer_inner_aux_ff(input wire [1:0] clock_reset, input wire [1:0] i, output reg [1:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 2'b00;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 2'b00;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_map_input_buffer_inner_main_ff(input wire [1:0] clock_reset, input wire [1:0] i, output reg [1:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 2'b00;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 2'b00;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_map_input_buffer_inner_state_ff(input wire [1:0] clock_reset, input wire [0:0] i, output reg [0:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 1'b0;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 1'b0;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_map_input_buffer_inner_void_ff(input wire [1:0] clock_reset, input wire [0:0] i, output reg [0:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 1'b1;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 1'b1;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_outbuf(input wire [1:0] clock_reset, input wire [3:0] i, output wire [3:0] o);
   wire [7:0] od;
   wire [3:0] d;
   wire [3:0] q;
   assign o = od[3:0];
   top_write_controller_outbuf_inbuf c0(.clock_reset(clock_reset), .i(d[3:0]), .o(q[3:0]));
   assign d = od[7:4];
   assign od = kernel_kernel(clock_reset, i, q);
   function [7:0] kernel_kernel(input reg [1:0] arg_0, input reg [3:0] arg_1, input reg [3:0] arg_2);
         reg [1:0] or0;
         reg [3:0] or1;
         // d
         reg [3:0] or2;
         reg [0:0] or3;
         reg [0:0] or4;
         // d
         reg [3:0] or5;
         reg [0:0] or6;
         reg [0:0] or7;
         // d
         reg [3:0] or8;
         reg [3:0] or9;
         reg [0:0] or10;
         reg [0:0] or11;
         reg [1:0] or12;
         reg [2:0] or13;
         reg [1:0] or14;
         reg [2:0] or15;
         reg [0:0] or16;
         reg [0:0] or17;
         // o
         reg [3:0] or18;
         // o
         reg [3:0] or19;
         reg [7:0] or20;
         reg [1:0] or21;
         localparam ol0 = 4'bXXXX;
         localparam ol1 = 1'b1;
         localparam ol2 = 3'b000;
         localparam ol3 = 4'bXXXX;
         begin
            or21 = arg_0;
            or1 = arg_1;
            or9 = arg_2;
            or0 = or1[1:0];
            or2 = ol0;
            or2[1:0] = or0;
            or3 = or1[2:2];
            or4 = ~or3;
            or5 = or2;
            or5[2:2] = or4;
            or6 = or1[3:3];
            or7 = ~or6;
            or8 = or5;
            or8[3:3] = or7;
            or10 = or9[2:2];
            or11 = ~or10;
            or12 = or9[1:0];
            or14 = or12[1:0];
            or13 = {ol1, or14};
            or15 = or11 ? or13 : ol2;
            or16 = or9[3:3];
            or17 = ~or16;
            or18 = ol3;
            or18[3:3] = or17;
            or19 = or18;
            or19[2:0] = or15;
            or20 = {or8, or19};
            kernel_kernel = or20;
         end
   endfunction
endmodule
module top_write_controller_outbuf_inbuf(input wire [1:0] clock_reset, input wire [3:0] i, output wire [3:0] o);
   wire [9:0] od;
   wire [5:0] d;
   wire [5:0] q;
   assign o = od[3:0];
   top_write_controller_outbuf_inbuf_aux_ff c0(.clock_reset(clock_reset), .i(d[3:2]), .o(q[3:2]));
   top_write_controller_outbuf_inbuf_main_ff c1(.clock_reset(clock_reset), .i(d[1:0]), .o(q[1:0]));
   top_write_controller_outbuf_inbuf_state_ff c2(.clock_reset(clock_reset), .i(d[5:5]), .o(q[5:5]));
   top_write_controller_outbuf_inbuf_void_ff c3(.clock_reset(clock_reset), .i(d[4:4]), .o(q[4:4]));
   assign d = od[9:4];
   assign od = kernel_carloni_kernel(clock_reset, i, q);
   function [9:0] kernel_carloni_kernel(input reg [1:0] arg_0, input reg [3:0] arg_1, input reg [5:0] arg_2);
         reg [0:0] or0;
         reg [5:0] or1;
         reg [0:0] or2;
         reg [3:0] or3;
         reg [0:0] or4;
         reg [0:0] or5;
         reg [0:0] or6;
         reg [0:0] or7;
         reg [0:0] or8;
         reg [0:0] or9;
         // d
         reg [5:0] or10;
         reg [0:0] or11;
         reg [0:0] or12;
         reg [0:0] or13;
         reg [0:0] or14;
         reg [0:0] or15;
         reg [0:0] or16;
         reg [0:0] or17;
         // d
         reg [5:0] or18;
         // aux_en
         reg [0:0] or19;
         // d
         reg [5:0] or20;
         // aux_en
         reg [0:0] or21;
         // d
         reg [5:0] or22;
         // main_en
         reg [0:0] or23;
         reg [0:0] or24;
         // d
         reg [5:0] or25;
         // d
         reg [5:0] or26;
         // main_en
         reg [0:0] or27;
         // sel
         reg [0:0] or28;
         // stop_out
         reg [0:0] or29;
         // aux_en
         reg [0:0] or30;
         // d
         reg [5:0] or31;
         // main_en
         reg [0:0] or32;
         // sel
         reg [0:0] or33;
         // stop_out
         reg [0:0] or34;
         reg [1:0] or35;
         reg [1:0] or36;
         reg [1:0] or37;
         // d
         reg [5:0] or38;
         reg [1:0] or39;
         reg [1:0] or40;
         reg [1:0] or41;
         reg [1:0] or42;
         reg [1:0] or43;
         // d
         reg [5:0] or44;
         reg [0:0] or45;
         reg [0:0] or46;
         reg [0:0] or47;
         reg [0:0] or48;
         // d
         reg [5:0] or49;
         reg [1:0] or50;
         // o
         reg [3:0] or51;
         reg [0:0] or52;
         // o
         reg [3:0] or53;
         // o
         reg [3:0] or54;
         reg [0:0] or55;
         reg [1:0] or56;
         reg [0:0] or57;
         // o
         reg [3:0] or58;
         // o
         reg [3:0] or59;
         // o
         reg [3:0] or60;
         reg [9:0] or61;
         localparam ol0 = 6'bXXXXXX;
         localparam ol1 = 1'b1;
         localparam ol2 = 1'b1;
         localparam ol3 = 1'b0;
         localparam ol4 = 1'b1;
         localparam ol5 = 1'b0;
         localparam ol6 = 1'b0;
         localparam ol7 = 1'b1;
         localparam ol8 = 1'b0;
         localparam ol9 = 1'b1;
         localparam ol10 = 1'b1;
         localparam ol11 = 1'b1;
         localparam ol12 = 1'b0;
         localparam ol13 = 1'b1;
         localparam ol14 = 1'b0;
         localparam ol15 = 1'b0;
         localparam ol16 = 4'bXXXX;
         localparam ol17 = 1'b1;
         localparam ol18 = 1'b1;
         begin
            or56 = arg_0;
            or3 = arg_1;
            or1 = arg_2;
            or0 = or1[4:4];
            or2 = or3[3:3];
            or4 = or3[2:2];
            or5 = ~or4;
            or6 = ~or0;
            or7 = or5 & or6;
            or8 = or2 & or7;
            or9 = or1[5:5];
            or10 = ol0;
            or10[5:5] = or9;
            or11 = or1[5:5];
            or12 = or3[3:3];
            or13 = ~or12;
            or14 = or3[2:2];
            or15 = ~or14;
            or16 = or15 & or0;
            or17 = or13 | or16;
            or18 = or10;
            or18[5:5] = ol1;
            or19 = or8 ? ol2 : ol3;
            or20 = or8 ? or18 : or10;
            or21 = or17 ? ol3 : or19;
            or22 = or17 ? or10 : or20;
            or23 = or17 ? ol4 : ol5;
            or24 = or3[3:3];
            or25 = or10;
            or25[5:5] = ol6;
            or26 = or24 ? or10 : or25;
            or27 = or24 ? ol5 : ol7;
            or28 = or24 ? ol8 : ol9;
            or29 = or24 ? ol10 : ol11;
            case (or11)
               1'b0 : or30 = or21;
               1'b1 : or30 = ol3;
            endcase
            case (or11)
               1'b0 : or31 = or22;
               1'b1 : or31 = or26;
            endcase
            case (or11)
               1'b0 : or32 = or23;
               1'b1 : or32 = or27;
            endcase
            case (or11)
               1'b0 : or33 = ol8;
               1'b1 : or33 = or28;
            endcase
            case (or11)
               1'b0 : or34 = ol14;
               1'b1 : or34 = or29;
            endcase
            or35 = or3[1:0];
            or36 = or1[3:2];
            or37 = or30 ? or35 : or36;
            or38 = or31;
            or38[3:2] = or37;
            or39 = or1[3:2];
            or40 = or3[1:0];
            or41 = or33 ? or39 : or40;
            or42 = or1[1:0];
            or43 = or32 ? or41 : or42;
            or44 = or38;
            or44[1:0] = or43;
            or45 = or3[2:2];
            or46 = or33 ? ol15 : or45;
            or47 = or1[4:4];
            or48 = or32 ? or46 : or47;
            or49 = or44;
            or49[4:4] = or48;
            or50 = or1[1:0];
            or51 = ol16;
            or51[1:0] = or50;
            or52 = or1[4:4];
            or53 = or51;
            or53[2:2] = or52;
            or54 = or53;
            or54[3:3] = or34;
            or55 = or56[1:1];
            or57 = |or55;
            or58 = or54;
            or58[2:2] = ol17;
            or59 = or58;
            or59[3:3] = ol18;
            or60 = or57 ? or59 : or54;
            or61 = {or49, or60};
            kernel_carloni_kernel = or61;
         end
   endfunction
endmodule
module top_write_controller_outbuf_inbuf_aux_ff(input wire [1:0] clock_reset, input wire [1:0] i, output reg [1:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 2'b00;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 2'b00;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_outbuf_inbuf_main_ff(input wire [1:0] clock_reset, input wire [1:0] i, output reg [1:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 2'b00;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 2'b00;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_outbuf_inbuf_state_ff(input wire [1:0] clock_reset, input wire [0:0] i, output reg [0:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 1'b0;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 1'b0;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_outbuf_inbuf_void_ff(input wire [1:0] clock_reset, input wire [0:0] i, output reg [0:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 1'b1;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 1'b1;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_tee(input wire [1:0] clock_reset, input wire [70:0] i, output wire [70:0] o);
   wire [212:0] od;
   wire [141:0] d;
   wire [144:0] q;
   assign o = od[70:0];
   top_write_controller_tee_in_buffer c0(.clock_reset(clock_reset), .i(d[69:0]), .o(q[70:0]));
   top_write_controller_tee_s_buffer c1(.clock_reset(clock_reset), .i(d[103:70]), .o(q[105:71]));
   top_write_controller_tee_t_buffer c2(.clock_reset(clock_reset), .i(d[141:104]), .o(q[144:106]));
   assign d = od[212:71];
   assign od = kernel_kernel(clock_reset, i, q);
   function [212:0] kernel_kernel(input reg [1:0] arg_0, input reg [70:0] arg_1, input reg [144:0] arg_2);
         reg [34:0] or0;
         reg [144:0] or1;
         reg [0:0] or2;
         reg [38:0] or3;
         reg [0:0] or4;
         reg [0:0] or5;
         reg [0:0] or6;
         reg [70:0] or7;
         reg [68:0] or8;
         reg [0:0] or9;
         reg [67:0] or10;
         reg [31:0] or11;
         reg [32:0] or12;
         reg [31:0] or13;
         reg [35:0] or14;
         reg [36:0] or15;
         reg [35:0] or16;
         // next
         reg [0:0] or17;
         // s_val
         reg [32:0] or18;
         // t_val
         reg [36:0] or19;
         // next
         reg [0:0] or20;
         // s_val
         reg [32:0] or21;
         // t_val
         reg [36:0] or22;
         // d
         reg [141:0] or23;
         // d
         reg [141:0] or24;
         // d
         reg [141:0] or25;
         reg [68:0] or26;
         reg [70:0] or27;
         // d
         reg [141:0] or28;
         reg [0:0] or29;
         // d
         reg [141:0] or30;
         reg [0:0] or31;
         // d
         reg [141:0] or32;
         reg [34:0] or33;
         reg [32:0] or34;
         reg [38:0] or35;
         reg [36:0] or36;
         reg [70:0] or37;
         reg [0:0] or38;
         reg [70:0] or39;
         reg [70:0] or40;
         reg [70:0] or41;
         reg [212:0] or42;
         reg [1:0] or43;
         localparam ol0 = 1'b1;
         localparam ol1 = 1'b1;
         localparam ol2 = 1'b1;
         localparam ol3 = 1'b1;
         localparam ol4 = 1'b0;
         localparam ol5 = 33'b000000000000000000000000000000000;
         localparam ol6 = 37'b0000000000000000000000000000000000000;
         localparam ol7 = 142'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol8 = 71'b00000000000000000000000000000000000000000000000000000000000000000000000;
         begin
            or43 = arg_0;
            or27 = arg_1;
            or1 = arg_2;
            or0 = or1[105:71];
            or2 = or0[33:33];
            or3 = or1[144:106];
            or4 = or3[37:37];
            or5 = or2 | or4;
            or6 = ~or5;
            or7 = or1[70:0];
            or8 = or7[68:0];
            or9 = or8[68:68];
            or10 = or8[67:0];
            or11 = or10[31:0];
            or13 = or11[31:0];
            or12 = {ol0, or13};
            or14 = or10[67:32];
            or16 = or14[35:0];
            or15 = {ol1, or16};
            case (or9)
               1'b1 : or17 = ol3;
               default : or17 = ol4;
            endcase
            case (or9)
               1'b1 : or18 = or12;
               default : or18 = ol5;
            endcase
            case (or9)
               1'b1 : or19 = or15;
               default : or19 = ol6;
            endcase
            or20 = or6 ? or17 : ol4;
            or21 = or6 ? or18 : ol5;
            or22 = or6 ? or19 : ol6;
            or23 = ol7;
            or23[102:70] = or21;
            or24 = or23;
            or24[140:104] = or22;
            or25 = or24;
            or25[69:69] = or20;
            or26 = or27[68:0];
            or28 = or25;
            or28[68:0] = or26;
            or29 = or27[69:69];
            or30 = or28;
            or30[103:103] = or29;
            or31 = or27[70:70];
            or32 = or30;
            or32[141:141] = or31;
            or33 = or1[105:71];
            or34 = or33[32:0];
            or35 = or1[144:106];
            or36 = or35[36:0];
            or37 = or1[70:0];
            or38 = or37[69:69];
            or39 = ol8;
            or39[32:0] = or34;
            or40 = or39;
            or40[69:33] = or36;
            or41 = or40;
            or41[70:70] = or38;
            or42 = {or32, or41};
            kernel_kernel = or42;
         end
   endfunction
endmodule
module top_write_controller_tee_in_buffer(input wire [1:0] clock_reset, input wire [69:0] i, output wire [70:0] o);
   wire [210:0] od;
   wire [139:0] d;
   wire [139:0] q;
   assign o = od[70:0];
   top_write_controller_tee_in_buffer_one_slot c0(.clock_reset(clock_reset), .i(d[137:70]), .o(q[137:70]));
   top_write_controller_tee_in_buffer_read_slot c1(.clock_reset(clock_reset), .i(d[139:139]), .o(q[139:139]));
   top_write_controller_tee_in_buffer_state c2(.clock_reset(clock_reset), .i(d[1:0]), .o(q[1:0]));
   top_write_controller_tee_in_buffer_write_slot c3(.clock_reset(clock_reset), .i(d[138:138]), .o(q[138:138]));
   top_write_controller_tee_in_buffer_zero_slot c4(.clock_reset(clock_reset), .i(d[69:2]), .o(q[69:2]));
   assign d = od[210:71];
   assign od = kernel_kernel(clock_reset, i, q);
   function [210:0] kernel_kernel(input reg [1:0] arg_0, input reg [69:0] arg_1, input reg [139:0] arg_2);
         reg [0:0] or0;
         reg [69:0] or1;
         reg [68:0] or2;
         reg [0:0] or3;
         reg [0:0] or4;
         reg [1:0] or5;
         reg [139:0] or6;
         reg [1:0] or7;
         reg [1:0] or8;
         reg [1:0] or9;
         reg [1:0] or10;
         reg [1:0] or11;
         reg [1:0] or12;
         // d
         reg [139:0] or13;
         reg [1:0] or14;
         reg [0:0] or15;
         reg [1:0] or16;
         reg [0:0] or17;
         reg [0:0] or18;
         reg [0:0] or19;
         reg [67:0] or20;
         // d
         reg [139:0] or21;
         reg [67:0] or22;
         // d
         reg [139:0] or23;
         reg [68:0] or24;
         reg [0:0] or25;
         reg [67:0] or26;
         reg [0:0] or27;
         // d
         reg [139:0] or28;
         // d
         reg [139:0] or29;
         // d
         reg [139:0] or30;
         // d
         reg [139:0] or31;
         // d
         reg [139:0] or32;
         reg [0:0] or33;
         reg [0:0] or34;
         // d
         reg [139:0] or35;
         reg [0:0] or36;
         reg [0:0] or37;
         // d
         reg [139:0] or38;
         reg [1:0] or39;
         reg [0:0] or40;
         reg [0:0] or41;
         reg [0:0] or42;
         reg [67:0] or43;
         reg [68:0] or44;
         reg [67:0] or45;
         // o
         reg [70:0] or46;
         reg [67:0] or47;
         reg [68:0] or48;
         reg [67:0] or49;
         // o
         reg [70:0] or50;
         // o
         reg [70:0] or51;
         // o
         reg [70:0] or52;
         reg [0:0] or53;
         reg [0:0] or54;
         // o
         reg [70:0] or55;
         reg [1:0] or56;
         reg [0:0] or57;
         // o
         reg [70:0] or58;
         reg [210:0] or59;
         reg [1:0] or60;
         localparam ol0 = 1'b1;
         localparam ol1 = 1'b1;
         localparam ol2 = 1'b0;
         localparam ol3 = 1'b0;
         localparam ol4 = 2'b11;
         localparam ol5 = 2'b00;
         localparam ol6 = 2'b01;
         localparam ol7 = 2'b00;
         localparam ol8 = 2'b01;
         localparam ol9 = 2'b01;
         localparam ol10 = 2'b10;
         localparam ol11 = 2'b10;
         localparam ol12 = 2'b00;
         localparam ol13 = 2'b11;
         localparam ol14 = 2'b01;
         localparam ol15 = 2'b01;
         localparam ol16 = 2'b10;
         localparam ol17 = 2'b00;
         localparam ol18 = 2'b01;
         localparam ol19 = 2'b10;
         localparam ol20 = 2'b11;
         localparam ol21 = 2'b11;
         localparam ol22 = 140'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol23 = 2'b10;
         localparam ol24 = 2'b11;
         localparam ol25 = 1'b1;
         localparam ol26 = 2'b00;
         localparam ol27 = 1'b1;
         localparam ol28 = 71'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol29 = 1'b1;
         localparam ol30 = 71'bXX000000000000000000000000000000000000000000000000000000000000000000000;
         localparam ol31 = 1'b0;
         localparam ol32 = 2'b11;
         begin
            or60 = arg_0;
            or1 = arg_1;
            or6 = arg_2;
            or0 = or1[69:69];
            or2 = or1[68:0];
            or3 = or2[68:68];
            case (or3)
               1'b1 : or4 = ol1;
               1'b0 : or4 = ol3;
            endcase
            or5 = or6[1:0];
            or7 = or0 ? ol4 : ol5;
            or8 = or4 ? ol6 : or7;
            or9 = {or0, or4};
            case (or9)
               2'b00 : or10 = ol8;
               2'b01 : or10 = ol10;
               2'b10 : or10 = ol12;
               2'b11 : or10 = ol14;
            endcase
            or11 = or0 ? ol15 : ol16;
            case (or5)
               2'b00 : or12 = or8;
               2'b01 : or12 = or10;
               2'b10 : or12 = or11;
               2'b11 : or12 = ol21;
            endcase
            or13 = ol22;
            or13[1:0] = or12;
            or14 = or6[1:0];
            or15 = or14 != ol23;
            or16 = or6[1:0];
            or17 = or16 != ol24;
            or18 = or15 & or17;
            or19 = or4 & or18;
            or20 = or6[69:2];
            or21 = or13;
            or21[69:2] = or20;
            or22 = or6[137:70];
            or23 = or21;
            or23[137:70] = or22;
            or24 = or1[68:0];
            or25 = or24[68:68];
            or26 = or24[67:0];
            or27 = or6[138:138];
            or28 = or23;
            or28[137:70] = or26;
            or29 = or23;
            or29[69:2] = or26;
            or30 = or27 ? or28 : or29;
            or31 = or19 ? or30 : or23;
            case (or25)
               1'b1 : or32 = or31;
               default : or32 = or23;
            endcase
            or33 = or6[138:138];
            or34 = or19 ^ or33;
            or35 = or32;
            or35[138:138] = or34;
            or36 = or6[139:139];
            or37 = or0 ^ or36;
            or38 = or35;
            or38[139:139] = or37;
            or39 = or6[1:0];
            or40 = or39 == ol26;
            or41 = or6[139:139];
            or42 = ~or41;
            or43 = or6[69:2];
            or45 = or43[67:0];
            or44 = {ol27, or45};
            or46 = ol28;
            or46[68:0] = or44;
            or47 = or6[137:70];
            or49 = or47[67:0];
            or48 = {ol29, or49};
            or50 = ol28;
            or50[68:0] = or48;
            or51 = or42 ? or46 : or50;
            or52 = or40 ? ol30 : or51;
            or53 = ol31;
            or54 = or53;
            or54[0:0] = or18;
            or55 = or52;
            or55[69:69] = or54;
            or56 = or6[1:0];
            or57 = or56 == ol32;
            or58 = or55;
            or58[70:70] = or57;
            or59 = {or38, or58};
            kernel_kernel = or59;
         end
   endfunction
endmodule
module top_write_controller_tee_in_buffer_one_slot(input wire [1:0] clock_reset, input wire [67:0] i, output reg [67:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 68'b00000000000000000000000000000000000000000000000000000000000000000000;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 68'b00000000000000000000000000000000000000000000000000000000000000000000;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_tee_in_buffer_read_slot(input wire [1:0] clock_reset, input wire [0:0] i, output reg [0:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 1'b0;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 1'b0;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_tee_in_buffer_state(input wire [1:0] clock_reset, input wire [1:0] i, output reg [1:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 2'b00;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 2'b00;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_tee_in_buffer_write_slot(input wire [1:0] clock_reset, input wire [0:0] i, output reg [0:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 1'b0;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 1'b0;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_tee_in_buffer_zero_slot(input wire [1:0] clock_reset, input wire [67:0] i, output reg [67:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 68'b00000000000000000000000000000000000000000000000000000000000000000000;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 68'b00000000000000000000000000000000000000000000000000000000000000000000;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_tee_s_buffer(input wire [1:0] clock_reset, input wire [33:0] i, output wire [34:0] o);
   wire [102:0] od;
   wire [67:0] d;
   wire [67:0] q;
   assign o = od[34:0];
   top_write_controller_tee_s_buffer_one_slot c0(.clock_reset(clock_reset), .i(d[65:34]), .o(q[65:34]));
   top_write_controller_tee_s_buffer_read_slot c1(.clock_reset(clock_reset), .i(d[67:67]), .o(q[67:67]));
   top_write_controller_tee_s_buffer_state c2(.clock_reset(clock_reset), .i(d[1:0]), .o(q[1:0]));
   top_write_controller_tee_s_buffer_write_slot c3(.clock_reset(clock_reset), .i(d[66:66]), .o(q[66:66]));
   top_write_controller_tee_s_buffer_zero_slot c4(.clock_reset(clock_reset), .i(d[33:2]), .o(q[33:2]));
   assign d = od[102:35];
   assign od = kernel_kernel(clock_reset, i, q);
   function [102:0] kernel_kernel(input reg [1:0] arg_0, input reg [33:0] arg_1, input reg [67:0] arg_2);
         reg [32:0] or0;
         reg [33:0] or1;
         reg [0:0] or2;
         reg [0:0] or3;
         reg [0:0] or4;
         reg [1:0] or5;
         reg [67:0] or6;
         reg [1:0] or7;
         reg [1:0] or8;
         reg [1:0] or9;
         reg [1:0] or10;
         reg [1:0] or11;
         reg [1:0] or12;
         // d
         reg [67:0] or13;
         reg [31:0] or14;
         // d
         reg [67:0] or15;
         reg [31:0] or16;
         // d
         reg [67:0] or17;
         reg [32:0] or18;
         reg [0:0] or19;
         reg [31:0] or20;
         reg [0:0] or21;
         reg [0:0] or22;
         // d
         reg [67:0] or23;
         // d
         reg [67:0] or24;
         // d
         reg [67:0] or25;
         // d
         reg [67:0] or26;
         reg [1:0] or27;
         reg [0:0] or28;
         reg [0:0] or29;
         reg [1:0] or30;
         reg [0:0] or31;
         reg [0:0] or32;
         reg [0:0] or33;
         reg [0:0] or34;
         // d
         reg [67:0] or35;
         reg [0:0] or36;
         reg [0:0] or37;
         // d
         reg [67:0] or38;
         reg [1:0] or39;
         reg [0:0] or40;
         reg [0:0] or41;
         reg [0:0] or42;
         reg [31:0] or43;
         reg [32:0] or44;
         reg [31:0] or45;
         // o
         reg [34:0] or46;
         reg [31:0] or47;
         reg [32:0] or48;
         reg [31:0] or49;
         // o
         reg [34:0] or50;
         // o
         reg [34:0] or51;
         // o
         reg [34:0] or52;
         reg [1:0] or53;
         reg [0:0] or54;
         // o
         reg [34:0] or55;
         reg [1:0] or56;
         reg [0:0] or57;
         // o
         reg [34:0] or58;
         reg [102:0] or59;
         reg [1:0] or60;
         localparam ol0 = 1'b1;
         localparam ol1 = 1'b1;
         localparam ol2 = 1'b0;
         localparam ol3 = 1'b0;
         localparam ol4 = 2'b01;
         localparam ol5 = 2'b00;
         localparam ol6 = 2'b00;
         localparam ol7 = 2'b01;
         localparam ol8 = 2'b01;
         localparam ol9 = 2'b10;
         localparam ol10 = 2'b10;
         localparam ol11 = 2'b00;
         localparam ol12 = 2'b11;
         localparam ol13 = 2'b01;
         localparam ol14 = 2'b01;
         localparam ol15 = 2'b10;
         localparam ol16 = 2'b11;
         localparam ol17 = 2'b00;
         localparam ol18 = 2'b01;
         localparam ol19 = 2'b10;
         localparam ol20 = 2'b11;
         localparam ol21 = 2'b11;
         localparam ol22 = 68'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol23 = 1'b1;
         localparam ol24 = 2'b11;
         localparam ol25 = 2'b00;
         localparam ol26 = 1'b1;
         localparam ol27 = 35'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol28 = 1'b1;
         localparam ol29 = 35'bXX000000000000000000000000000000000;
         localparam ol30 = 2'b10;
         localparam ol31 = 2'b11;
         begin
            or60 = arg_0;
            or1 = arg_1;
            or6 = arg_2;
            or0 = or1[32:0];
            or2 = or0[32:32];
            case (or2)
               1'b1 : or3 = ol1;
               1'b0 : or3 = ol3;
            endcase
            or4 = or1[33:33];
            or5 = or6[1:0];
            or7 = or3 ? ol4 : ol5;
            or8 = {or4, or3};
            case (or8)
               2'b00 : or9 = ol7;
               2'b01 : or9 = ol9;
               2'b10 : or9 = ol11;
               2'b11 : or9 = ol13;
            endcase
            or10 = or4 ? ol14 : ol15;
            or11 = or3 ? ol16 : or10;
            case (or5)
               2'b00 : or12 = or7;
               2'b01 : or12 = or9;
               2'b10 : or12 = or11;
               2'b11 : or12 = ol21;
            endcase
            or13 = ol22;
            or13[1:0] = or12;
            or14 = or6[33:2];
            or15 = or13;
            or15[33:2] = or14;
            or16 = or6[65:34];
            or17 = or15;
            or17[65:34] = or16;
            or18 = or1[32:0];
            or19 = or18[32:32];
            or20 = or18[31:0];
            or21 = or6[66:66];
            or22 = ~or21;
            or23 = or17;
            or23[33:2] = or20;
            or24 = or17;
            or24[65:34] = or20;
            or25 = or22 ? or23 : or24;
            case (or19)
               1'b1 : or26 = or25;
               default : or26 = or17;
            endcase
            or27 = or6[1:0];
            or28 = |or27;
            or29 = or4 & or28;
            or30 = or6[1:0];
            or31 = or30 != ol24;
            or32 = or29 & or31;
            or33 = or6[66:66];
            or34 = or3 ^ or33;
            or35 = or26;
            or35[66:66] = or34;
            or36 = or6[67:67];
            or37 = or32 ^ or36;
            or38 = or35;
            or38[67:67] = or37;
            or39 = or6[1:0];
            or40 = or39 == ol25;
            or41 = or6[67:67];
            or42 = ~or41;
            or43 = or6[33:2];
            or45 = or43[31:0];
            or44 = {ol26, or45};
            or46 = ol27;
            or46[32:0] = or44;
            or47 = or6[65:34];
            or49 = or47[31:0];
            or48 = {ol28, or49};
            or50 = ol27;
            or50[32:0] = or48;
            or51 = or42 ? or46 : or50;
            or52 = or40 ? ol29 : or51;
            or53 = or6[1:0];
            or54 = or53 == ol30;
            or55 = or52;
            or55[33:33] = or54;
            or56 = or6[1:0];
            or57 = or56 == ol31;
            or58 = or55;
            or58[34:34] = or57;
            or59 = {or38, or58};
            kernel_kernel = or59;
         end
   endfunction
endmodule
module top_write_controller_tee_s_buffer_one_slot(input wire [1:0] clock_reset, input wire [31:0] i, output reg [31:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 32'b00000000000000000000000000000000;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 32'b00000000000000000000000000000000;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_tee_s_buffer_read_slot(input wire [1:0] clock_reset, input wire [0:0] i, output reg [0:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 1'b0;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 1'b0;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_tee_s_buffer_state(input wire [1:0] clock_reset, input wire [1:0] i, output reg [1:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 2'b00;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 2'b00;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_tee_s_buffer_write_slot(input wire [1:0] clock_reset, input wire [0:0] i, output reg [0:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 1'b0;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 1'b0;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_tee_s_buffer_zero_slot(input wire [1:0] clock_reset, input wire [31:0] i, output reg [31:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 32'b00000000000000000000000000000000;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 32'b00000000000000000000000000000000;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_tee_t_buffer(input wire [1:0] clock_reset, input wire [37:0] i, output wire [38:0] o);
   wire [114:0] od;
   wire [75:0] d;
   wire [75:0] q;
   assign o = od[38:0];
   top_write_controller_tee_t_buffer_one_slot c0(.clock_reset(clock_reset), .i(d[73:38]), .o(q[73:38]));
   top_write_controller_tee_t_buffer_read_slot c1(.clock_reset(clock_reset), .i(d[75:75]), .o(q[75:75]));
   top_write_controller_tee_t_buffer_state c2(.clock_reset(clock_reset), .i(d[1:0]), .o(q[1:0]));
   top_write_controller_tee_t_buffer_write_slot c3(.clock_reset(clock_reset), .i(d[74:74]), .o(q[74:74]));
   top_write_controller_tee_t_buffer_zero_slot c4(.clock_reset(clock_reset), .i(d[37:2]), .o(q[37:2]));
   assign d = od[114:39];
   assign od = kernel_kernel(clock_reset, i, q);
   function [114:0] kernel_kernel(input reg [1:0] arg_0, input reg [37:0] arg_1, input reg [75:0] arg_2);
         reg [36:0] or0;
         reg [37:0] or1;
         reg [0:0] or2;
         reg [0:0] or3;
         reg [0:0] or4;
         reg [1:0] or5;
         reg [75:0] or6;
         reg [1:0] or7;
         reg [1:0] or8;
         reg [1:0] or9;
         reg [1:0] or10;
         reg [1:0] or11;
         reg [1:0] or12;
         // d
         reg [75:0] or13;
         reg [35:0] or14;
         // d
         reg [75:0] or15;
         reg [35:0] or16;
         // d
         reg [75:0] or17;
         reg [36:0] or18;
         reg [0:0] or19;
         reg [35:0] or20;
         reg [0:0] or21;
         reg [0:0] or22;
         // d
         reg [75:0] or23;
         // d
         reg [75:0] or24;
         // d
         reg [75:0] or25;
         // d
         reg [75:0] or26;
         reg [1:0] or27;
         reg [0:0] or28;
         reg [0:0] or29;
         reg [1:0] or30;
         reg [0:0] or31;
         reg [0:0] or32;
         reg [0:0] or33;
         reg [0:0] or34;
         // d
         reg [75:0] or35;
         reg [0:0] or36;
         reg [0:0] or37;
         // d
         reg [75:0] or38;
         reg [1:0] or39;
         reg [0:0] or40;
         reg [0:0] or41;
         reg [0:0] or42;
         reg [35:0] or43;
         reg [36:0] or44;
         reg [35:0] or45;
         // o
         reg [38:0] or46;
         reg [35:0] or47;
         reg [36:0] or48;
         reg [35:0] or49;
         // o
         reg [38:0] or50;
         // o
         reg [38:0] or51;
         // o
         reg [38:0] or52;
         reg [1:0] or53;
         reg [0:0] or54;
         // o
         reg [38:0] or55;
         reg [1:0] or56;
         reg [0:0] or57;
         // o
         reg [38:0] or58;
         reg [114:0] or59;
         reg [1:0] or60;
         localparam ol0 = 1'b1;
         localparam ol1 = 1'b1;
         localparam ol2 = 1'b0;
         localparam ol3 = 1'b0;
         localparam ol4 = 2'b01;
         localparam ol5 = 2'b00;
         localparam ol6 = 2'b00;
         localparam ol7 = 2'b01;
         localparam ol8 = 2'b01;
         localparam ol9 = 2'b10;
         localparam ol10 = 2'b10;
         localparam ol11 = 2'b00;
         localparam ol12 = 2'b11;
         localparam ol13 = 2'b01;
         localparam ol14 = 2'b01;
         localparam ol15 = 2'b10;
         localparam ol16 = 2'b11;
         localparam ol17 = 2'b00;
         localparam ol18 = 2'b01;
         localparam ol19 = 2'b10;
         localparam ol20 = 2'b11;
         localparam ol21 = 2'b11;
         localparam ol22 = 76'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol23 = 1'b1;
         localparam ol24 = 2'b11;
         localparam ol25 = 2'b00;
         localparam ol26 = 1'b1;
         localparam ol27 = 39'bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
         localparam ol28 = 1'b1;
         localparam ol29 = 39'bXX0000000000000000000000000000000000000;
         localparam ol30 = 2'b10;
         localparam ol31 = 2'b11;
         begin
            or60 = arg_0;
            or1 = arg_1;
            or6 = arg_2;
            or0 = or1[36:0];
            or2 = or0[36:36];
            case (or2)
               1'b1 : or3 = ol1;
               1'b0 : or3 = ol3;
            endcase
            or4 = or1[37:37];
            or5 = or6[1:0];
            or7 = or3 ? ol4 : ol5;
            or8 = {or4, or3};
            case (or8)
               2'b00 : or9 = ol7;
               2'b01 : or9 = ol9;
               2'b10 : or9 = ol11;
               2'b11 : or9 = ol13;
            endcase
            or10 = or4 ? ol14 : ol15;
            or11 = or3 ? ol16 : or10;
            case (or5)
               2'b00 : or12 = or7;
               2'b01 : or12 = or9;
               2'b10 : or12 = or11;
               2'b11 : or12 = ol21;
            endcase
            or13 = ol22;
            or13[1:0] = or12;
            or14 = or6[37:2];
            or15 = or13;
            or15[37:2] = or14;
            or16 = or6[73:38];
            or17 = or15;
            or17[73:38] = or16;
            or18 = or1[36:0];
            or19 = or18[36:36];
            or20 = or18[35:0];
            or21 = or6[74:74];
            or22 = ~or21;
            or23 = or17;
            or23[37:2] = or20;
            or24 = or17;
            or24[73:38] = or20;
            or25 = or22 ? or23 : or24;
            case (or19)
               1'b1 : or26 = or25;
               default : or26 = or17;
            endcase
            or27 = or6[1:0];
            or28 = |or27;
            or29 = or4 & or28;
            or30 = or6[1:0];
            or31 = or30 != ol24;
            or32 = or29 & or31;
            or33 = or6[74:74];
            or34 = or3 ^ or33;
            or35 = or26;
            or35[74:74] = or34;
            or36 = or6[75:75];
            or37 = or32 ^ or36;
            or38 = or35;
            or38[75:75] = or37;
            or39 = or6[1:0];
            or40 = or39 == ol25;
            or41 = or6[75:75];
            or42 = ~or41;
            or43 = or6[37:2];
            or45 = or43[35:0];
            or44 = {ol26, or45};
            or46 = ol27;
            or46[36:0] = or44;
            or47 = or6[73:38];
            or49 = or47[35:0];
            or48 = {ol28, or49};
            or50 = ol27;
            or50[36:0] = or48;
            or51 = or42 ? or46 : or50;
            or52 = or40 ? ol29 : or51;
            or53 = or6[1:0];
            or54 = or53 == ol30;
            or55 = or52;
            or55[37:37] = or54;
            or56 = or6[1:0];
            or57 = or56 == ol31;
            or58 = or55;
            or58[38:38] = or57;
            or59 = {or38, or58};
            kernel_kernel = or59;
         end
   endfunction
endmodule
module top_write_controller_tee_t_buffer_one_slot(input wire [1:0] clock_reset, input wire [35:0] i, output reg [35:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 36'b000000000000000000000000000000000000;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 36'b000000000000000000000000000000000000;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_tee_t_buffer_read_slot(input wire [1:0] clock_reset, input wire [0:0] i, output reg [0:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 1'b0;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 1'b0;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_tee_t_buffer_state(input wire [1:0] clock_reset, input wire [1:0] i, output reg [1:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 2'b00;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 2'b00;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_tee_t_buffer_write_slot(input wire [1:0] clock_reset, input wire [0:0] i, output reg [0:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 1'b0;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 1'b0;
      end else begin
         o <= i;
      end
   end
endmodule
module top_write_controller_tee_t_buffer_zero_slot(input wire [1:0] clock_reset, input wire [35:0] i, output reg [35:0] o);
   wire  clock;
   wire  reset;
   assign clock = clock_reset[0];
   assign reset = clock_reset[1];
   initial begin
      o = 36'b000000000000000000000000000000000000;
   end
   always @(posedge clock) begin
      if (reset) begin
         o <= 36'b000000000000000000000000000000000000;
      end else begin
         o <= i;
      end
   end
endmodule
