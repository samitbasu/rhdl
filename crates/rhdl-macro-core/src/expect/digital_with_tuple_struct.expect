impl core :: marker :: Copy for Inputs { } impl Clone for Inputs { # [inline] fn clone (& self) -> Self { Self (self . 0 . clone () , self . 1 . clone () , self . 2 . clone () ,) } } impl rhdl :: core :: Digital for Inputs { const BITS : usize = < u32 as rhdl :: core :: Digital > :: BITS + < bool as rhdl :: core :: Digital > :: BITS + < bool as rhdl :: core :: Digital > :: BITS ; const TRACE_BITS : usize = < u32 as rhdl :: core :: Digital > :: TRACE_BITS + < bool as rhdl :: core :: Digital > :: TRACE_BITS + < bool as rhdl :: core :: Digital > :: TRACE_BITS ; fn static_kind () -> rhdl :: core :: Kind { rhdl :: core :: Kind :: make_struct (concat ! (module_path ! () , "::" , stringify ! (Inputs)) , vec ! [rhdl :: core :: Kind :: make_field (stringify ! (0) , < u32 as rhdl :: core :: Digital > :: static_kind ()) , rhdl :: core :: Kind :: make_field (stringify ! (1) , < bool as rhdl :: core :: Digital > :: static_kind ()) , rhdl :: core :: Kind :: make_field (stringify ! (2) , < bool as rhdl :: core :: Digital > :: static_kind ()) ,]) } fn static_trace_type () -> rhdl :: rtt :: TraceType { rhdl :: rtt :: make_struct (concat ! (module_path ! () , "::" , stringify ! (Inputs)) , vec ! [rhdl :: rtt :: make_field (stringify ! (0) , < u32 as rhdl :: core :: Digital > :: static_trace_type ()) , rhdl :: rtt :: make_field (stringify ! (1) , < bool as rhdl :: core :: Digital > :: static_trace_type ()) , rhdl :: rtt :: make_field (stringify ! (2) , < bool as rhdl :: core :: Digital > :: static_trace_type ()) ,]) } fn bin (self) -> Vec < rhdl :: core :: BitX > { [self . 0 . bin () . as_slice () , self . 1 . bin () . as_slice () , self . 2 . bin () . as_slice () ,] . concat () } fn trace (self) -> Vec < rhdl :: core :: TraceBit > { [self . 0 . trace () . as_slice () , self . 1 . trace () . as_slice () , self . 2 . trace () . as_slice () ,] . concat () } fn dont_care () -> Self { Self (< u32 as rhdl :: core :: Digital > :: dont_care () , < bool as rhdl :: core :: Digital > :: dont_care () , < bool as rhdl :: core :: Digital > :: dont_care () ,) } } impl rhdl :: core :: DigitalFn for Inputs { fn kernel_fn () -> Option < rhdl :: core :: KernelFnKind > { Some (rhdl :: core :: KernelFnKind :: TupleStructConstructor (< Self as rhdl :: core :: Digital > :: static_kind () . place_holder ())) } }