fn do_stuff<T: Digital, S: Digital>(x: Foo<T>, y: Foo<S>) -> bool {
    #[forbid(non_snake_case)]
    #[forbid(non_upper_case_globals)]
    #[forbid(unreachable_patterns)]
    #[allow(clippy::manual_map)]
    #[allow(clippy::redundant_pattern_matching)]
    #[allow(clippy::manual_memcpy)]
    #[forbid(path_statements)]
    #[forbid(unused_variables)]
    fn inner<T: Digital, S: Digital>(x: Foo<T>, y: Foo<S>) -> bool {
        {
            let c = x.a;
            let d = (x.a, y.b);
            let e = Foo::<T> { a: c, b: c };
            e == x
        }
    }
    rhdl::core::trace_push_path(stringify!(do_stuff));
    let ret = inner::<T, S>(x, y);
    rhdl::core::trace_pop_path();
    ret
}
#[allow(non_camel_case_types)]
#[doc(hidden)]
struct do_stuff<T: Digital, S: Digital> {
    __phantom_0: std::marker::PhantomData<T>,
    __phantom_1: std::marker::PhantomData<S>,
}
impl<T: Digital, S: Digital> rhdl::core::digital_fn::DigitalFn2 for do_stuff<T, S> {
    type A0 = Foo<T>;
    type A1 = Foo<S>;
    type O = bool;
    fn func() -> fn(Foo<T>, Foo<S>) -> bool {
        do_stuff::<T, S>
    }
}
impl<T: Digital, S: Digital> rhdl::core::digital_fn::DigitalFn for do_stuff<T, S> {
    fn kernel_fn() -> Option<rhdl::core::digital_fn::KernelFnKind> {
        let bob = rhdl::core::ast::builder::ASTBuilder::default();
        Some(
            bob
                .kernel_fn(
                    0u32.into(),
                    stringify!(do_stuff),
                    vec! {
                        bob.type_pat(26u32.into(), bob.ident_pat(25u32.into(),
                        stringify!(x), false), < Foo < T > as rhdl::core::Digital >
                        ::static_kind()), bob.type_pat(28u32.into(), bob.ident_pat(27u32
                        .into(), stringify!(y), false), < Foo < S > as
                        rhdl::core::Digital > ::static_kind())
                    },
                    <bool as rhdl::core::Digital>::static_kind(),
                    bob
                        .block(
                            24u32.into(),
                            vec![
                                bob.local_stmt(4u32.into(), 5u32.into(), bob.ident_pat(1u32
                                .into(), stringify!(c), false), Some(bob.field_expr(2u32
                                .into(), bob.path_expr(3u32.into(), bob.path(vec![bob
                                .path_segment(stringify!(x), bob.path_arguments_none())],)),
                                bob.member_named(stringify!(a))))), bob.local_stmt(12u32
                                .into(), 13u32.into(), bob.ident_pat(6u32.into(),
                                stringify!(d), false), Some(bob.tuple_expr(11u32.into(),
                                vec![bob.field_expr(7u32.into(), bob.path_expr(8u32.into(),
                                bob.path(vec![bob.path_segment(stringify!(x), bob
                                .path_arguments_none())],)), bob
                                .member_named(stringify!(a))), bob.field_expr(9u32.into(),
                                bob.path_expr(10u32.into(), bob.path(vec![bob
                                .path_segment(stringify!(y), bob.path_arguments_none())],)),
                                bob.member_named(stringify!(b)))]))), bob.local_stmt(18u32
                                .into(), 19u32.into(), bob.ident_pat(14u32.into(),
                                stringify!(e), false), Some(bob.struct_expr(17u32.into(),
                                bob.path(vec![bob.path_segment(stringify!(Foo),
                                vec![stringify!(T)])],), vec![bob.field_value(bob
                                .member_named(stringify!(a)), bob.path_expr(15u32.into(),
                                bob.path(vec![bob.path_segment(stringify!(c), bob
                                .path_arguments_none())],))), bob.field_value(bob
                                .member_named(stringify!(b)), bob.path_expr(16u32.into(),
                                bob.path(vec![bob.path_segment(stringify!(c), bob
                                .path_arguments_none())],)))], None, < Foo:: < T > as
                                rhdl::core::Digital > ::static_kind().place_holder()))), bob
                                .expr_stmt(23u32.into(), bob.binary_expr(20u32.into(),
                                rhdl::core::ast::builder::BinOp::Eq, bob.path_expr(21u32
                                .into(), bob.path(vec![bob.path_segment(stringify!(e), bob
                                .path_arguments_none())],)), bob.path_expr(22u32.into(), bob
                                .path(vec![bob.path_segment(stringify!(x), bob
                                .path_arguments_none())],))))
                            ],
                        ),
                    std::any::TypeId::of::<do_stuff<T, S>>(),
                    "fn do_stuff<T: Digital, S: Digital>(x: Foo<T>, y: Foo<S>) -> bool {\n    let c = x.a;\n    let d = (x.a, y.b);\n    let e = Foo::<T> { a: c, b: c };\n    e == x\n}\n",
                    concat!(file!(), ":", line!()),
                    vec![],
                ),
        )
    }
}
