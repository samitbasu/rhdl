fn update(z: Bar) {
    #[forbid(non_snake_case)]
    #[forbid(non_upper_case_globals)]
    #[forbid(unreachable_patterns)]
    #[allow(clippy::manual_map)]
    #[allow(clippy::redundant_pattern_matching)]
    #[allow(clippy::manual_memcpy)]
    #[forbid(path_statements)]
    #[forbid(unused_variables)]
    fn inner(z: Bar) {
        {
            match z {
                Bar::A => {}
                Bar::B(x) => {}
                Bar::C { x, y } => {}
            }
        }
    }
    rhdl::core::trace_push_path(stringify!(update));
    let ret = inner(z);
    rhdl::core::trace_pop_path();
    ret
}
#[allow(non_camel_case_types)]
#[doc(hidden)]
struct update {}
impl rhdl::core::digital_fn::DigitalFn1 for update {
    type A0 = Bar;
    type O = ();
    fn func() -> fn(Bar) {
        update
    }
}
impl rhdl::core::digital_fn::DigitalFn for update {
    fn kernel_fn() -> Option<rhdl::core::digital_fn::KernelFnKind> {
        let bob = rhdl::core::ast::builder::ASTBuilder::default();
        Some(
            bob
                .kernel_fn(
                    0u32.into(),
                    stringify!(update),
                    vec! {
                        bob.type_pat(20u32.into(), bob.ident_pat(19u32.into(),
                        stringify!(z), false), < Bar as rhdl::core::Digital >
                        ::static_kind())
                    },
                    rhdl::core::Kind::Empty,
                    bob
                        .block(
                            18u32.into(),
                            vec![
                                bob.expr_stmt(17u32.into(), bob.match_expr(16u32.into(), bob
                                .path_expr(15u32.into(), bob.path(vec![bob
                                .path_segment(stringify!(z), bob.path_arguments_none())],)),
                                vec![bob.arm(3u32.into(), bob.arm_kind_constant(bob
                                .expr_lit_typed_bits(rhdl::core::Digital::typed_bits(Bar::A),
                                stringify!(Bar::A))), bob.block_expr(2u32.into(), bob
                                .block(1u32.into(), vec![],))), bob.arm(8u32.into(), bob
                                .arm_kind_enum(bob.tuple_struct_pat(7u32.into(), bob
                                .path(vec![bob.path_segment(stringify!(Bar), bob
                                .path_arguments_none()), bob.path_segment(stringify!(B), bob
                                .path_arguments_none())],), vec![bob.ident_pat(6u32.into(),
                                stringify!(x), false)]),
                                rhdl::core::Digital::discriminant(Bar::B(Digital::dont_care(),))),
                                bob.block_expr(5u32.into(), bob.block(4u32.into(),
                                vec![],))), bob.arm(14u32.into(), bob.arm_kind_enum(bob
                                .struct_pat(13u32.into(), bob.path(vec![bob
                                .path_segment(stringify!(Bar), bob.path_arguments_none()),
                                bob.path_segment(stringify!(C), bob
                                .path_arguments_none())],), vec![bob.field_pat(bob
                                .member_named(stringify!(x)), bob.ident_pat(11u32.into(),
                                stringify!(x), false)), bob.field_pat(bob
                                .member_named(stringify!(y)), bob.ident_pat(12u32.into(),
                                stringify!(y), false))], false),
                                rhdl::core::Digital::discriminant(Bar::C { x :
                                Digital::dont_care(), y : Digital::dont_care(), })), bob
                                .block_expr(10u32.into(), bob.block(9u32.into(),
                                vec![],)))]))
                            ],
                        ),
                    std::any::TypeId::of::<update>(),
                    "fn update(z: Bar) {\n    match z {\n        Bar::A => {}\n        Bar::B(x) => {}\n        Bar::C { x, y } => {}\n    }\n}\n",
                    concat!(file!(), ":", line!()),
                    vec![],
                ),
        )
    }
}
