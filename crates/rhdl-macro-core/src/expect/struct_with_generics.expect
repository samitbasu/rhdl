impl < T : Digital > core :: marker :: Copy for Inputs < T > { } impl < T : Digital > Clone for Inputs < T > { # [inline] fn clone (& self) -> Self { Self { input : self . input . clone () , write : self . write . clone () , read : self . read . clone () , } } } impl < T : Digital > rhdl :: core :: Digital for Inputs < T > { const BITS : usize = < T as rhdl :: core :: Digital > :: BITS + < bool as rhdl :: core :: Digital > :: BITS + < bool as rhdl :: core :: Digital > :: BITS ; const TRACE_BITS : usize = < T as rhdl :: core :: Digital > :: TRACE_BITS + < bool as rhdl :: core :: Digital > :: TRACE_BITS + < bool as rhdl :: core :: Digital > :: TRACE_BITS ; fn static_kind () -> rhdl :: core :: Kind { rhdl :: core :: Kind :: make_struct (& vec ! [module_path ! () . to_string () , "::" . to_string () , stringify ! (Inputs) . to_string () , "<" . to_string () , std :: any :: type_name :: < T > () . to_string () , ">" . to_string ()] . join ("") , vec ! [rhdl :: core :: Kind :: make_field (stringify ! (input) , < T as rhdl :: core :: Digital > :: static_kind ()) , rhdl :: core :: Kind :: make_field (stringify ! (write) , < bool as rhdl :: core :: Digital > :: static_kind ()) , rhdl :: core :: Kind :: make_field (stringify ! (read) , < bool as rhdl :: core :: Digital > :: static_kind ()) ,] ,) } fn static_trace_type () -> rhdl :: core :: TraceType { rhdl :: rtt :: make_struct (& vec ! [module_path ! () . to_string () , "::" . to_string () , stringify ! (Inputs) . to_string () , "<" . to_string () , std :: any :: type_name :: < T > () . to_string () , ">" . to_string ()] . join ("") , vec ! [rhdl :: rtt :: make_field (stringify ! (input) , < T as rhdl :: core :: Digital > :: static_trace_type ()) , rhdl :: rtt :: make_field (stringify ! (write) , < bool as rhdl :: core :: Digital > :: static_trace_type ()) , rhdl :: rtt :: make_field (stringify ! (read) , < bool as rhdl :: core :: Digital > :: static_trace_type ()) ,] ,) } fn bin (self) -> Vec < rhdl :: core :: BitX > { [self . input . bin () . as_slice () , self . write . bin () . as_slice () , self . read . bin () . as_slice () ,] . concat () } fn trace (self) -> Vec < rhdl :: core :: TraceBit > { [self . input . trace () . as_slice () , self . write . trace () . as_slice () , self . read . trace () . as_slice () ,] . concat () } fn dont_care () -> Self { Self { input : < T as rhdl :: core :: Digital > :: dont_care () , write : < bool as rhdl :: core :: Digital > :: dont_care () , read : < bool as rhdl :: core :: Digital > :: dont_care () , } } }