fn update(a: u8) -> u8 {
    #[forbid(non_snake_case)]
    #[forbid(non_upper_case_globals)]
    #[forbid(unreachable_patterns)]
    #[allow(clippy::manual_map)]
    #[allow(clippy::redundant_pattern_matching)]
    #[allow(clippy::manual_memcpy)]
    #[forbid(path_statements)]
    #[forbid(unused_variables)]
    #[allow(unused_doc_comments)]
    fn inner(mut a: u8) -> u8 {
        {
            let mut b = 3;
            b = a;
            b
        }
    }
    rhdl::core::trace_push_path(stringify!(update));
    let ret = inner(a);
    rhdl::core::trace_pop_path();
    ret
}
#[allow(non_camel_case_types)]
#[doc(hidden)]
struct update {}
impl rhdl::core::digital_fn::DigitalFn1 for update {
    type A0 = u8;
    type O = u8;
    fn func() -> fn(u8) -> u8 {
        update
    }
}
impl rhdl::core::digital_fn::DigitalFn for update {
    fn kernel_fn() -> Option<rhdl::core::digital_fn::KernelFnKind> {
        const META_DATA: &'static str = "{\"0\":{\"span\":{\"start_line\":1,\"start_col\":0,\"end_line\":1,\"end_col\":0},\"attributes\":[]},\"1\":{\"span\":{\"start_line\":1,\"start_col\":0,\"end_line\":1,\"end_col\":0},\"attributes\":[]},\"2\":{\"span\":{\"start_line\":1,\"start_col\":0,\"end_line\":1,\"end_col\":0},\"attributes\":[]},\"3\":{\"span\":{\"start_line\":1,\"start_col\":0,\"end_line\":1,\"end_col\":1},\"attributes\":[]},\"4\":{\"span\":{\"start_line\":1,\"start_col\":0,\"end_line\":1,\"end_col\":0},\"attributes\":[]},\"5\":{\"span\":{\"start_line\":1,\"start_col\":0,\"end_line\":1,\"end_col\":0},\"attributes\":[]},\"6\":{\"span\":{\"start_line\":1,\"start_col\":0,\"end_line\":1,\"end_col\":0},\"attributes\":[]},\"7\":{\"span\":{\"start_line\":1,\"start_col\":0,\"end_line\":1,\"end_col\":0},\"attributes\":[]},\"8\":{\"span\":{\"start_line\":1,\"start_col\":0,\"end_line\":1,\"end_col\":0},\"attributes\":[]},\"9\":{\"span\":{\"start_line\":1,\"start_col\":0,\"end_line\":1,\"end_col\":0},\"attributes\":[]},\"10\":{\"span\":{\"start_line\":1,\"start_col\":0,\"end_line\":1,\"end_col\":0},\"attributes\":[]},\"11\":{\"span\":{\"start_line\":1,\"start_col\":0,\"end_line\":1,\"end_col\":0},\"attributes\":[]},\"12\":{\"span\":{\"start_line\":1,\"start_col\":0,\"end_line\":1,\"end_col\":0},\"attributes\":[]}}";
        let bob = rhdl::core::ast::builder::ASTBuilder::default();
        Some(
            bob
                .kernel_fn(
                    0u32.into(),
                    stringify!(update),
                    vec! {
                        bob.type_pat(12u32.into(), bob.ident_pat(11u32.into(),
                        stringify!(a), true), < u8 as rhdl::core::Digital >
                        ::static_kind())
                    },
                    <u8 as rhdl::core::Digital>::static_kind(),
                    bob
                        .block(
                            1u32.into(),
                            vec![
                                bob.local_stmt(4u32.into(), bob.ident_pat(2u32.into(),
                                stringify!(b), true), Some(bob.lit_expr(3u32.into(), bob
                                .expr_lit_int(stringify!(3))))), bob.semi_stmt(5u32.into(),
                                bob.assign_expr(6u32.into(), bob.path_expr(7u32.into(), bob
                                .path(vec![bob.path_segment(stringify!(b), bob
                                .path_arguments_none())],)), bob.path_expr(8u32.into(), bob
                                .path(vec![bob.path_segment(stringify!(a), bob
                                .path_arguments_none())],)))), bob.expr_stmt(9u32.into(),
                                bob.path_expr(10u32.into(), bob.path(vec![bob
                                .path_segment(stringify!(b), bob.path_arguments_none())],)))
                            ],
                        ),
                    std::any::TypeId::of::<update>(),
                    None,
                    rhdl::serde_json::from_str(META_DATA).unwrap(),
                    vec![],
                ),
        )
    }
}
