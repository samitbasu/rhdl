fn update(a: u8) -> u8 {
    #[forbid(non_snake_case)]
    #[forbid(non_upper_case_globals)]
    #[forbid(unreachable_patterns)]
    #[allow(clippy::manual_map)]
    #[allow(clippy::redundant_pattern_matching)]
    #[allow(clippy::manual_memcpy)]
    #[forbid(path_statements)]
    #[forbid(unused_variables)]
    fn inner(mut a: u8) -> u8 {
        {
            let mut b = 3;
            b = a;
            b
        }
    }
    rhdl::core::trace_push_path(stringify!(update));
    let ret = inner(a);
    rhdl::core::trace_pop_path();
    ret
}
#[allow(non_camel_case_types)]
#[doc(hidden)]
struct update {}
impl rhdl::core::digital_fn::DigitalFn1 for update {
    type A0 = u8;
    type O = u8;
    fn func() -> fn(u8) -> u8 {
        update
    }
}
impl rhdl::core::digital_fn::DigitalFn for update {
    fn kernel_fn() -> Option<rhdl::core::digital_fn::KernelFnKind> {
        let bob = rhdl::core::ast::builder::ASTBuilder::default();
        Some(
            bob
                .kernel_fn(
                    stringify!(update),
                    vec! {
                        bob.type_pat(bob.ident_pat(stringify!(a), true), < u8 as
                        rhdl::core::Digital > ::static_kind())
                    },
                    <u8 as rhdl::core::Digital>::static_kind(),
                    bob
                        .block(
                            vec![
                                bob.local_stmt(bob.ident_pat(stringify!(b), true), Some(bob
                                .lit_expr(bob.expr_lit_int(stringify!(3))))), bob
                                .semi_stmt(bob.assign_expr(bob.path_expr(bob.path(vec![bob
                                .path_segment(stringify!(b), bob.path_arguments_none())],)),
                                bob.path_expr(bob.path(vec![bob.path_segment(stringify!(a),
                                bob.path_arguments_none())],)))), bob.expr_stmt(bob
                                .path_expr(bob.path(vec![bob.path_segment(stringify!(b), bob
                                .path_arguments_none())],)))
                            ],
                        ),
                    std::any::TypeId::of::<update>(),
                    "fn update(mut a: u8) -> u8 {\n    let mut b = 3;\n    b = a;\n    b\n}\n",
                    concat!(file!(), ":", line!()),
                    vec![],
                ),
        )
    }
}
