"impl core :: marker :: Copy for NestedBits { } impl Clone for NestedBits { # [inline] fn clone (& self) -> Self { Self { nest_1 : self . nest_1 . clone () , nest_2 : self . nest_2 . clone () , nest_3 : self . nest_3 . clone () , } } } impl rhdl :: core :: Digital for NestedBits { const BITS : usize = < bool as rhdl :: core :: Digital > :: BITS + < u8 as rhdl :: core :: Digital > :: BITS + < TwoBits as rhdl :: core :: Digital > :: BITS ; const TRACE_BITS : usize = < bool as rhdl :: core :: Digital > :: TRACE_BITS + < u8 as rhdl :: core :: Digital > :: TRACE_BITS + < TwoBits as rhdl :: core :: Digital > :: TRACE_BITS ; fn static_kind () -> rhdl :: core :: Kind { rhdl :: core :: Kind :: make_struct (concat ! (module_path ! () , \"::\" , stringify ! (NestedBits)) , vec ! [rhdl :: core :: Kind :: make_field (stringify ! (nest_1) , < bool as rhdl :: core :: Digital > :: static_kind ()) , rhdl :: core :: Kind :: make_field (stringify ! (nest_2) , < u8 as rhdl :: core :: Digital > :: static_kind ()) , rhdl :: core :: Kind :: make_field (stringify ! (nest_3) , < TwoBits as rhdl :: core :: Digital > :: static_kind ()) ,] ,) } fn static_trace_type () -> rhdl :: core :: TraceType { rhdl :: rtt :: make_struct (concat ! (module_path ! () , \"::\" , stringify ! (NestedBits)) , vec ! [rhdl :: rtt :: make_field (stringify ! (nest_1) , < bool as rhdl :: core :: Digital > :: static_trace_type ()) , rhdl :: rtt :: make_field (stringify ! (nest_2) , < u8 as rhdl :: core :: Digital > :: static_trace_type ()) , rhdl :: rtt :: make_field (stringify ! (nest_3) , < TwoBits as rhdl :: core :: Digital > :: static_trace_type ()) ,] ,) } fn bin (self) -> Vec < rhdl :: core :: BitX > { [self . nest_1 . bin () . as_slice () , self . nest_2 . bin () . as_slice () , self . nest_3 . bin () . as_slice () ,] . concat () } fn trace (self) -> Vec < rhdl :: core :: TraceBit > { [self . nest_1 . trace () . as_slice () , self . nest_2 . trace () . as_slice () , self . nest_3 . trace () . as_slice () ,] . concat () } fn dont_care () -> Self { Self { nest_1 : < bool as rhdl :: core :: Digital > :: dont_care () , nest_2 : < u8 as rhdl :: core :: Digital > :: dont_care () , nest_3 : < TwoBits as rhdl :: core :: Digital > :: dont_care () , } } }"
