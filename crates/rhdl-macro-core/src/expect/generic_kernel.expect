fn update<T: Digital>(a: T, b: T) -> [T; 2] {
    #[forbid(non_snake_case)]
    #[forbid(non_upper_case_globals)]
    #[forbid(unreachable_patterns)]
    #[allow(clippy::manual_map)]
    #[allow(clippy::redundant_pattern_matching)]
    #[allow(clippy::manual_memcpy)]
    #[forbid(path_statements)]
    #[forbid(unused_variables)]
    #[allow(unused_doc_comments)]
    fn inner<T: Digital>(a: T, b: T) -> [T; 2] {
        { [a, b] }
    }
    rhdl::core::trace_push_path(stringify!(update));
    let ret = inner::<T>(a, b);
    rhdl::core::trace_pop_path();
    ret
}
#[allow(non_camel_case_types)]
#[doc(hidden)]
struct update<T: Digital> {
    __phantom_0: std::marker::PhantomData<T>,
}
impl<T: Digital> rhdl::core::digital_fn::DigitalFn2 for update<T> {
    type A0 = T;
    type A1 = T;
    type O = [T; 2];
    fn func() -> fn(T, T) -> [T; 2] {
        update::<T>
    }
}
impl<T: Digital> rhdl::core::digital_fn::DigitalFn for update<T> {
    fn kernel_fn() -> Option<rhdl::core::digital_fn::KernelFnKind> {
        const META_DATA: &'static str = "{\"0\":{\"span\":{\"start_line\":1,\"start_col\":0,\"end_line\":1,\"end_col\":0},\"attributes\":[]},\"1\":{\"span\":{\"start_line\":1,\"start_col\":0,\"end_line\":1,\"end_col\":0},\"attributes\":[]},\"2\":{\"span\":{\"start_line\":1,\"start_col\":0,\"end_line\":1,\"end_col\":0},\"attributes\":[]},\"3\":{\"span\":{\"start_line\":1,\"start_col\":0,\"end_line\":1,\"end_col\":0},\"attributes\":[]},\"4\":{\"span\":{\"start_line\":1,\"start_col\":0,\"end_line\":1,\"end_col\":0},\"attributes\":[]},\"5\":{\"span\":{\"start_line\":1,\"start_col\":0,\"end_line\":1,\"end_col\":0},\"attributes\":[]},\"6\":{\"span\":{\"start_line\":1,\"start_col\":0,\"end_line\":1,\"end_col\":0},\"attributes\":[]},\"7\":{\"span\":{\"start_line\":1,\"start_col\":0,\"end_line\":1,\"end_col\":0},\"attributes\":[]},\"8\":{\"span\":{\"start_line\":1,\"start_col\":0,\"end_line\":1,\"end_col\":0},\"attributes\":[]},\"9\":{\"span\":{\"start_line\":1,\"start_col\":0,\"end_line\":1,\"end_col\":0},\"attributes\":[]}}";
        let bob = rhdl::core::ast::builder::ASTBuilder::default();
        Some(
            bob
                .kernel_fn(
                    0u32.into(),
                    stringify!(update),
                    vec! {
                        bob.type_pat(7u32.into(), bob.ident_pat(6u32.into(),
                        stringify!(a), false), < T as rhdl::core::Digital >
                        ::static_kind()), bob.type_pat(9u32.into(), bob.ident_pat(8u32
                        .into(), stringify!(b), false), < T as rhdl::core::Digital >
                        ::static_kind())
                    },
                    <[T; 2] as rhdl::core::Digital>::static_kind(),
                    bob
                        .block(
                            1u32.into(),
                            vec![
                                bob.expr_stmt(2u32.into(), bob.array_expr(3u32.into(),
                                vec![bob.path_expr(4u32.into(), bob.path(vec![bob
                                .path_segment(stringify!(a), bob.path_arguments_none())],)),
                                bob.path_expr(5u32.into(), bob.path(vec![bob
                                .path_segment(stringify!(b), bob
                                .path_arguments_none())],))]))
                            ],
                        ),
                    std::any::TypeId::of::<update<T>>(),
                    None,
                    rhdl::serde_json::from_str(META_DATA).unwrap(),
                    vec![],
                ),
        )
    }
}
