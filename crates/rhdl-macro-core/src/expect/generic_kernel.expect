fn update<T: Digital>(a: T, b: T) -> [T; 2] {
    #[forbid(non_snake_case)]
    #[forbid(non_upper_case_globals)]
    #[forbid(unreachable_patterns)]
    #[allow(clippy::manual_map)]
    #[allow(clippy::redundant_pattern_matching)]
    #[allow(clippy::manual_memcpy)]
    #[forbid(path_statements)]
    #[forbid(unused_variables)]
    fn inner<T: Digital>(a: T, b: T) -> [T; 2] {
        { [a, b] }
    }
    rhdl::core::trace_push_path(stringify!(update));
    let ret = inner::<T>(a, b);
    rhdl::core::trace_pop_path();
    ret
}
#[allow(non_camel_case_types)]
#[doc(hidden)]
struct update<T: Digital> {
    __phantom_0: std::marker::PhantomData<T>,
}
impl<T: Digital> rhdl::core::digital_fn::DigitalFn2 for update<T> {
    type A0 = T;
    type A1 = T;
    type O = [T; 2];
    fn func() -> fn(T, T) -> [T; 2] {
        update::<T>
    }
}
impl<T: Digital> rhdl::core::digital_fn::DigitalFn for update<T> {
    fn kernel_fn() -> Option<rhdl::core::digital_fn::KernelFnKind> {
        let bob = rhdl::core::ast::builder::ASTBuilder::default();
        Some(
            bob
                .kernel_fn(
                    stringify!(update),
                    vec! {
                        bob.type_pat(bob.ident_pat(stringify!(a), false), < T as
                        rhdl::core::Digital > ::static_kind()), bob.type_pat(bob
                        .ident_pat(stringify!(b), false), < T as rhdl::core::Digital >
                        ::static_kind())
                    },
                    <[T; 2] as rhdl::core::Digital>::static_kind(),
                    bob
                        .block(
                            vec![
                                bob.expr_stmt(bob.array_expr(vec![bob.path_expr(bob
                                .path(vec![bob.path_segment(stringify!(a), bob
                                .path_arguments_none())],)), bob.path_expr(bob.path(vec![bob
                                .path_segment(stringify!(b), bob
                                .path_arguments_none())],))]))
                            ],
                        ),
                    std::any::TypeId::of::<update<T>>(),
                    "fn update<T: Digital>(a: T, b: T) -> [T; 2] {\n    [a, b]\n}\n",
                    concat!(file!(), ":", line!()),
                    vec![],
                ),
        )
    }
}
