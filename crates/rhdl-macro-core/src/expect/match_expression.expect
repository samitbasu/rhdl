fn jnk() -> Vec<Stmt> {
    bob.block_expr(
        23u32.into(),
        bob
            .block(
                22u32.into(),
                vec![
                    bob.local_stmt(2u32.into(), 3u32.into(), bob.ident_pat(0u32.into(),
                    stringify!(l), false), Some(bob.lit_expr(1u32.into(), bob
                    .expr_lit_int(stringify!(3))))), bob.expr_stmt(21u32.into(), bob
                    .match_expr(20u32.into(), bob.path_expr(19u32.into(), bob
                    .path(vec![bob.path_segment(stringify!(l), bob
                    .path_arguments_none())],)), vec![bob.arm(6u32.into(), bob
                    .arm_kind_constant(bob
                    .expr_lit_typed_bits(rhdl::core::Digital::typed_bits(State::Init),
                    stringify!(State::Init))), bob.block_expr(5u32.into(), bob.block(4u32
                    .into(), vec![],))), bob.arm(15u32.into(), bob.arm_kind_enum(bob
                    .tuple_struct_pat(14u32.into(), bob.path(vec![bob
                    .path_segment(stringify!(State), bob.path_arguments_none()), bob
                    .path_segment(stringify!(Run), bob.path_arguments_none())],),
                    vec![bob.ident_pat(13u32.into(), stringify!(a), false)]),
                    rhdl::core::Digital::discriminant(State::Run(Digital::dont_care(),))),
                    bob.block_expr(12u32.into(), bob.block(11u32.into(), vec![bob
                    .semi_stmt(10u32.into(), bob.assign_expr(7u32.into(), bob
                    .path_expr(8u32.into(), bob.path(vec![bob.path_segment(stringify!(l),
                    bob.path_arguments_none())],)), bob.path_expr(9u32.into(), bob
                    .path(vec![bob.path_segment(stringify!(a), bob
                    .path_arguments_none())],))))],))), bob.arm(18u32.into(), bob
                    .arm_kind_constant(bob
                    .expr_lit_typed_bits(rhdl::core::Digital::typed_bits(State::Boom),
                    stringify!(State::Boom))), bob.block_expr(17u32.into(), bob
                    .block(16u32.into(), vec![],)))]))
                ],
            ),
    )
}
