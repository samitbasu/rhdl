fn update() {
    #[forbid(non_snake_case)]
    #[forbid(non_upper_case_globals)]
    #[forbid(unreachable_patterns)]
    #[allow(clippy::manual_map)]
    #[allow(clippy::redundant_pattern_matching)]
    #[allow(clippy::manual_memcpy)]
    #[forbid(path_statements)]
    #[forbid(unused_variables)]
    fn inner() {
        {
            let b = 0x4313_u8;
            let j = 342;
            let i = 0x432_u8;
            let a = 54_234_i14;
            let p = 0o644_u12;
            let z = 2_u4;
            let h = 0b1010110_u_10;
            let p = 0b110011_i15;
            let q: u8 = 4;
            let z = a.c;
            let w = (a, a);
            a.c[1] = q + 3;
            a.c = [0; 3];
            a.c = [1, 2, 3];
            let q = (1, (0, 5), 6);
            let (q0, (q1, q1b), q2): (u8, (u8, u8), u16) = q;
            a.a = 2 + 3 + q1;
            let z;
            if 1 > 3 {
                z = 2_u4;
            } else {
                z = 5;
            }
        }
    }
    rhdl::core::trace_push_path(stringify!(update));
    let ret = inner();
    rhdl::core::trace_pop_path();
    ret
}
#[allow(non_camel_case_types)]
#[doc(hidden)]
struct update {}
impl rhdl::core::digital_fn::DigitalFn0 for update {
    type O = ();
    fn func() -> fn() {
        update
    }
}
impl rhdl::core::digital_fn::DigitalFn for update {
    fn kernel_fn() -> Option<rhdl::core::digital_fn::KernelFnKind> {
        let bob = rhdl::core::ast::builder::ASTBuilder::default();
        Some(
            bob
                .kernel_fn(
                    stringify!(update),
                    vec! {},
                    rhdl::core::Kind::Empty,
                    bob
                        .block(
                            vec![
                                bob.local_stmt(bob.ident_pat(stringify!(b), false), Some(bob
                                .lit_expr(bob.expr_lit_int(stringify!(0x4313_u8))))), bob
                                .local_stmt(bob.ident_pat(stringify!(j), false), Some(bob
                                .lit_expr(bob.expr_lit_int(stringify!(342))))), bob
                                .local_stmt(bob.ident_pat(stringify!(i), false), Some(bob
                                .lit_expr(bob.expr_lit_int(stringify!(0x432_u8))))), bob
                                .local_stmt(bob.ident_pat(stringify!(a), false), Some(bob
                                .lit_expr(bob.expr_lit_int(stringify!(54_234_i14))))), bob
                                .local_stmt(bob.ident_pat(stringify!(p), false), Some(bob
                                .lit_expr(bob.expr_lit_int(stringify!(0o644_u12))))), bob
                                .local_stmt(bob.ident_pat(stringify!(z), false), Some(bob
                                .lit_expr(bob.expr_lit_int(stringify!(2_u4))))), bob
                                .local_stmt(bob.ident_pat(stringify!(h), false), Some(bob
                                .lit_expr(bob.expr_lit_int(stringify!(0b1010110_u_10))))),
                                bob.local_stmt(bob.ident_pat(stringify!(p), false), Some(bob
                                .lit_expr(bob.expr_lit_int(stringify!(0b110011_i15))))), bob
                                .local_stmt(bob.type_pat(bob.ident_pat(stringify!(q),
                                false), < u8 as rhdl::core::Digital > ::static_kind()),
                                Some(bob.lit_expr(bob.expr_lit_int(stringify!(4))))), bob
                                .local_stmt(bob.ident_pat(stringify!(z), false), Some(bob
                                .field_expr(bob.path_expr(bob.path(vec![bob
                                .path_segment(stringify!(a), bob.path_arguments_none())],)),
                                bob.member_named(stringify!(c))))), bob.local_stmt(bob
                                .ident_pat(stringify!(w), false), Some(bob
                                .tuple_expr(vec![bob.path_expr(bob.path(vec![bob
                                .path_segment(stringify!(a), bob.path_arguments_none())],)),
                                bob.path_expr(bob.path(vec![bob.path_segment(stringify!(a),
                                bob.path_arguments_none())],))]))), bob.semi_stmt(bob
                                .assign_expr(bob.index_expr(bob.field_expr(bob.path_expr(bob
                                .path(vec![bob.path_segment(stringify!(a), bob
                                .path_arguments_none())],)), bob
                                .member_named(stringify!(c))), bob.lit_expr(bob
                                .expr_lit_int(stringify!(1)))), bob
                                .binary_expr(rhdl::core::ast::builder::BinOp::Add, bob
                                .path_expr(bob.path(vec![bob.path_segment(stringify!(q), bob
                                .path_arguments_none())],)), bob.lit_expr(bob
                                .expr_lit_int(stringify!(3)))))), bob.semi_stmt(bob
                                .assign_expr(bob.field_expr(bob.path_expr(bob.path(vec![bob
                                .path_segment(stringify!(a), bob.path_arguments_none())],)),
                                bob.member_named(stringify!(c))), bob.repeat_expr(bob
                                .lit_expr(bob.expr_lit_int(stringify!(0))), < usize as
                                rhdl::core::Digital > ::typed_bits(3).as_i64().unwrap()))),
                                bob.semi_stmt(bob.assign_expr(bob.field_expr(bob
                                .path_expr(bob.path(vec![bob.path_segment(stringify!(a), bob
                                .path_arguments_none())],)), bob
                                .member_named(stringify!(c))), bob.array_expr(vec![bob
                                .lit_expr(bob.expr_lit_int(stringify!(1))), bob.lit_expr(bob
                                .expr_lit_int(stringify!(2))), bob.lit_expr(bob
                                .expr_lit_int(stringify!(3)))]))), bob.local_stmt(bob
                                .ident_pat(stringify!(q), false), Some(bob
                                .tuple_expr(vec![bob.lit_expr(bob
                                .expr_lit_int(stringify!(1))), bob.tuple_expr(vec![bob
                                .lit_expr(bob.expr_lit_int(stringify!(0))), bob.lit_expr(bob
                                .expr_lit_int(stringify!(5)))]), bob.lit_expr(bob
                                .expr_lit_int(stringify!(6)))]))), bob.local_stmt(bob
                                .type_pat(bob.tuple_pat(vec![bob.ident_pat(stringify!(q0),
                                false), bob.tuple_pat(vec![bob.ident_pat(stringify!(q1),
                                false), bob.ident_pat(stringify!(q1b), false)]), bob
                                .ident_pat(stringify!(q2), false)]), < (u8, (u8, u8), u16)
                                as rhdl::core::Digital > ::static_kind()), Some(bob
                                .path_expr(bob.path(vec![bob.path_segment(stringify!(q), bob
                                .path_arguments_none())],)))), bob.semi_stmt(bob
                                .assign_expr(bob.field_expr(bob.path_expr(bob.path(vec![bob
                                .path_segment(stringify!(a), bob.path_arguments_none())],)),
                                bob.member_named(stringify!(a))), bob
                                .binary_expr(rhdl::core::ast::builder::BinOp::Add, bob
                                .binary_expr(rhdl::core::ast::builder::BinOp::Add, bob
                                .lit_expr(bob.expr_lit_int(stringify!(2))), bob.lit_expr(bob
                                .expr_lit_int(stringify!(3)))), bob.path_expr(bob
                                .path(vec![bob.path_segment(stringify!(q1), bob
                                .path_arguments_none())],))))), bob.local_stmt(bob
                                .ident_pat(stringify!(z), false), None), bob.expr_stmt(bob
                                .if_expr(bob
                                .binary_expr(rhdl::core::ast::builder::BinOp::Gt, bob
                                .lit_expr(bob.expr_lit_int(stringify!(1))), bob.lit_expr(bob
                                .expr_lit_int(stringify!(3)))), bob.block(vec![bob
                                .semi_stmt(bob.assign_expr(bob.path_expr(bob.path(vec![bob
                                .path_segment(stringify!(z), bob.path_arguments_none())],)),
                                bob.lit_expr(bob.expr_lit_int(stringify!(2_u4)))))],),
                                Some(bob.block_expr(bob.block(vec![bob.semi_stmt(bob
                                .assign_expr(bob.path_expr(bob.path(vec![bob
                                .path_segment(stringify!(z), bob.path_arguments_none())],)),
                                bob.lit_expr(bob.expr_lit_int(stringify!(5)))))],)))))
                            ],
                        ),
                    std::any::TypeId::of::<update>(),
                    "fn update() {\n    let b = 0x4313_u8;\n    let j = 342;\n    let i = 0x432_u8;\n    let a = 54_234_i14;\n    let p = 0o644_u12;\n    let z = 2_u4;\n    let h = 0b1010110_u_10;\n    let p = 0b110011_i15;\n    let q: u8 = 4;\n    let z = a.c;\n    let w = (a, a);\n    a.c[1] = q + 3;\n    a.c = [0; 3];\n    a.c = [1, 2, 3];\n    let q = (1, (0, 5), 6);\n    let (q0, (q1, q1b), q2): (u8, (u8, u8), u16) = q;\n    a.a = 2 + 3 + q1;\n    let z;\n    if 1 > 3 {\n        z = 2_u4;\n    } else {\n        z = 5;\n    }\n}\n",
                    concat!(file!(), ":", line!()),
                    vec![],
                ),
        )
    }
}
