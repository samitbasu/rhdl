fn update() {
    #[forbid(non_snake_case)]
    #[forbid(non_upper_case_globals)]
    #[forbid(unreachable_patterns)]
    #[allow(clippy::manual_map)]
    #[allow(clippy::redundant_pattern_matching)]
    #[allow(clippy::manual_memcpy)]
    #[forbid(path_statements)]
    #[forbid(unused_variables)]
    fn inner() {
        {
            let b = 0x4313_u8;
            let j = 342;
            let i = 0x432_u8;
            let a = 54_234_i14;
            let p = 0o644_u12;
            let z = 2_u4;
            let h = 0b1010110_u_10;
            let p = 0b110011_i15;
            let q: u8 = 4;
            let z = a.c;
            let w = (a, a);
            a.c[1] = q + 3;
            a.c = [0; 3];
            a.c = [1, 2, 3];
            let q = (1, (0, 5), 6);
            let (q0, (q1, q1b), q2): (u8, (u8, u8), u16) = q;
            a.a = 2 + 3 + q1;
            let z;
            if 1 > 3 {
                z = 2_u4;
            } else {
                z = 5;
            }
        }
    }
    rhdl::core::trace_push_path(stringify!(update));
    let ret = inner();
    rhdl::core::trace_pop_path();
    ret
}
#[allow(non_camel_case_types)]
#[doc(hidden)]
struct update {}
impl rhdl::core::digital_fn::DigitalFn0 for update {
    type O = ();
    fn func() -> fn() {
        update
    }
}
impl rhdl::core::digital_fn::DigitalFn for update {
    fn kernel_fn() -> Option<rhdl::core::digital_fn::KernelFnKind> {
        let bob = rhdl::core::ast::builder::ASTBuilder::default();
        Some(
            bob
                .kernel_fn(
                    0u32.into(),
                    stringify!(update),
                    vec! {},
                    rhdl::core::Kind::Empty,
                    bob
                        .block(
                            119u32.into(),
                            vec![
                                bob.local_stmt(3u32.into(), 4u32.into(), bob.ident_pat(1u32
                                .into(), stringify!(b), false), Some(bob.lit_expr(2u32
                                .into(), bob.expr_lit_int(stringify!(0x4313_u8))))), bob
                                .local_stmt(7u32.into(), 8u32.into(), bob.ident_pat(5u32
                                .into(), stringify!(j), false), Some(bob.lit_expr(6u32
                                .into(), bob.expr_lit_int(stringify!(342))))), bob
                                .local_stmt(11u32.into(), 12u32.into(), bob.ident_pat(9u32
                                .into(), stringify!(i), false), Some(bob.lit_expr(10u32
                                .into(), bob.expr_lit_int(stringify!(0x432_u8))))), bob
                                .local_stmt(15u32.into(), 16u32.into(), bob.ident_pat(13u32
                                .into(), stringify!(a), false), Some(bob.lit_expr(14u32
                                .into(), bob.expr_lit_int(stringify!(54_234_i14))))), bob
                                .local_stmt(19u32.into(), 20u32.into(), bob.ident_pat(17u32
                                .into(), stringify!(p), false), Some(bob.lit_expr(18u32
                                .into(), bob.expr_lit_int(stringify!(0o644_u12))))), bob
                                .local_stmt(23u32.into(), 24u32.into(), bob.ident_pat(21u32
                                .into(), stringify!(z), false), Some(bob.lit_expr(22u32
                                .into(), bob.expr_lit_int(stringify!(2_u4))))), bob
                                .local_stmt(27u32.into(), 28u32.into(), bob.ident_pat(25u32
                                .into(), stringify!(h), false), Some(bob.lit_expr(26u32
                                .into(), bob.expr_lit_int(stringify!(0b1010110_u_10))))),
                                bob.local_stmt(31u32.into(), 32u32.into(), bob
                                .ident_pat(29u32.into(), stringify!(p), false), Some(bob
                                .lit_expr(30u32.into(), bob
                                .expr_lit_int(stringify!(0b110011_i15))))), bob
                                .local_stmt(36u32.into(), 37u32.into(), bob.type_pat(34u32
                                .into(), bob.ident_pat(33u32.into(), stringify!(q), false),
                                < u8 as rhdl::core::Digital > ::static_kind()), Some(bob
                                .lit_expr(35u32.into(), bob.expr_lit_int(stringify!(4))))),
                                bob.local_stmt(41u32.into(), 42u32.into(), bob
                                .ident_pat(38u32.into(), stringify!(z), false), Some(bob
                                .field_expr(39u32.into(), bob.path_expr(40u32.into(), bob
                                .path(vec![bob.path_segment(stringify!(a), bob
                                .path_arguments_none())],)), bob
                                .member_named(stringify!(c))))), bob.local_stmt(47u32
                                .into(), 48u32.into(), bob.ident_pat(43u32.into(),
                                stringify!(w), false), Some(bob.tuple_expr(46u32.into(),
                                vec![bob.path_expr(44u32.into(), bob.path(vec![bob
                                .path_segment(stringify!(a), bob.path_arguments_none())],)),
                                bob.path_expr(45u32.into(), bob.path(vec![bob
                                .path_segment(stringify!(a), bob
                                .path_arguments_none())],))]))), bob.semi_stmt(57u32.into(),
                                bob.assign_expr(49u32.into(), bob.index_expr(53u32.into(),
                                bob.field_expr(51u32.into(), bob.path_expr(52u32.into(), bob
                                .path(vec![bob.path_segment(stringify!(a), bob
                                .path_arguments_none())],)), bob
                                .member_named(stringify!(c))), bob.lit_expr(50u32.into(),
                                bob.expr_lit_int(stringify!(1)))), bob.binary_expr(54u32
                                .into(), rhdl::core::ast::builder::BinOp::Add, bob
                                .path_expr(55u32.into(), bob.path(vec![bob
                                .path_segment(stringify!(q), bob.path_arguments_none())],)),
                                bob.lit_expr(56u32.into(), bob
                                .expr_lit_int(stringify!(3)))))), bob.semi_stmt(63u32
                                .into(), bob.assign_expr(58u32.into(), bob.field_expr(59u32
                                .into(), bob.path_expr(60u32.into(), bob.path(vec![bob
                                .path_segment(stringify!(a), bob.path_arguments_none())],)),
                                bob.member_named(stringify!(c))), bob.repeat_expr(62u32
                                .into(), bob.lit_expr(61u32.into(), bob
                                .expr_lit_int(stringify!(0))), < usize as
                                rhdl::core::Digital > ::typed_bits(3).as_i64().unwrap()))),
                                bob.semi_stmt(71u32.into(), bob.assign_expr(64u32.into(),
                                bob.field_expr(65u32.into(), bob.path_expr(66u32.into(), bob
                                .path(vec![bob.path_segment(stringify!(a), bob
                                .path_arguments_none())],)), bob
                                .member_named(stringify!(c))), bob.array_expr(70u32.into(),
                                vec![bob.lit_expr(67u32.into(), bob
                                .expr_lit_int(stringify!(1))), bob.lit_expr(68u32.into(),
                                bob.expr_lit_int(stringify!(2))), bob.lit_expr(69u32.into(),
                                bob.expr_lit_int(stringify!(3)))]))), bob.local_stmt(79u32
                                .into(), 80u32.into(), bob.ident_pat(72u32.into(),
                                stringify!(q), false), Some(bob.tuple_expr(78u32.into(),
                                vec![bob.lit_expr(73u32.into(), bob
                                .expr_lit_int(stringify!(1))), bob.tuple_expr(76u32.into(),
                                vec![bob.lit_expr(74u32.into(), bob
                                .expr_lit_int(stringify!(0))), bob.lit_expr(75u32.into(),
                                bob.expr_lit_int(stringify!(5)))]), bob.lit_expr(77u32
                                .into(), bob.expr_lit_int(stringify!(6)))]))), bob
                                .local_stmt(89u32.into(), 90u32.into(), bob.type_pat(87u32
                                .into(), bob.tuple_pat(86u32.into(), vec![bob
                                .ident_pat(81u32.into(), stringify!(q0), false), bob
                                .tuple_pat(84u32.into(), vec![bob.ident_pat(82u32.into(),
                                stringify!(q1), false), bob.ident_pat(83u32.into(),
                                stringify!(q1b), false)]), bob.ident_pat(85u32.into(),
                                stringify!(q2), false)]), < (u8, (u8, u8), u16) as
                                rhdl::core::Digital > ::static_kind()), Some(bob
                                .path_expr(88u32.into(), bob.path(vec![bob
                                .path_segment(stringify!(q), bob
                                .path_arguments_none())],)))), bob.semi_stmt(99u32.into(),
                                bob.assign_expr(91u32.into(), bob.field_expr(92u32.into(),
                                bob.path_expr(93u32.into(), bob.path(vec![bob
                                .path_segment(stringify!(a), bob.path_arguments_none())],)),
                                bob.member_named(stringify!(a))), bob.binary_expr(94u32
                                .into(), rhdl::core::ast::builder::BinOp::Add, bob
                                .binary_expr(95u32.into(),
                                rhdl::core::ast::builder::BinOp::Add, bob.lit_expr(96u32
                                .into(), bob.expr_lit_int(stringify!(2))), bob
                                .lit_expr(97u32.into(), bob.expr_lit_int(stringify!(3)))),
                                bob.path_expr(98u32.into(), bob.path(vec![bob
                                .path_segment(stringify!(q1), bob
                                .path_arguments_none())],))))), bob.local_stmt(101u32
                                .into(), 102u32.into(), bob.ident_pat(100u32.into(),
                                stringify!(z), false), None), bob.expr_stmt(118u32.into(),
                                bob.if_expr(103u32.into(), bob.binary_expr(104u32.into(),
                                rhdl::core::ast::builder::BinOp::Gt, bob.lit_expr(105u32
                                .into(), bob.expr_lit_int(stringify!(1))), bob
                                .lit_expr(106u32.into(), bob.expr_lit_int(stringify!(3)))),
                                bob.block(111u32.into(), vec![bob.semi_stmt(110u32.into(),
                                bob.assign_expr(107u32.into(), bob.path_expr(108u32.into(),
                                bob.path(vec![bob.path_segment(stringify!(z), bob
                                .path_arguments_none())],)), bob.lit_expr(109u32.into(), bob
                                .expr_lit_int(stringify!(2_u4)))))],), Some(bob
                                .block_expr(117u32.into(), bob.block(116u32.into(), vec![bob
                                .semi_stmt(115u32.into(), bob.assign_expr(112u32.into(), bob
                                .path_expr(113u32.into(), bob.path(vec![bob
                                .path_segment(stringify!(z), bob.path_arguments_none())],)),
                                bob.lit_expr(114u32.into(), bob
                                .expr_lit_int(stringify!(5)))))],)))))
                            ],
                        ),
                    std::any::TypeId::of::<update>(),
                    "fn update() {\n    let b = 0x4313_u8;\n    let j = 342;\n    let i = 0x432_u8;\n    let a = 54_234_i14;\n    let p = 0o644_u12;\n    let z = 2_u4;\n    let h = 0b1010110_u_10;\n    let p = 0b110011_i15;\n    let q: u8 = 4;\n    let z = a.c;\n    let w = (a, a);\n    a.c[1] = q + 3;\n    a.c = [0; 3];\n    a.c = [1, 2, 3];\n    let q = (1, (0, 5), 6);\n    let (q0, (q1, q1b), q2): (u8, (u8, u8), u16) = q;\n    a.a = 2 + 3 + q1;\n    let z;\n    if 1 > 3 {\n        z = 2_u4;\n    } else {\n        z = 5;\n    }\n}\n",
                    concat!(file!(), ":", line!()),
                    vec![],
                ),
        )
    }
}
