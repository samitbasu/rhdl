impl core :: marker :: Copy for Test { } impl Clone for Test { # [inline] fn clone (& self) -> Self { match self { Test :: A => Test :: A , Test :: B => Test :: B , Test :: C => Test :: C , Test :: Unknown => Test :: Unknown , } } } impl rhdl :: core :: Digital for Test { const BITS : usize = 5usize + rhdl :: const_max ! (0_usize , 0_usize , 0_usize , 0_usize) ; const TRACE_BITS : usize = 5usize + rhdl :: const_max ! (0_usize , 0_usize , 0_usize , 0_usize) ; fn static_kind () -> rhdl :: core :: Kind { rhdl :: core :: Kind :: make_enum (concat ! (module_path ! () , "::" , stringify ! (Test)) , vec ! [rhdl :: core :: Kind :: make_variant (stringify ! (A) , rhdl :: core :: Kind :: Empty , 1i64) , rhdl :: core :: Kind :: make_variant (stringify ! (B) , rhdl :: core :: Kind :: Empty , 9i64) , rhdl :: core :: Kind :: make_variant (stringify ! (C) , rhdl :: core :: Kind :: Empty , - 8i64) , rhdl :: core :: Kind :: make_variant (stringify ! (Unknown) , rhdl :: core :: Kind :: Empty , - 7i64)] , rhdl :: core :: Kind :: make_discriminant_layout (5usize , rhdl :: core :: DiscriminantAlignment :: Msb , rhdl :: core :: DiscriminantType :: Signed)) } fn static_trace_type () -> rhdl :: core :: TraceType { rhdl :: rtt :: make_enum (concat ! (module_path ! () , "::" , stringify ! (Test)) , vec ! [rhdl :: rtt :: make_variant (stringify ! (A) , rhdl :: rtt :: TraceType :: Empty , 1i64) , rhdl :: rtt :: make_variant (stringify ! (B) , rhdl :: rtt :: TraceType :: Empty , 9i64) , rhdl :: rtt :: make_variant (stringify ! (C) , rhdl :: rtt :: TraceType :: Empty , - 8i64) , rhdl :: rtt :: make_variant (stringify ! (Unknown) , rhdl :: rtt :: TraceType :: Empty , - 7i64)] , rhdl :: rtt :: make_discriminant_layout (5usize , rhdl :: core :: DiscriminantAlignment :: Msb . into () , rhdl :: core :: DiscriminantType :: Signed . into ())) } fn bin (self) -> Vec < rhdl :: core :: BitX > { let mut raw = match self { Self :: A => { rhdl :: core :: bitx_vec (& rhdl :: bits :: signed :: < U5 > (1i64 as i128) . to_bools ()) } Self :: B => { rhdl :: core :: bitx_vec (& rhdl :: bits :: signed :: < U5 > (9i64 as i128) . to_bools ()) } Self :: C => { rhdl :: core :: bitx_vec (& rhdl :: bits :: signed :: < U5 > (- 8i64 as i128) . to_bools ()) } Self :: Unknown => { rhdl :: core :: bitx_vec (& rhdl :: bits :: signed :: < U5 > (- 7i64 as i128) . to_bools ()) } } ; raw . resize (Self :: BITS , rhdl :: core :: BitX :: Zero) ; rhdl :: core :: move_nbits_to_msb (& raw , 5usize) } fn trace (self) -> Vec < rhdl :: core :: TraceBit > { let mut raw = match self { Self :: A => { rhdl :: bits :: signed :: < U5 > (1i64 as i128) . trace () } Self :: B => { rhdl :: bits :: signed :: < U5 > (9i64 as i128) . trace () } Self :: C => { rhdl :: bits :: signed :: < U5 > (- 8i64 as i128) . trace () } Self :: Unknown => { rhdl :: bits :: signed :: < U5 > (- 7i64 as i128) . trace () } } ; raw . resize (Self :: TRACE_BITS , rhdl :: core :: TraceBit :: Zero) ; rhdl :: core :: move_nbits_to_msb (& raw , 5usize) } fn discriminant (self) -> rhdl :: core :: TypedBits { match self { Self :: A => { rhdl :: bits :: signed :: < U5 > (1i128) . typed_bits () } Self :: B => { rhdl :: bits :: signed :: < U5 > (9i128) . typed_bits () } Self :: C => { rhdl :: bits :: signed :: < U5 > (- 8i128) . typed_bits () } Self :: Unknown => { rhdl :: bits :: signed :: < U5 > (- 7i128) . typed_bits () } } } fn variant_kind (self) -> rhdl :: core :: Kind { match self { Self :: A => { rhdl :: core :: Kind :: Empty } Self :: B => { rhdl :: core :: Kind :: Empty } Self :: C => { rhdl :: core :: Kind :: Empty } Self :: Unknown => { rhdl :: core :: Kind :: Empty } } } fn dont_care () -> Self { < Self as Default > :: default () } }