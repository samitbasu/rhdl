impl core :: marker :: Copy for State { } impl Clone for State { # [inline] fn clone (& self) -> Self { match self { State :: Init => State :: Init , State :: Boot => State :: Boot , State :: Running => State :: Running , State :: Stop => State :: Stop , State :: Boom => State :: Boom , State :: Unknown => State :: Unknown , } } } impl rhdl :: core :: Digital for State { const BITS : usize = 3usize + rhdl :: const_max ! (0_usize , 0_usize , 0_usize , 0_usize , 0_usize , 0_usize) ; const TRACE_BITS : usize = 3usize + rhdl :: const_max ! (0_usize , 0_usize , 0_usize , 0_usize , 0_usize , 0_usize) ; fn static_kind () -> rhdl :: core :: Kind { rhdl :: core :: Kind :: make_enum (concat ! (module_path ! () , "::" , stringify ! (State)) , vec ! [rhdl :: core :: Kind :: make_variant (stringify ! (Init) , rhdl :: core :: Kind :: Empty , 0i64) , rhdl :: core :: Kind :: make_variant (stringify ! (Boot) , rhdl :: core :: Kind :: Empty , 1i64) , rhdl :: core :: Kind :: make_variant (stringify ! (Running) , rhdl :: core :: Kind :: Empty , 2i64) , rhdl :: core :: Kind :: make_variant (stringify ! (Stop) , rhdl :: core :: Kind :: Empty , 3i64) , rhdl :: core :: Kind :: make_variant (stringify ! (Boom) , rhdl :: core :: Kind :: Empty , 4i64) , rhdl :: core :: Kind :: make_variant (stringify ! (Unknown) , rhdl :: core :: Kind :: Empty , 5i64)] , rhdl :: core :: Kind :: make_discriminant_layout (3usize , rhdl :: core :: DiscriminantAlignment :: Msb , rhdl :: core :: DiscriminantType :: Unsigned)) } fn static_trace_type () -> rhdl :: core :: TraceType { rhdl :: rtt :: make_enum (concat ! (module_path ! () , "::" , stringify ! (State)) , vec ! [rhdl :: rtt :: make_variant (stringify ! (Init) , rhdl :: rtt :: TraceType :: Empty , 0i64) , rhdl :: rtt :: make_variant (stringify ! (Boot) , rhdl :: rtt :: TraceType :: Empty , 1i64) , rhdl :: rtt :: make_variant (stringify ! (Running) , rhdl :: rtt :: TraceType :: Empty , 2i64) , rhdl :: rtt :: make_variant (stringify ! (Stop) , rhdl :: rtt :: TraceType :: Empty , 3i64) , rhdl :: rtt :: make_variant (stringify ! (Boom) , rhdl :: rtt :: TraceType :: Empty , 4i64) , rhdl :: rtt :: make_variant (stringify ! (Unknown) , rhdl :: rtt :: TraceType :: Empty , 5i64)] , rhdl :: rtt :: make_discriminant_layout (3usize , rhdl :: core :: DiscriminantAlignment :: Msb . into () , rhdl :: core :: DiscriminantType :: Unsigned . into ())) } fn bin (self) -> Vec < rhdl :: core :: BitX > { let mut raw = match self { Self :: Init => { rhdl :: core :: bitx_vec (& rhdl :: bits :: bits :: < U3 > (0i64 as u128) . to_bools ()) } Self :: Boot => { rhdl :: core :: bitx_vec (& rhdl :: bits :: bits :: < U3 > (1i64 as u128) . to_bools ()) } Self :: Running => { rhdl :: core :: bitx_vec (& rhdl :: bits :: bits :: < U3 > (2i64 as u128) . to_bools ()) } Self :: Stop => { rhdl :: core :: bitx_vec (& rhdl :: bits :: bits :: < U3 > (3i64 as u128) . to_bools ()) } Self :: Boom => { rhdl :: core :: bitx_vec (& rhdl :: bits :: bits :: < U3 > (4i64 as u128) . to_bools ()) } Self :: Unknown => { rhdl :: core :: bitx_vec (& rhdl :: bits :: bits :: < U3 > (5i64 as u128) . to_bools ()) } } ; raw . resize (Self :: BITS , rhdl :: core :: BitX :: Zero) ; rhdl :: core :: move_nbits_to_msb (& raw , 3usize) } fn trace (self) -> Vec < rhdl :: core :: TraceBit > { let mut raw = match self { Self :: Init => { rhdl :: bits :: bits :: < U3 > (0i64 as u128) . trace () } Self :: Boot => { rhdl :: bits :: bits :: < U3 > (1i64 as u128) . trace () } Self :: Running => { rhdl :: bits :: bits :: < U3 > (2i64 as u128) . trace () } Self :: Stop => { rhdl :: bits :: bits :: < U3 > (3i64 as u128) . trace () } Self :: Boom => { rhdl :: bits :: bits :: < U3 > (4i64 as u128) . trace () } Self :: Unknown => { rhdl :: bits :: bits :: < U3 > (5i64 as u128) . trace () } } ; raw . resize (Self :: TRACE_BITS , rhdl :: core :: TraceBit :: Zero) ; rhdl :: core :: move_nbits_to_msb (& raw , 3usize) } fn discriminant (self) -> rhdl :: core :: TypedBits { match self { Self :: Init => { rhdl :: bits :: bits :: < U3 > (0i64 as u128) . typed_bits () } Self :: Boot => { rhdl :: bits :: bits :: < U3 > (1i64 as u128) . typed_bits () } Self :: Running => { rhdl :: bits :: bits :: < U3 > (2i64 as u128) . typed_bits () } Self :: Stop => { rhdl :: bits :: bits :: < U3 > (3i64 as u128) . typed_bits () } Self :: Boom => { rhdl :: bits :: bits :: < U3 > (4i64 as u128) . typed_bits () } Self :: Unknown => { rhdl :: bits :: bits :: < U3 > (5i64 as u128) . typed_bits () } } } fn variant_kind (self) -> rhdl :: core :: Kind { match self { Self :: Init => { rhdl :: core :: Kind :: Empty } Self :: Boot => { rhdl :: core :: Kind :: Empty } Self :: Running => { rhdl :: core :: Kind :: Empty } Self :: Stop => { rhdl :: core :: Kind :: Empty } Self :: Boom => { rhdl :: core :: Kind :: Empty } Self :: Unknown => { rhdl :: core :: Kind :: Empty } } } fn dont_care () -> Self { < Self as Default > :: default () } }