impl core :: marker :: Copy for Test { } impl Clone for Test { # [inline] fn clone (& self) -> Self { match self { Test :: A => Test :: A , Test :: B (a ,) => Test :: B (a . clone () ,) , Test :: C { a , b , } => Test :: C { a : a . clone () , b : b . clone () , } , Test :: Unknown => Test :: Unknown , } } } impl rhdl :: core :: Digital for Test { const BITS : usize = 3usize + rhdl :: const_max ! (0_usize , < Bits :: < 16 > as rhdl :: core :: Digital > :: BITS , < Bits :: < 32 > as rhdl :: core :: Digital > :: BITS + < Bits :: < 8 > as rhdl :: core :: Digital > :: BITS , 0_usize) ; const TRACE_BITS : usize = 3usize + rhdl :: const_max ! (0_usize , < Bits :: < 16 > as rhdl :: core :: Digital > :: TRACE_BITS , < Bits :: < 32 > as rhdl :: core :: Digital > :: TRACE_BITS + < Bits :: < 8 > as rhdl :: core :: Digital > :: TRACE_BITS , 0_usize) ; fn static_kind () -> rhdl :: core :: Kind { rhdl :: core :: Kind :: make_enum (concat ! (module_path ! () , "::" , stringify ! (Test)) , vec ! [rhdl :: core :: Kind :: make_variant (stringify ! (A) , rhdl :: core :: Kind :: Empty , 1i64) , rhdl :: core :: Kind :: make_variant (stringify ! (B) , rhdl :: core :: Kind :: make_tuple (vec ! [< Bits :: < 16 > as rhdl :: core :: Digital > :: static_kind ()]) , 2i64) , rhdl :: core :: Kind :: make_variant (stringify ! (C) , rhdl :: core :: Kind :: make_struct (stringify ! (_Test__C) , vec ! [rhdl :: core :: Kind :: make_field (stringify ! (a) , < Bits :: < 32 > as rhdl :: core :: Digital > :: static_kind ()) , rhdl :: core :: Kind :: make_field (stringify ! (b) , < Bits :: < 8 > as rhdl :: core :: Digital > :: static_kind ())]) , 3i64) , rhdl :: core :: Kind :: make_variant (stringify ! (Unknown) , rhdl :: core :: Kind :: Empty , 4i64)] , rhdl :: core :: Kind :: make_discriminant_layout (3usize , rhdl :: core :: DiscriminantAlignment :: Msb , rhdl :: core :: DiscriminantType :: Unsigned)) } fn static_trace_type () -> rhdl :: core :: TraceType { rhdl :: rtt :: make_enum (concat ! (module_path ! () , "::" , stringify ! (Test)) , vec ! [rhdl :: rtt :: make_variant (stringify ! (A) , rhdl :: rtt :: TraceType :: Empty , 1i64) , rhdl :: rtt :: make_variant (stringify ! (B) , rhdl :: rtt :: make_tuple (vec ! [< Bits :: < 16 > as rhdl :: core :: Digital > :: static_trace_type ()]) , 2i64) , rhdl :: rtt :: make_variant (stringify ! (C) , rhdl :: rtt :: make_struct (stringify ! (_Test__C) , vec ! [rhdl :: rtt :: make_field (stringify ! (a) , < Bits :: < 32 > as rhdl :: core :: Digital > :: static_trace_type ()) , rhdl :: rtt :: make_field (stringify ! (b) , < Bits :: < 8 > as rhdl :: core :: Digital > :: static_trace_type ())]) , 3i64) , rhdl :: rtt :: make_variant (stringify ! (Unknown) , rhdl :: rtt :: TraceType :: Empty , 4i64)] , rhdl :: rtt :: make_discriminant_layout (3usize , rhdl :: core :: DiscriminantAlignment :: Msb . into () , rhdl :: core :: DiscriminantType :: Unsigned . into ())) } fn bin (self) -> Vec < rhdl :: core :: BitX > { let mut raw = match self { Self :: A => { rhdl :: core :: bitx_vec (& rhdl :: bits :: bits :: < U3 > (1i64 as u128) . to_bools ()) } Self :: B (_0) => { let mut v = rhdl :: core :: bitx_vec (& rhdl :: bits :: bits :: < U3 > (2i64 as u128) . to_bools ()) ; v . extend (_0 . bin ()) ; v } Self :: C { a , b } => { let mut v = rhdl :: core :: bitx_vec (& rhdl :: bits :: bits :: < U3 > (3i64 as u128) . to_bools ()) ; v . extend (a . bin ()) ; v . extend (b . bin ()) ; v } Self :: Unknown => { rhdl :: core :: bitx_vec (& rhdl :: bits :: bits :: < U3 > (4i64 as u128) . to_bools ()) } } ; raw . resize (Self :: BITS , rhdl :: core :: BitX :: Zero) ; rhdl :: core :: move_nbits_to_msb (& raw , 3usize) } fn trace (self) -> Vec < rhdl :: core :: TraceBit > { let mut raw = match self { Self :: A => { rhdl :: bits :: bits :: < U3 > (1i64 as u128) . trace () } Self :: B (_0) => { let mut v = rhdl :: bits :: bits :: < U3 > (2i64 as u128) . trace () ; v . extend (_0 . trace ()) ; v } Self :: C { a , b } => { let mut v = rhdl :: bits :: bits :: < U3 > (3i64 as u128) . trace () ; v . extend (a . trace ()) ; v . extend (b . trace ()) ; v } Self :: Unknown => { rhdl :: bits :: bits :: < U3 > (4i64 as u128) . trace () } } ; raw . resize (Self :: TRACE_BITS , rhdl :: core :: TraceBit :: Zero) ; rhdl :: core :: move_nbits_to_msb (& raw , 3usize) } fn discriminant (self) -> rhdl :: core :: TypedBits { match self { Self :: A => { rhdl :: bits :: bits :: < U3 > (1i64 as u128) . typed_bits () } Self :: B (_0) => { rhdl :: bits :: bits :: < U3 > (2i64 as u128) . typed_bits () } Self :: C { a , b } => { rhdl :: bits :: bits :: < U3 > (3i64 as u128) . typed_bits () } Self :: Unknown => { rhdl :: bits :: bits :: < U3 > (4i64 as u128) . typed_bits () } } } fn variant_kind (self) -> rhdl :: core :: Kind { match self { Self :: A => { rhdl :: core :: Kind :: Empty } Self :: B (_0) => { rhdl :: core :: Kind :: make_tuple (vec ! [< Bits :: < 16 > as rhdl :: core :: Digital > :: static_kind ()]) } Self :: C { a , b } => { rhdl :: core :: Kind :: make_struct (stringify ! (_Test__C) , vec ! [rhdl :: core :: Kind :: make_field (stringify ! (a) , < Bits :: < 32 > as rhdl :: core :: Digital > :: static_kind ()) , rhdl :: core :: Kind :: make_field (stringify ! (b) , < Bits :: < 8 > as rhdl :: core :: Digital > :: static_kind ())]) } Self :: Unknown => { rhdl :: core :: Kind :: Empty } } } fn dont_care () -> Self { < Self as Default > :: default () } }