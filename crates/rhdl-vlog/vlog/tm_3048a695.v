// Autogenerated testbench for dut
module testbench();
    wire [43:0] out;
    reg [3:0] arg_0;
    dut t (.out(out),.arg_0(arg_0));
    initial begin
        arg_0 = 4'b0000;
        #0;
        if (44'b00101010100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 44'b00101010100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b0001;
        #0;
        if (44'b00101011100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 44'b00101011100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b0010;
        #0;
        if (44'b00101100100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 44'b00101100100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b0011;
        #0;
        if (44'b00101101100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 44'b00101101100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b0100;
        #0;
        if (44'b00101110100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 4", 44'b00101110100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b0101;
        #0;
        if (44'b00101111100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 5", 44'b00101111100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b0110;
        #0;
        if (44'b00110000100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 6", 44'b00110000100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b0111;
        #0;
        if (44'b00110001100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 7", 44'b00110001100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b1000;
        #0;
        if (44'b00110010100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 8", 44'b00110010100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b1001;
        #0;
        if (44'b00110011100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 9", 44'b00110011100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b1010;
        #0;
        if (44'b00110100100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 10", 44'b00110100100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b1011;
        #0;
        if (44'b00110101100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 11", 44'b00110101100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b1100;
        #0;
        if (44'b00110110100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 12", 44'b00110110100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b1101;
        #0;
        if (44'b00110111100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 13", 44'b00110111100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b1110;
        #0;
        if (44'b00111000100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 14", 44'b00111000100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b1111;
        #0;
        if (44'b00111001100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 15", 44'b00111001100000100001010000000001000000000000, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
endmodule
//
module dut(input wire [3:0] arg_0, output reg [43:0] out);
    reg [0:0] r8;
    reg [0:0] r9;
    reg [0:0] r10;
    reg [0:0] r11;
    reg [0:0] r12;
    reg [0:0] r13;
    reg [0:0] r14;
    reg [0:0] r15;
    reg [0:0] r16;
    reg [0:0] r17;
    reg [0:0] r18;
    reg [0:0] r19;
    always @(*) begin
        r8 = arg_0[0];
        r9 = arg_0[1];
        r10 = arg_0[2];
        r11 = arg_0[3];
        // let k = Rad :: A;
        //
        // let l = Rad::B(bits(1));
        //
        // let c = Rad::C/* binding::Rad */ {x: bits(1), y: bits(2),};
        //
        // let d = MY_SPECIAL_NUMBER;
        //
        // signal((k, l, c, (d + a.val().resize()), ))
        //
        { r19,r18,r17,r16,r15,r14,r13,r12 } = { 1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0 } + { 1'b0, 1'b0, 1'b0, 1'b0, r11, r10, r9, r8 };
        out = { r19, r18, r17, r16, r15, r14, r13, r12, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0 };
    end
endmodule
