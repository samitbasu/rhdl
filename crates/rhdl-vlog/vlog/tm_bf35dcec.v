// Autogenerated testbench for dut
module testbench();
    wire [31:0] out;
    reg [31:0] arg_0;
    dut t (.out(out),.arg_0(arg_0));
    initial begin
        arg_0 = 32'b00000100000000110000001000000001;
        #0;
        if (32'b00000100001010100000001000000001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 32'b00000100001010100000001000000001, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
endmodule
//
module dut(input wire [31:0] arg_0, output reg [31:0] out);
    reg [0:0] r32;
    reg [0:0] r33;
    reg [0:0] r34;
    reg [0:0] r35;
    reg [0:0] r36;
    reg [0:0] r37;
    reg [0:0] r38;
    reg [0:0] r39;
    reg [0:0] r40;
    reg [0:0] r41;
    reg [0:0] r42;
    reg [0:0] r43;
    reg [0:0] r44;
    reg [0:0] r45;
    reg [0:0] r46;
    reg [0:0] r47;
    reg [0:0] r48;
    reg [0:0] r49;
    reg [0:0] r50;
    reg [0:0] r51;
    reg [0:0] r52;
    reg [0:0] r53;
    reg [0:0] r54;
    reg [0:0] r55;
    reg [0:0] r56;
    reg [0:0] r57;
    reg [0:0] r58;
    reg [0:0] r59;
    reg [0:0] r60;
    reg [0:0] r61;
    reg [0:0] r62;
    reg [0:0] r63;
    always @(*) begin
        r32 = arg_0[0];
        r33 = arg_0[1];
        r34 = arg_0[2];
        r35 = arg_0[3];
        r36 = arg_0[4];
        r37 = arg_0[5];
        r38 = arg_0[6];
        r39 = arg_0[7];
        r40 = arg_0[8];
        r41 = arg_0[9];
        r42 = arg_0[10];
        r43 = arg_0[11];
        r44 = arg_0[12];
        r45 = arg_0[13];
        r46 = arg_0[14];
        r47 = arg_0[15];
        r48 = arg_0[16];
        r49 = arg_0[17];
        r50 = arg_0[18];
        r51 = arg_0[19];
        r52 = arg_0[20];
        r53 = arg_0[21];
        r54 = arg_0[22];
        r55 = arg_0[23];
        r56 = arg_0[24];
        r57 = arg_0[25];
        r58 = arg_0[26];
        r59 = arg_0[27];
        r60 = arg_0[28];
        r61 = arg_0[29];
        r62 = arg_0[30];
        r63 = arg_0[31];
        // let a = a.val();
        //
        // a[1 + 1] = bits(42);
        //
        // signal(a)
        //
        out = { r63, r62, r61, r60, r59, r58, r57, r56, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, r47, r46, r45, r44, r43, r42, r41, r40, r39, r38, r37, r36, r35, r34, r33, r32 };
    end
endmodule
