// Autogenerated testbench for dut
module testbench();
    wire [17:0] out;
    reg [23:0] arg_0;
    reg [10:0] arg_1;
    dut t (.out(out),.arg_0(arg_0),.arg_1(arg_1));
    initial begin
        arg_0 = 24'b000000000000001000000001;
        arg_1 = 11'b00000000000;
        #0;
        if (18'b010101001000100001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 18'b010101001000100001, out);
            $finish;
        end
        arg_0 = 24'b000000000000001000000001;
        arg_1 = 11'b11000000000;
        #0;
        if (18'b010101000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 18'b010101000000000000, out);
            $finish;
        end
        arg_0 = 24'b000000000000001000000001;
        arg_1 = 11'b01000100001;
        #0;
        if (18'b010101010000000101 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 18'b010101010000000101, out);
            $finish;
        end
        arg_0 = 24'b000000000000001000000001;
        arg_1 = 11'b10000000011;
        #0;
        if (18'b010101011000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 18'b010101011000000000, out);
            $finish;
        end
        arg_0 = 24'b010000000001001000000001;
        arg_1 = 11'b00000000000;
        #0;
        if (18'b010101001000100001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 4", 18'b010101001000100001, out);
            $finish;
        end
        arg_0 = 24'b010000000001001000000001;
        arg_1 = 11'b11000000000;
        #0;
        if (18'b010101000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 5", 18'b010101000000000000, out);
            $finish;
        end
        arg_0 = 24'b010000000001001000000001;
        arg_1 = 11'b01000100001;
        #0;
        if (18'b010101010000000101 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 6", 18'b010101010000000101, out);
            $finish;
        end
        arg_0 = 24'b010000000001001000000001;
        arg_1 = 11'b10000000011;
        #0;
        if (18'b010101011000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 7", 18'b010101011000000000, out);
            $finish;
        end
        arg_0 = 24'b100000100001001000000001;
        arg_1 = 11'b00000000000;
        #0;
        if (18'b010101001000100001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 8", 18'b010101001000100001, out);
            $finish;
        end
        arg_0 = 24'b100000100001001000000001;
        arg_1 = 11'b11000000000;
        #0;
        if (18'b010101000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 9", 18'b010101000000000000, out);
            $finish;
        end
        arg_0 = 24'b100000100001001000000001;
        arg_1 = 11'b01000100001;
        #0;
        if (18'b010101010000000101 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 10", 18'b010101010000000101, out);
            $finish;
        end
        arg_0 = 24'b100000100001001000000001;
        arg_1 = 11'b10000000011;
        #0;
        if (18'b010101011000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 11", 18'b010101011000000000, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
endmodule
//
module dut(input wire [23:0] arg_0, input wire [10:0] arg_1, output reg [17:0] out);
    reg [0:0] r8;
    reg [0:0] r9;
    reg [0:0] r10;
    reg [0:0] r11;
    reg [0:0] r12;
    reg [0:0] r13;
    reg [0:0] r14;
    reg [0:0] r15;
    reg [0:0] r16;
    reg [0:0] r17;
    reg [0:0] r18;
    reg [0:0] r19;
    reg [0:0] r20;
    reg [0:0] r21;
    reg [0:0] r22;
    reg [0:0] r23;
    reg [0:0] r24;
    reg [0:0] r25;
    reg [0:0] r26;
    reg [0:0] r27;
    reg [0:0] r28;
    reg [0:0] r29;
    reg [0:0] r30;
    reg [0:0] r31;
    reg [0:0] r32;
    reg [0:0] r72;
    reg [0:0] r73;
    reg [0:0] r74;
    reg [0:0] r75;
    reg [0:0] r76;
    reg [0:0] r77;
    reg [0:0] r78;
    reg [0:0] r79;
    reg [0:0] r80;
    reg [0:0] r81;
    reg [0:0] r82;
    reg [0:0] r97;
    reg [0:0] r98;
    reg [0:0] r99;
    reg [0:0] r100;
    reg [0:0] r101;
    reg [0:0] r118;
    reg [0:0] r119;
    reg [0:0] r120;
    reg [0:0] r121;
    reg [0:0] r122;
    reg [0:0] r123;
    reg [0:0] r124;
    reg [0:0] r125;
    reg [0:0] r126;
    reg [0:0] r127;
    reg [0:0] r128;
    reg [0:0] r147;
    reg [0:0] r148;
    reg [0:0] r149;
    reg [0:0] r150;
    reg [0:0] r151;
    reg [0:0] r152;
    reg [0:0] r153;
    reg [0:0] r154;
    reg [0:0] r155;
    reg [0:0] r156;
    reg [0:0] r157;
    reg [0:0] r158;
    reg [0:0] r159;
    reg [0:0] r161;
    reg [0:0] r163;
    always @(*) begin
        r8 = arg_0[0];
        r9 = arg_0[1];
        r10 = arg_0[2];
        r11 = arg_0[3];
        r12 = arg_0[4];
        r13 = arg_0[5];
        r14 = arg_0[6];
        r15 = arg_0[7];
        r16 = arg_0[8];
        r17 = arg_0[9];
        r18 = arg_0[10];
        r19 = arg_0[11];
        r20 = arg_0[12];
        r21 = arg_0[13];
        r22 = arg_0[14];
        r23 = arg_0[15];
        r24 = arg_0[16];
        r25 = arg_0[17];
        r26 = arg_0[18];
        r27 = arg_0[19];
        r28 = arg_0[20];
        r29 = arg_0[21];
        r30 = arg_0[22];
        r31 = arg_0[23];
        r72 = arg_1[0];
        r73 = arg_1[1];
        r74 = arg_1[2];
        r75 = arg_1[3];
        r76 = arg_1[4];
        r77 = arg_1[5];
        r78 = arg_1[6];
        r79 = arg_1[7];
        r80 = arg_1[8];
        r81 = arg_1[9];
        r82 = arg_1[10];
        // let a = a.val();
        //
        // let _z = (a.b, a.a + MY_SPECIAL_NUMBER, );
        //
        // let foo = bits(6);
        //
        // let _foo2 = foo + foo;
        //
        // let _c = a;
        //
        // let q = signed(2);
        //
        // let _q = Foo/* adt::Foo */ {a: bits(1), b: q, c: Rad :: A,};
        //
        // let c = Rad :: A;
        //
        // let _d = c;
        //
        // let _z = fifo(signal(bits(3)), signal(bits(5)));
        //
        // let q = bits(1);
        //
        // let _l = q.any();
        //
        // q |= bits(1 << 3);
        //
        // let _p = (q & bits(1 << 2)).any();
        //
        // let _p = q.as_signed();
        //
        // if a.a > bits(12) {
        //    return signal((NooState :: Boom, bits(3), ));
        // }
        //
        //
        // return signal((NooState :: Boom, bits(3), ));
        //
        // let _e = Rad::B(q);
        //
        // let x1 = bits(4);
        //
        // let y1 = bits(6);
        //
        // let ar = [bits(1), bits(1), bits(3), ];
        //
        // ar[1] = bits(2);
        //
        // let _z: [b4; 3] = ar;
        //
        // let _q = ar[1];
        //
        // let f: [b4; 5] = [bits(1); 5];
        //
        // let _h = f[2];
        //
        // let _k = NooState :: Init;
        //
        // let _f = Rad::C/* adt::Rad */ {y: y1, x: x1,};
        //
        // let d = match s.val() {
        //    const NooState::Init => NooState::Run(bits(1), bits(2)),
        //    NooState::Run(_x, y, )#1_b2 => NooState::Walk/* adt::NooState */ {foo: (y + 3).resize(),},
        //    NooState::Walk {foo: x,}#2_b2 => {
        //       let _q = bits(1) + x;
        //       NooState :: Boom
        //    }
        //    ,
        //    const NooState::Boom => NooState :: Init,
        // };
        //
        // let _q = bits(1) + x;
        //
        // NooState :: Boom
        //
        // let k = 42;
        //
        // signal((d, bits(k), ))
        //
        { r32 } = { r15, r14, r13, r12, r11, r10, r9, r8 } > { 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b0 };
        { r101,r100,r99,r98,r97 } = { r80, r79, r78, r77, r76 } + { 1'b0, 1'b0, 1'b0, 1'b1, 1'b1 };
        case ({ r82, r81 })
            2'b00: r123 = 1'b1;
            2'b01: r123 = 1'b0;
            2'b10: r123 = 1'b0;
            2'b11: r123 = 1'b0;
        endcase
        case ({ r82, r81 })
            2'b00: r124 = 1'b0;
            2'b01: r124 = 1'b0;
            2'b10: r124 = 1'b0;
            2'b11: r124 = 1'b0;
        endcase
        case ({ r82, r81 })
            2'b00: r125 = 1'b0;
            2'b01: r125 = 1'b0;
            2'b10: r125 = 1'b0;
            2'b11: r125 = 1'b0;
        endcase
        case ({ r82, r81 })
            2'b00: r126 = 1'b0;
            2'b01: r126 = 1'b0;
            2'b10: r126 = 1'b0;
            2'b11: r126 = 1'b0;
        endcase
        case ({ r82, r81 })
            2'b00: r127 = 1'b1;
            2'b01: r127 = 1'b0;
            2'b10: r127 = 1'b1;
            2'b11: r127 = 1'b0;
        endcase
        case ({ r82, r81 })
            2'b00: r128 = 1'b0;
            2'b01: r128 = 1'b1;
            2'b10: r128 = 1'b1;
            2'b11: r128 = 1'b0;
        endcase
        r158 = r32 & r32;
        r159 = (r32) ? (r32) : (1'b1);
        r161 = ~(r32);
        r163 = ~(r32);
        case ({ r82, r81 })
            2'b00: r118 = 1'b1;
            2'b01: r118 = r97;
            2'b10: r118 = 1'b0;
            2'b11: r118 = 1'b0;
        endcase
        case ({ r82, r81 })
            2'b00: r119 = 1'b0;
            2'b01: r119 = r98;
            2'b10: r119 = 1'b0;
            2'b11: r119 = 1'b0;
        endcase
        case ({ r82, r81 })
            2'b00: r120 = 1'b0;
            2'b01: r120 = r99;
            2'b10: r120 = 1'b0;
            2'b11: r120 = 1'b0;
        endcase
        case ({ r82, r81 })
            2'b00: r121 = 1'b0;
            2'b01: r121 = r100;
            2'b10: r121 = 1'b0;
            2'b11: r121 = 1'b0;
        endcase
        case ({ r82, r81 })
            2'b00: r122 = 1'b0;
            2'b01: r122 = r101;
            2'b10: r122 = 1'b0;
            2'b11: r122 = 1'b0;
        endcase
        r152 = (r32) ? (1'b0) : (r123);
        r153 = (r32) ? (1'b0) : (r124);
        r154 = (r32) ? (1'b0) : (r125);
        r155 = (r32) ? (1'b0) : (r126);
        r156 = (r32) ? (r32) : (r127);
        r157 = (r32) ? (r32) : (r128);
        r147 = (r32) ? (1'b0) : (r118);
        r148 = (r32) ? (1'b0) : (r119);
        r149 = (r32) ? (1'b0) : (r120);
        r150 = (r32) ? (1'b0) : (r121);
        r151 = (r32) ? (1'b0) : (r122);
        out = { 1'b0, r163, 1'b0, r161, 1'b0, r159, r158, r157, r156, r155, r154, r153, r152, r151, r150, r149, r148, r147 };
    end
endmodule
