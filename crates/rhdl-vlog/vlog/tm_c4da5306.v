// Autogenerated testbench for dut
module testbench();
    wire [11:0] out;
    reg [11:0] arg_0;
    reg [11:0] arg_1;
    dut t (.out(out),.arg_0(arg_0),.arg_1(arg_1));
    initial begin
        arg_0 = 12'b000000000011;
        arg_1 = 12'b000000010001;
        #0;
        if (12'b000000100101 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 12'b000000100101, out);
            $finish;
        end
        arg_0 = 12'b000000000001;
        arg_1 = 12'b000000101010;
        #0;
        if (12'b000001010101 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 12'b000001010101, out);
            $finish;
        end
        arg_0 = 12'b001111101000;
        arg_1 = 12'b000000100000;
        #0;
        if (12'b010000101000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 12'b010000101000, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
endmodule
//
module dut(input wire [11:0] arg_0, input wire [11:0] arg_1, output reg [11:0] out);
    reg [0:0] r0;
    reg [0:0] r1;
    reg [0:0] r2;
    reg [0:0] r3;
    reg [0:0] r4;
    reg [0:0] r5;
    reg [0:0] r6;
    reg [0:0] r7;
    reg [0:0] r8;
    reg [0:0] r9;
    reg [0:0] r10;
    reg [0:0] r11;
    reg [0:0] r12;
    reg [0:0] r13;
    reg [0:0] r14;
    reg [0:0] r15;
    reg [0:0] r16;
    reg [0:0] r17;
    reg [0:0] r18;
    reg [0:0] r19;
    reg [0:0] r20;
    reg [0:0] r21;
    reg [0:0] r22;
    reg [0:0] r23;
    reg [0:0] r24;
    reg [0:0] r25;
    reg [0:0] r26;
    reg [0:0] r27;
    reg [0:0] r28;
    reg [0:0] r29;
    reg [0:0] r30;
    reg [0:0] r31;
    reg [0:0] r32;
    reg [0:0] r33;
    reg [0:0] r34;
    reg [0:0] r35;
    reg [0:0] r36;
    reg [0:0] r37;
    reg [0:0] r38;
    reg [0:0] r39;
    reg [0:0] r40;
    reg [0:0] r41;
    reg [0:0] r42;
    reg [0:0] r43;
    reg [0:0] r44;
    reg [0:0] r45;
    reg [0:0] r46;
    reg [0:0] r47;
    always @(*) begin
        r0 = arg_0[0];
        r1 = arg_0[1];
        r2 = arg_0[2];
        r3 = arg_0[3];
        r4 = arg_0[4];
        r5 = arg_0[5];
        r6 = arg_0[6];
        r7 = arg_0[7];
        r8 = arg_0[8];
        r9 = arg_0[9];
        r10 = arg_0[10];
        r11 = arg_0[11];
        r12 = arg_1[0];
        r13 = arg_1[1];
        r14 = arg_1[2];
        r15 = arg_1[3];
        r16 = arg_1[4];
        r17 = arg_1[5];
        r18 = arg_1[6];
        r19 = arg_1[7];
        r20 = arg_1[8];
        r21 = arg_1[9];
        r22 = arg_1[10];
        r23 = arg_1[11];
        // signal((a.val() + b.val() + b.val()).resize())
        //
        { r35,r34,r33,r32,r31,r30,r29,r28,r27,r26,r25,r24 } = { r11, r10, r9, r8, r7, r6, r5, r4, r3, r2, r1, r0 } + { r23, r22, r21, r20, r19, r18, r17, r16, r15, r14, r13, r12 };
        { r47,r46,r45,r44,r43,r42,r41,r40,r39,r38,r37,r36 } = { r35, r34, r33, r32, r31, r30, r29, r28, r27, r26, r25, r24 } + { r23, r22, r21, r20, r19, r18, r17, r16, r15, r14, r13, r12 };
        out = { r47, r46, r45, r44, r43, r42, r41, r40, r39, r38, r37, r36 };
    end
endmodule
