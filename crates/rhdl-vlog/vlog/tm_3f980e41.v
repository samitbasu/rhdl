// Autogenerated testbench for kernel_foo
module testbench();
    wire [0:0] out;
    reg [0:0] arg_0;
    reg [2:0] arg_1;
    assign out = kernel_foo(arg_1);
    initial begin
        arg_1 = 3'b000;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 1'b1, out);
            $finish;
        end
        arg_1 = 3'b001;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 1'b1, out);
            $finish;
        end
        arg_1 = 3'b010;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 1'b1, out);
            $finish;
        end
        arg_1 = 3'b011;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 1'b1, out);
            $finish;
        end
        arg_1 = 3'b100;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 4", 1'b1, out);
            $finish;
        end
        arg_1 = 3'b101;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 5", 1'b1, out);
            $finish;
        end
        arg_1 = 3'b110;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 6", 1'b1, out);
            $finish;
        end
        arg_1 = 3'b111;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 7", 1'b1, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
    function [0:0] kernel_foo(input reg [2:0] arg_1);
        reg [0:0] or0;
        reg [2:0] or1;
        localparam ol0 = 1'b1;
        begin
            or1 = arg_1;
            // (signal(true), d, )
            //
            or0 = ol0;
            kernel_foo = or0;
        end
    endfunction
endmodule
