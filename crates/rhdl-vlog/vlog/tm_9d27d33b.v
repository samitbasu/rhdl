// Autogenerated testbench for dut
module testbench();
    wire [11:0] out;
    reg [11:0] arg_0;
    reg [3:0] arg_1;
    dut t (.out(out),.arg_0(arg_0),.arg_1(arg_1));
    initial begin
        arg_0 = 12'sb111111010110;
        arg_1 = 4'b0010;
        #0;
        if (12'sb111111110101 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 12'sb111111110101, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
endmodule
//
module dut(input wire [11:0] arg_0, input wire [3:0] arg_1, output reg [11:0] out);
    reg [0:0] r0;
    reg [0:0] r1;
    reg [0:0] r2;
    reg [0:0] r3;
    reg [0:0] r4;
    reg [0:0] r5;
    reg [0:0] r6;
    reg [0:0] r7;
    reg [0:0] r8;
    reg [0:0] r9;
    reg [0:0] r10;
    reg [0:0] r11;
    reg [0:0] r12;
    reg [0:0] r13;
    reg [0:0] r14;
    reg [0:0] r15;
    reg [0:0] r16;
    reg [0:0] r17;
    reg [0:0] r18;
    reg [0:0] r19;
    reg [0:0] r20;
    reg [0:0] r21;
    reg [0:0] r22;
    reg [0:0] r23;
    reg [0:0] r24;
    reg [0:0] r25;
    reg [0:0] r26;
    reg [0:0] r27;
    always @(*) begin
        r0 = arg_0[0];
        r1 = arg_0[1];
        r2 = arg_0[2];
        r3 = arg_0[3];
        r4 = arg_0[4];
        r5 = arg_0[5];
        r6 = arg_0[6];
        r7 = arg_0[7];
        r8 = arg_0[8];
        r9 = arg_0[9];
        r10 = arg_0[10];
        r11 = arg_0[11];
        r12 = arg_1[0];
        r13 = arg_1[1];
        r14 = arg_1[2];
        r15 = arg_1[3];
        // let a = a.val();
        //
        // let b = b.val();
        //
        // signal(a >> b)
        //
        { r27,r26,r25,r24,r23,r22,r21,r20,r19,r18,r17,r16 } = $signed({ r11, r10, r9, r8, r7, r6, r5, r4, r3, r2, r1, r0 }) >>> $signed({ r15, r14, r13, r12 });
        out = { r27, r26, r25, r24, r23, r22, r21, r20, r19, r18, r17, r16 };
    end
endmodule
