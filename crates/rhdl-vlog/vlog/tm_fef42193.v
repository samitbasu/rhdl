// Autogenerated testbench for dut
module testbench();
    wire [0:0] out;
    reg [0:0] arg_0;
    reg [2:0] arg_1;
    dut t (.out(out),.arg_1(arg_1));
    initial begin
        arg_1 = 3'b000;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 1'b1, out);
            $finish;
        end
        arg_1 = 3'b001;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 1'b1, out);
            $finish;
        end
        arg_1 = 3'b010;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 1'b1, out);
            $finish;
        end
        arg_1 = 3'b011;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 1'b1, out);
            $finish;
        end
        arg_1 = 3'b100;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 4", 1'b1, out);
            $finish;
        end
        arg_1 = 3'b101;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 5", 1'b1, out);
            $finish;
        end
        arg_1 = 3'b110;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 6", 1'b1, out);
            $finish;
        end
        arg_1 = 3'b111;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 7", 1'b1, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
endmodule
//
module dut(input wire [2:0] arg_1, output reg [0:0] out);
    reg [0:0] r1;
    reg [0:0] r2;
    reg [0:0] r3;
    initial begin
        r1 = arg_1[0];
        r2 = arg_1[1];
        r3 = arg_1[2];
        // (signal(true), d, )
        //
        out = { 1'b1 };
    end
endmodule
