// Autogenerated testbench for kernel_do_stuff
module testbench();
    wire [0:0] out;
    reg [3:0] arg_0;
    reg [3:0] arg_1;
    assign out = kernel_do_stuff(arg_0, arg_1);
    initial begin
        arg_0 = 4'sb0001;
        arg_1 = 4'sb0001;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 1'b1, out);
            $finish;
        end
        arg_0 = 4'sb0001;
        arg_1 = 4'sb0010;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb0001;
        arg_1 = 4'sb0011;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb0001;
        arg_1 = 4'sb1111;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb0001;
        arg_1 = 4'sb1101;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 4", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb0010;
        arg_1 = 4'sb0001;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 5", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb0010;
        arg_1 = 4'sb0010;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 6", 1'b1, out);
            $finish;
        end
        arg_0 = 4'sb0010;
        arg_1 = 4'sb0011;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 7", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb0010;
        arg_1 = 4'sb1111;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 8", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb0010;
        arg_1 = 4'sb1101;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 9", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb0011;
        arg_1 = 4'sb0001;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 10", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb0011;
        arg_1 = 4'sb0010;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 11", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb0011;
        arg_1 = 4'sb0011;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 12", 1'b1, out);
            $finish;
        end
        arg_0 = 4'sb0011;
        arg_1 = 4'sb1111;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 13", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb0011;
        arg_1 = 4'sb1101;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 14", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb1111;
        arg_1 = 4'sb0001;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 15", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb1111;
        arg_1 = 4'sb0010;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 16", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb1111;
        arg_1 = 4'sb0011;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 17", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb1111;
        arg_1 = 4'sb1111;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 18", 1'b1, out);
            $finish;
        end
        arg_0 = 4'sb1111;
        arg_1 = 4'sb1101;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 19", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb1101;
        arg_1 = 4'sb0001;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 20", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb1101;
        arg_1 = 4'sb0010;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 21", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb1101;
        arg_1 = 4'sb0011;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 22", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb1101;
        arg_1 = 4'sb1111;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 23", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb1101;
        arg_1 = 4'sb1101;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 24", 1'b1, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
    function [0:0] kernel_do_stuff(input reg signed [3:0] arg_0, input reg signed [3:0] arg_1);
        reg [0:0] or0;
        reg signed [3:0] or1;
        reg signed [3:0] or2;
        begin
            or1 = arg_0;
            or2 = arg_1;
            // signal(a == b)
            //
            or0 = or1 == or2;
            kernel_do_stuff = or0;
        end
    endfunction
endmodule
