// Autogenerated testbench for dut
module testbench();
    wire [0:0] out;
    reg [9:0] arg_0;
    reg [0:0] arg_1;
    dut t (.out(out),.arg_0(arg_0),.arg_1(arg_1));
    initial begin
        arg_0 = 10'b0100000011;
        arg_1 = 1'b0;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 1'b0, out);
            $finish;
        end
        arg_0 = 10'b1100000100;
        arg_1 = 1'b1;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 1'b1, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
endmodule
//
module dut(input wire [9:0] arg_0, input wire [0:0] arg_1, output reg [0:0] out);
    reg [0:0] r1;
    reg [0:0] r2;
    reg [0:0] r3;
    reg [0:0] r4;
    reg [0:0] r5;
    reg [0:0] r6;
    reg [0:0] r7;
    reg [0:0] r8;
    reg [0:0] r9;
    reg [0:0] r10;
    reg [0:0] r21;
    reg [0:0] r22;
    reg [0:0] r23;
    always @(*) begin
        r1 = arg_0[0];
        r2 = arg_0[1];
        r3 = arg_0[2];
        r4 = arg_0[3];
        r5 = arg_0[4];
        r6 = arg_0[5];
        r7 = arg_0[6];
        r8 = arg_0[7];
        r9 = arg_0[8];
        r10 = arg_0[9];
        r22 = arg_1[0];
        // signal(c.val() && match a.val() {
        //    Foo::Red(_x, z, )#false => z,
        //    Foo::Green(_x, _z, )#true => true,
        // })
        //
        r21 = (r10) ? (1'b1) : (r9);
        r23 = r22 & r21;
        out = { r23 };
    end
endmodule
