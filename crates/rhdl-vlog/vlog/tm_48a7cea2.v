// Autogenerated testbench for kernel_do_stuff
module testbench();
    wire [0:0] out;
    reg [7:0] arg_0;
    reg [5:0] arg_1;
    assign out = kernel_do_stuff(arg_0, arg_1);
    initial begin
        arg_0 = 8'b00010001;
        arg_1 = 6'b000000;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00010001;
        arg_1 = 6'b001001;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00010001;
        arg_1 = 6'b010010;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00010001;
        arg_1 = 6'b011011;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00010001;
        arg_1 = 6'b100100;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 4", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00010001;
        arg_1 = 6'b101101;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 5", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00010001;
        arg_1 = 6'b110110;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 6", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00010001;
        arg_1 = 6'b111111;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 7", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00100010;
        arg_1 = 6'b000000;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 8", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00100010;
        arg_1 = 6'b001001;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 9", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00100010;
        arg_1 = 6'b010010;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 10", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00100010;
        arg_1 = 6'b011011;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 11", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00100010;
        arg_1 = 6'b100100;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 12", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00100010;
        arg_1 = 6'b101101;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 13", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00100010;
        arg_1 = 6'b110110;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 14", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00100010;
        arg_1 = 6'b111111;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 15", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00110011;
        arg_1 = 6'b000000;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 16", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00110011;
        arg_1 = 6'b001001;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 17", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00110011;
        arg_1 = 6'b010010;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 18", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00110011;
        arg_1 = 6'b011011;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 19", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00110011;
        arg_1 = 6'b100100;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 20", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00110011;
        arg_1 = 6'b101101;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 21", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00110011;
        arg_1 = 6'b110110;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 22", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b00110011;
        arg_1 = 6'b111111;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 23", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11111111;
        arg_1 = 6'b000000;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 24", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11111111;
        arg_1 = 6'b001001;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 25", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11111111;
        arg_1 = 6'b010010;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 26", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11111111;
        arg_1 = 6'b011011;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 27", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11111111;
        arg_1 = 6'b100100;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 28", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11111111;
        arg_1 = 6'b101101;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 29", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11111111;
        arg_1 = 6'b110110;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 30", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11111111;
        arg_1 = 6'b111111;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 31", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11011101;
        arg_1 = 6'b000000;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 32", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11011101;
        arg_1 = 6'b001001;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 33", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11011101;
        arg_1 = 6'b010010;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 34", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11011101;
        arg_1 = 6'b011011;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 35", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11011101;
        arg_1 = 6'b100100;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 36", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11011101;
        arg_1 = 6'b101101;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 37", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11011101;
        arg_1 = 6'b110110;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 38", 1'b1, out);
            $finish;
        end
        arg_0 = 8'b11011101;
        arg_1 = 6'b111111;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 39", 1'b1, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
    function [0:0] kernel_do_stuff(input reg [7:0] arg_0, input reg [5:0] arg_1);
        reg [7:0] or0;
        reg signed [3:0] or1;
        reg [7:0] or2;
        reg [7:0] or3;
        reg [0:0] or4;
        reg [5:0] or5;
        localparam ol0 = 8'b00000000;
        begin
            or0 = arg_0;
            or5 = arg_1;
            // let x = x.val();
            //
            // let y = y.val();
            //
            // let c = x.a;
            //
            or1 = or0[3:0];
            // let _d = (x.a, y.b, );
            //
            // let e = Foo/* ast::Foo<rhdl::rhdl_bits::signed_bits_impl::SignedBits<rhdl::rhdl_typenum::consts::U4>> */ {a: c, b: c,};
            //
            or2 = ol0; or2[3:0] = or1;
            or3 = or2; or3[7:4] = or1;
            // signal(e == x)
            //
            or4 = or3 == or0;
            kernel_do_stuff = or4;
        end
    endfunction
endmodule
