// Autogenerated testbench for dut
module testbench();
    wire [2:0] out;
    reg [0:0] arg_0;
    reg [2:0] arg_1;
    reg [0:0] arg_2;
    dut t (.out(out),.arg_1(arg_1));
    initial begin
        arg_1 = 3'b000;
        #0;
        if (3'b000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 3'b000, out);
            $finish;
        end
        arg_1 = 3'b001;
        #0;
        if (3'b001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 3'b001, out);
            $finish;
        end
        arg_1 = 3'b010;
        #0;
        if (3'b010 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 3'b010, out);
            $finish;
        end
        arg_1 = 3'b011;
        #0;
        if (3'b011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 3'b011, out);
            $finish;
        end
        arg_1 = 3'b100;
        #0;
        if (3'b100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 4", 3'b100, out);
            $finish;
        end
        arg_1 = 3'b101;
        #0;
        if (3'b101 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 5", 3'b101, out);
            $finish;
        end
        arg_1 = 3'b110;
        #0;
        if (3'b110 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 6", 3'b110, out);
            $finish;
        end
        arg_1 = 3'b111;
        #0;
        if (3'b111 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 7", 3'b111, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
endmodule
//
module dut(input wire [2:0] arg_1, output reg [2:0] out);
    reg [0:0] r0;
    reg [0:0] r1;
    reg [0:0] r2;
    always @(*) begin
        r0 = arg_1[0];
        r1 = arg_1[1];
        r2 = arg_1[2];
        // b
        //
        out = { r2, r1, r0 };
    end
endmodule
