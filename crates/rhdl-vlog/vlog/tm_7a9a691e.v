// Autogenerated testbench for dut
module testbench();
    wire [7:0] out;
    reg [23:0] arg_0;
    dut t (.out(out),.arg_0(arg_0));
    initial begin
        arg_0 = 24'b000000100000001100000001;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 8'b00000011, out);
            $finish;
        end
        arg_0 = 24'b000001000000001100000011;
        #0;
        if (8'b00000111 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 8'b00000111, out);
            $finish;
        end
        arg_0 = 24'b000001100000001100000101;
        #0;
        if (8'b00001011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 8'b00001011, out);
            $finish;
        end
        arg_0 = 24'b000010000000001100000111;
        #0;
        if (8'b00001111 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 8'b00001111, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
endmodule
//
module dut(input wire [23:0] arg_0, output reg [7:0] out);
    reg [0:0] r8;
    reg [0:0] r9;
    reg [0:0] r10;
    reg [0:0] r11;
    reg [0:0] r12;
    reg [0:0] r13;
    reg [0:0] r14;
    reg [0:0] r15;
    reg [0:0] r16;
    reg [0:0] r17;
    reg [0:0] r18;
    reg [0:0] r19;
    reg [0:0] r20;
    reg [0:0] r21;
    reg [0:0] r22;
    reg [0:0] r23;
    reg [0:0] r24;
    reg [0:0] r25;
    reg [0:0] r26;
    reg [0:0] r27;
    reg [0:0] r28;
    reg [0:0] r29;
    reg [0:0] r30;
    reg [0:0] r31;
    reg [0:0] r56;
    reg [0:0] r57;
    reg [0:0] r58;
    reg [0:0] r59;
    reg [0:0] r60;
    reg [0:0] r61;
    reg [0:0] r62;
    reg [0:0] r63;
    always @(*) begin
        r8 = arg_0[0];
        r9 = arg_0[1];
        r10 = arg_0[2];
        r11 = arg_0[3];
        r12 = arg_0[4];
        r13 = arg_0[5];
        r14 = arg_0[6];
        r15 = arg_0[7];
        r16 = arg_0[8];
        r17 = arg_0[9];
        r18 = arg_0[10];
        r19 = arg_0[11];
        r20 = arg_0[12];
        r21 = arg_0[13];
        r22 = arg_0[14];
        r23 = arg_0[15];
        r24 = arg_0[16];
        r25 = arg_0[17];
        r26 = arg_0[18];
        r27 = arg_0[19];
        r28 = arg_0[20];
        r29 = arg_0[21];
        r30 = arg_0[22];
        r31 = arg_0[23];
        // let Foo {a: a, b: Bar(_x, y, ),} = state.val();
        //
        // signal((a + y).resize())
        //
        { r63,r62,r61,r60,r59,r58,r57,r56 } = { r15, r14, r13, r12, r11, r10, r9, r8 } + { r31, r30, r29, r28, r27, r26, r25, r24 };
        out = { r63, r62, r61, r60, r59, r58, r57, r56 };
    end
endmodule
