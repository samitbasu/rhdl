// Autogenerated testbench for dut
module testbench();
    wire [7:0] out;
    reg [13:0] arg_0;
    dut t (.out(out),.arg_0(arg_0));
    initial begin
        arg_0 = 14'b00000000000000;
        #0;
        if (8'b00000001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 8'b00000001, out);
            $finish;
        end
        arg_0 = 14'b01000000000001;
        #0;
        if (8'b00000001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 8'b00000001, out);
            $finish;
        end
        arg_0 = 14'b01000000000010;
        #0;
        if (8'b00000010 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 8'b00000010, out);
            $finish;
        end
        arg_0 = 14'b01000000000011;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 8'b00000011, out);
            $finish;
        end
        arg_0 = 14'b10000000100001;
        #0;
        if (8'b00000010 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 4", 8'b00000010, out);
            $finish;
        end
        arg_0 = 14'b10000010010001;
        #0;
        if (8'b00001001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 5", 8'b00001001, out);
            $finish;
        end
        arg_0 = 14'b11000000000000;
        #0;
        if (8'b00000111 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 6", 8'b00000111, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
endmodule
//
module dut(input wire [13:0] arg_0, output reg [7:0] out);
    reg [0:0] r2;
    reg [0:0] r3;
    reg [0:0] r4;
    reg [0:0] r5;
    reg [0:0] r6;
    reg [0:0] r7;
    reg [0:0] r8;
    reg [0:0] r9;
    reg [0:0] r10;
    reg [0:0] r11;
    reg [0:0] r12;
    reg [0:0] r13;
    reg [0:0] r14;
    reg [0:0] r15;
    reg [0:0] r44;
    reg [0:0] r45;
    reg [0:0] r46;
    reg [0:0] r47;
    reg [0:0] r48;
    reg [0:0] r49;
    reg [0:0] r50;
    reg [0:0] r51;
    always @(*) begin
        r2 = arg_0[0];
        r3 = arg_0[1];
        r4 = arg_0[2];
        r5 = arg_0[3];
        r6 = arg_0[4];
        r7 = arg_0[5];
        r8 = arg_0[6];
        r9 = arg_0[7];
        r10 = arg_0[8];
        r11 = arg_0[9];
        r12 = arg_0[10];
        r13 = arg_0[11];
        r14 = arg_0[12];
        r15 = arg_0[13];
        // let x = state.val();
        //
        // signal(match x {
        //    const SimpleEnum::Init => bits(1),
        //    SimpleEnum::Run(x, )#1_b2 => x,
        //    SimpleEnum::Point {x: _, y: y,}#2_b2 => y,
        //    const SimpleEnum::Boom => bits(7),
        // })
        //
        case ({ r15, r14 })
            2'b00: r44 = 1'b1;
            2'b01: r44 = r2;
            2'b10: r44 = r6;
            2'b11: r44 = 1'b1;
        endcase
        case ({ r15, r14 })
            2'b00: r45 = 1'b0;
            2'b01: r45 = r3;
            2'b10: r45 = r7;
            2'b11: r45 = 1'b1;
        endcase
        case ({ r15, r14 })
            2'b00: r46 = 1'b0;
            2'b01: r46 = r4;
            2'b10: r46 = r8;
            2'b11: r46 = 1'b1;
        endcase
        case ({ r15, r14 })
            2'b00: r47 = 1'b0;
            2'b01: r47 = r5;
            2'b10: r47 = r9;
            2'b11: r47 = 1'b0;
        endcase
        case ({ r15, r14 })
            2'b00: r48 = 1'b0;
            2'b01: r48 = r6;
            2'b10: r48 = r10;
            2'b11: r48 = 1'b0;
        endcase
        case ({ r15, r14 })
            2'b00: r49 = 1'b0;
            2'b01: r49 = r7;
            2'b10: r49 = r11;
            2'b11: r49 = 1'b0;
        endcase
        case ({ r15, r14 })
            2'b00: r50 = 1'b0;
            2'b01: r50 = r8;
            2'b10: r50 = r12;
            2'b11: r50 = 1'b0;
        endcase
        case ({ r15, r14 })
            2'b00: r51 = 1'b0;
            2'b01: r51 = r9;
            2'b10: r51 = r13;
            2'b11: r51 = 1'b0;
        endcase
        out = { r51, r50, r49, r48, r47, r46, r45, r44 };
    end
endmodule
