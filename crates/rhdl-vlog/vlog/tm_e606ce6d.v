// Autogenerated testbench for kernel_do_stuff
module testbench();
    wire [2:0] out;
    reg [2:0] arg_0;
    assign out = kernel_do_stuff(arg_0);
    initial begin
        arg_0 = 3'b110;
        #0;
        if (3'b100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 3'b100, out);
            $finish;
        end
        arg_0 = 3'b100;
        #0;
        if (3'b101 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 3'b101, out);
            $finish;
        end
        arg_0 = 3'b101;
        #0;
        if (3'b110 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 3'b110, out);
            $finish;
        end
        arg_0 = 3'b000;
        #0;
        if (3'b000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 3'b000, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
    function [2:0] kernel_do_stuff(input reg [2:0] arg_0);
        reg [2:0] or0;
        reg [0:0] or1;
        reg [1:0] or2;
        reg [0:0] or3;
        reg [0:0] or4;
        reg [1:0] or5;
        reg [2:0] or6;
        reg [1:0] or7;
        reg [2:0] or8;
        reg [2:0] or9;
        localparam ol0 = 1'b0;
        localparam ol1 = 2'b01;
        localparam ol2 = 1'b1;
        localparam ol3 = 2'b10;
        localparam ol4 = 1'b1;
        localparam ol5 = 1'b1;
        localparam ol6 = 3'b100;
        localparam ol7 = 1'b0;
        localparam ol8 = 1'b1;
        localparam ol9 = 3'b000;
        begin
            or0 = arg_0;
            // let d = if let Some(resp, )#true = i.val(){
            //    match resp {
            //       Ok((), )#true => Some(ResponseCode :: OKAY),
            //       Err(e, )#false => Some(match e {
            //          const AXI4Error::SLVERR => ResponseCode :: SLVERR,
            //          const AXI4Error::DECERR => ResponseCode :: DECERR,
            //       }),
            //    }
            // }
            //  else {
            //    None()
            // }
            // ;
            //
            or1 = or0[2];
            or2 = or0[1:0];
            // match resp {
            //    Ok((), )#true => Some(ResponseCode :: OKAY),
            //    Err(e, )#false => Some(match e {
            //       const AXI4Error::SLVERR => ResponseCode :: SLVERR,
            //       const AXI4Error::DECERR => ResponseCode :: DECERR,
            //    }),
            // }
            //
            or3 = or2[1];
            or4 = or2[0];
            case (or4)
                1'b0: or5 = ol1;
                1'b1: or5 = ol3;
            endcase
            or7 = or5[1:0];
            or6 = { ol4, or7 };
            case (or3)
                1'b1: or8 = ol6;
                1'b0: or8 = or6;
            endcase
            // None()
            //
            case (or1)
                1'b1: or9 = or8;
                default: or9 = ol9;
            endcase
            // signal(d)
            //
            kernel_do_stuff = or9;
        end
    endfunction
endmodule
