// Autogenerated testbench for dut
module testbench();
    wire [7:0] out;
    reg [15:0] arg_0;
    dut t (.out(out),.arg_0(arg_0));
    initial begin
        arg_0 = 16'b0000000000000000;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 8'b00000011, out);
            $finish;
        end
        arg_0 = 16'b0000000100000000;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 8'b00000011, out);
            $finish;
        end
        arg_0 = 16'b0000001000000000;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 8'b00000011, out);
            $finish;
        end
        arg_0 = 16'b0000001100000000;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 8'b00000011, out);
            $finish;
        end
        arg_0 = 16'b0000000000000001;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 4", 8'b00000011, out);
            $finish;
        end
        arg_0 = 16'b0000000100000001;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 5", 8'b00000011, out);
            $finish;
        end
        arg_0 = 16'b0000001000000001;
        #0;
        if (8'b00000001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 6", 8'b00000001, out);
            $finish;
        end
        arg_0 = 16'b0000001100000001;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 7", 8'b00000011, out);
            $finish;
        end
        arg_0 = 16'b0000000000000010;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 8", 8'b00000011, out);
            $finish;
        end
        arg_0 = 16'b0000000100000010;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 9", 8'b00000011, out);
            $finish;
        end
        arg_0 = 16'b0000001000000010;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 10", 8'b00000011, out);
            $finish;
        end
        arg_0 = 16'b0000001100000010;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 11", 8'b00000011, out);
            $finish;
        end
        arg_0 = 16'b0000000000000011;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 12", 8'b00000011, out);
            $finish;
        end
        arg_0 = 16'b0000000100000011;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 13", 8'b00000011, out);
            $finish;
        end
        arg_0 = 16'b0000001000000011;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 14", 8'b00000011, out);
            $finish;
        end
        arg_0 = 16'b0000001100000011;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 15", 8'b00000011, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
endmodule
//
module dut(input wire [15:0] arg_0, output reg [7:0] out);
    reg [0:0] r0;
    reg [0:0] r1;
    reg [0:0] r2;
    reg [0:0] r3;
    reg [0:0] r4;
    reg [0:0] r5;
    reg [0:0] r6;
    reg [0:0] r7;
    reg [0:0] r128;
    reg [0:0] r129;
    reg [0:0] r130;
    reg [0:0] r131;
    reg [0:0] r132;
    reg [0:0] r133;
    reg [0:0] r134;
    reg [0:0] r135;
    reg [0:0] r136;
    reg [0:0] r137;
    reg [0:0] r138;
    reg [0:0] r139;
    reg [0:0] r140;
    reg [0:0] r141;
    reg [0:0] r142;
    reg [0:0] r143;
    always @(*) begin
        r128 = arg_0[0];
        r129 = arg_0[1];
        r130 = arg_0[2];
        r131 = arg_0[3];
        r132 = arg_0[4];
        r133 = arg_0[5];
        r134 = arg_0[6];
        r135 = arg_0[7];
        r136 = arg_0[8];
        r137 = arg_0[9];
        r138 = arg_0[10];
        r139 = arg_0[11];
        r140 = arg_0[12];
        r141 = arg_0[13];
        r142 = arg_0[14];
        r143 = arg_0[15];
        // let res = match a.val() {
        //    const FOO1 => 1,
        //    const FOO2 => 2,
        //    _ => 3,
        // };
        //
        // signal(bits(res))
        //
        case ({ r143, r142, r141, r140, r139, r138, r137, r136, r135, r134, r133, r132, r131, r130, r129, r128 })
            16'b0000001000000001: r0 = 1'b1;
            16'b0000010000000011: r0 = 1'b0;
            default: r0 = 1'b1;
        endcase
        case ({ r143, r142, r141, r140, r139, r138, r137, r136, r135, r134, r133, r132, r131, r130, r129, r128 })
            16'b0000001000000001: r1 = 1'b0;
            16'b0000010000000011: r1 = 1'b1;
            default: r1 = 1'b1;
        endcase
        case ({ r143, r142, r141, r140, r139, r138, r137, r136, r135, r134, r133, r132, r131, r130, r129, r128 })
            16'b0000001000000001: r2 = 1'b0;
            16'b0000010000000011: r2 = 1'b0;
            default: r2 = 1'b0;
        endcase
        case ({ r143, r142, r141, r140, r139, r138, r137, r136, r135, r134, r133, r132, r131, r130, r129, r128 })
            16'b0000001000000001: r3 = 1'b0;
            16'b0000010000000011: r3 = 1'b0;
            default: r3 = 1'b0;
        endcase
        case ({ r143, r142, r141, r140, r139, r138, r137, r136, r135, r134, r133, r132, r131, r130, r129, r128 })
            16'b0000001000000001: r4 = 1'b0;
            16'b0000010000000011: r4 = 1'b0;
            default: r4 = 1'b0;
        endcase
        case ({ r143, r142, r141, r140, r139, r138, r137, r136, r135, r134, r133, r132, r131, r130, r129, r128 })
            16'b0000001000000001: r5 = 1'b0;
            16'b0000010000000011: r5 = 1'b0;
            default: r5 = 1'b0;
        endcase
        case ({ r143, r142, r141, r140, r139, r138, r137, r136, r135, r134, r133, r132, r131, r130, r129, r128 })
            16'b0000001000000001: r6 = 1'b0;
            16'b0000010000000011: r6 = 1'b0;
            default: r6 = 1'b0;
        endcase
        case ({ r143, r142, r141, r140, r139, r138, r137, r136, r135, r134, r133, r132, r131, r130, r129, r128 })
            16'b0000001000000001: r7 = 1'b0;
            16'b0000010000000011: r7 = 1'b0;
            default: r7 = 1'b0;
        endcase
        out = { r7, r6, r5, r4, r3, r2, r1, r0 };
    end
endmodule
