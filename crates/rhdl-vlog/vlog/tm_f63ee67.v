// Autogenerated testbench for dut
module testbench();
    wire [33:0] out;
    reg [25:0] arg_0;
    dut t (.out(out),.arg_0(arg_0));
    initial begin
        arg_0 = 26'b00000000000000000000000000;
        #0;
        if (34'b0100000011000000100000000100000001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 34'b0100000011000000100000000100000001, out);
            $finish;
        end
        arg_0 = 26'b11000000000000000000000000;
        #0;
        if (34'b0000000000000000000000000000000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 34'b0000000000000000000000000000000011, out);
            $finish;
        end
        arg_0 = 26'b01000000110000001000000001;
        #0;
        if (34'b1000000000000000000000011100000100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 34'b1000000000000000000000011100000100, out);
            $finish;
        end
        arg_0 = 26'b10000000000000000000000100;
        #0;
        if (34'b1100000000000000000000000000000100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 34'b1100000000000000000000000000000100, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
endmodule
//
module dut(input wire [25:0] arg_0, output reg [33:0] out);
    reg [0:0] r2;
    reg [0:0] r3;
    reg [0:0] r4;
    reg [0:0] r5;
    reg [0:0] r6;
    reg [0:0] r7;
    reg [0:0] r8;
    reg [0:0] r9;
    reg [0:0] r10;
    reg [0:0] r11;
    reg [0:0] r12;
    reg [0:0] r13;
    reg [0:0] r14;
    reg [0:0] r15;
    reg [0:0] r16;
    reg [0:0] r17;
    reg [0:0] r18;
    reg [0:0] r19;
    reg [0:0] r20;
    reg [0:0] r21;
    reg [0:0] r22;
    reg [0:0] r23;
    reg [0:0] r24;
    reg [0:0] r25;
    reg [0:0] r26;
    reg [0:0] r27;
    reg [0:0] r76;
    reg [0:0] r77;
    reg [0:0] r78;
    reg [0:0] r79;
    reg [0:0] r80;
    reg [0:0] r81;
    reg [0:0] r82;
    reg [0:0] r83;
    reg [0:0] r92;
    reg [0:0] r93;
    reg [0:0] r94;
    reg [0:0] r95;
    reg [0:0] r96;
    reg [0:0] r97;
    reg [0:0] r98;
    reg [0:0] r99;
    reg [0:0] r100;
    reg [0:0] r101;
    reg [0:0] r102;
    reg [0:0] r103;
    reg [0:0] r104;
    reg [0:0] r105;
    reg [0:0] r106;
    reg [0:0] r107;
    reg [0:0] r108;
    reg [0:0] r109;
    reg [0:0] r110;
    reg [0:0] r111;
    reg [0:0] r112;
    reg [0:0] r113;
    reg [0:0] r114;
    reg [0:0] r115;
    reg [0:0] r116;
    reg [0:0] r117;
    reg [0:0] r118;
    reg [0:0] r119;
    reg [0:0] r120;
    reg [0:0] r121;
    reg [0:0] r122;
    reg [0:0] r123;
    reg [0:0] r124;
    reg [0:0] r125;
    always @(*) begin
        r2 = arg_0[0];
        r3 = arg_0[1];
        r4 = arg_0[2];
        r5 = arg_0[3];
        r6 = arg_0[4];
        r7 = arg_0[5];
        r8 = arg_0[6];
        r9 = arg_0[7];
        r10 = arg_0[8];
        r11 = arg_0[9];
        r12 = arg_0[10];
        r13 = arg_0[11];
        r14 = arg_0[12];
        r15 = arg_0[13];
        r16 = arg_0[14];
        r17 = arg_0[15];
        r18 = arg_0[16];
        r19 = arg_0[17];
        r20 = arg_0[18];
        r21 = arg_0[19];
        r22 = arg_0[20];
        r23 = arg_0[21];
        r24 = arg_0[22];
        r25 = arg_0[23];
        r26 = arg_0[24];
        r27 = arg_0[25];
        // let _y = bits(72);
        //
        // let _foo = bits(32);
        //
        // let a: b8 = bits(0);
        //
        // let d = match s.val() {
        //    const NooState::Init => {
        //       a = bits(1);
        //       NooState::Run(bits(1), bits(2), bits(3))
        //    }
        //    ,
        //    NooState::Walk {foo: x,}#2_b2 => {
        //       a = x;
        //       NooState :: Boom
        //    }
        //    ,
        //    NooState::Run(x, _, y, )#1_b2 => {
        //       a = (x + y).resize();
        //       NooState::Walk/* adt::NooState */ {foo: bits(7),}
        //    }
        //    ,
        //    const NooState::Boom => {
        //       a = (a + 3).resize();
        //       NooState :: Init
        //    }
        //    ,
        // };
        //
        // a = bits(1);
        //
        // NooState::Run(bits(1), bits(2), bits(3))
        //
        // a = x;
        //
        // NooState :: Boom
        //
        // a = (x + y).resize();
        //
        // NooState::Walk/* adt::NooState */ {foo: bits(7),}
        //
        // a = (a + 3).resize();
        //
        // NooState :: Init
        //
        // signal((a, d, ))
        //
        { r83,r82,r81,r80,r79,r78,r77,r76 } = { r9, r8, r7, r6, r5, r4, r3, r2 } + { r25, r24, r23, r22, r21, r20, r19, r18 };
        case ({ r27, r26 })
            2'b00: r100 = 1'b1;
            2'b10: r100 = 1'b0;
            2'b01: r100 = 1'b1;
            2'b11: r100 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r101 = 1'b0;
            2'b10: r101 = 1'b0;
            2'b01: r101 = 1'b1;
            2'b11: r101 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r102 = 1'b0;
            2'b10: r102 = 1'b0;
            2'b01: r102 = 1'b1;
            2'b11: r102 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r103 = 1'b0;
            2'b10: r103 = 1'b0;
            2'b01: r103 = 1'b0;
            2'b11: r103 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r104 = 1'b0;
            2'b10: r104 = 1'b0;
            2'b01: r104 = 1'b0;
            2'b11: r104 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r105 = 1'b0;
            2'b10: r105 = 1'b0;
            2'b01: r105 = 1'b0;
            2'b11: r105 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r106 = 1'b0;
            2'b10: r106 = 1'b0;
            2'b01: r106 = 1'b0;
            2'b11: r106 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r107 = 1'b0;
            2'b10: r107 = 1'b0;
            2'b01: r107 = 1'b0;
            2'b11: r107 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r108 = 1'b0;
            2'b10: r108 = 1'b0;
            2'b01: r108 = 1'b0;
            2'b11: r108 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r109 = 1'b1;
            2'b10: r109 = 1'b0;
            2'b01: r109 = 1'b0;
            2'b11: r109 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r110 = 1'b0;
            2'b10: r110 = 1'b0;
            2'b01: r110 = 1'b0;
            2'b11: r110 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r111 = 1'b0;
            2'b10: r111 = 1'b0;
            2'b01: r111 = 1'b0;
            2'b11: r111 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r112 = 1'b0;
            2'b10: r112 = 1'b0;
            2'b01: r112 = 1'b0;
            2'b11: r112 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r113 = 1'b0;
            2'b10: r113 = 1'b0;
            2'b01: r113 = 1'b0;
            2'b11: r113 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r114 = 1'b0;
            2'b10: r114 = 1'b0;
            2'b01: r114 = 1'b0;
            2'b11: r114 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r115 = 1'b0;
            2'b10: r115 = 1'b0;
            2'b01: r115 = 1'b0;
            2'b11: r115 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r116 = 1'b1;
            2'b10: r116 = 1'b0;
            2'b01: r116 = 1'b0;
            2'b11: r116 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r117 = 1'b1;
            2'b10: r117 = 1'b0;
            2'b01: r117 = 1'b0;
            2'b11: r117 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r118 = 1'b0;
            2'b10: r118 = 1'b0;
            2'b01: r118 = 1'b0;
            2'b11: r118 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r119 = 1'b0;
            2'b10: r119 = 1'b0;
            2'b01: r119 = 1'b0;
            2'b11: r119 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r120 = 1'b0;
            2'b10: r120 = 1'b0;
            2'b01: r120 = 1'b0;
            2'b11: r120 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r121 = 1'b0;
            2'b10: r121 = 1'b0;
            2'b01: r121 = 1'b0;
            2'b11: r121 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r122 = 1'b0;
            2'b10: r122 = 1'b0;
            2'b01: r122 = 1'b0;
            2'b11: r122 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r123 = 1'b0;
            2'b10: r123 = 1'b0;
            2'b01: r123 = 1'b0;
            2'b11: r123 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r124 = 1'b1;
            2'b10: r124 = 1'b1;
            2'b01: r124 = 1'b0;
            2'b11: r124 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r125 = 1'b0;
            2'b10: r125 = 1'b1;
            2'b01: r125 = 1'b1;
            2'b11: r125 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r92 = 1'b1;
            2'b10: r92 = r2;
            2'b01: r92 = r76;
            2'b11: r92 = 1'b1;
        endcase
        case ({ r27, r26 })
            2'b00: r93 = 1'b0;
            2'b10: r93 = r3;
            2'b01: r93 = r77;
            2'b11: r93 = 1'b1;
        endcase
        case ({ r27, r26 })
            2'b00: r94 = 1'b0;
            2'b10: r94 = r4;
            2'b01: r94 = r78;
            2'b11: r94 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r95 = 1'b0;
            2'b10: r95 = r5;
            2'b01: r95 = r79;
            2'b11: r95 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r96 = 1'b0;
            2'b10: r96 = r6;
            2'b01: r96 = r80;
            2'b11: r96 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r97 = 1'b0;
            2'b10: r97 = r7;
            2'b01: r97 = r81;
            2'b11: r97 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r98 = 1'b0;
            2'b10: r98 = r8;
            2'b01: r98 = r82;
            2'b11: r98 = 1'b0;
        endcase
        case ({ r27, r26 })
            2'b00: r99 = 1'b0;
            2'b10: r99 = r9;
            2'b01: r99 = r83;
            2'b11: r99 = 1'b0;
        endcase
        out = { r125, r124, r123, r122, r121, r120, r119, r118, r117, r116, r115, r114, r113, r112, r111, r110, r109, r108, r107, r106, r105, r104, r103, r102, r101, r100, r99, r98, r97, r96, r95, r94, r93, r92 };
    end
endmodule
