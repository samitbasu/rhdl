// Autogenerated testbench for dut
module testbench();
    wire [7:0] out;
    reg [8:0] arg_0;
    dut t (.out(out),.arg_0(arg_0));
    initial begin
        arg_0 = 9'b000000011;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 8'b00000011, out);
            $finish;
        end
        arg_0 = 9'b100000000;
        #0;
        if (8'b00000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 8'b00000000, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
endmodule
//
module dut(input wire [8:0] arg_0, output reg [7:0] out);
    reg [0:0] r1;
    reg [0:0] r2;
    reg [0:0] r3;
    reg [0:0] r4;
    reg [0:0] r5;
    reg [0:0] r6;
    reg [0:0] r7;
    reg [0:0] r8;
    reg [0:0] r9;
    reg [0:0] r18;
    reg [0:0] r19;
    reg [0:0] r20;
    reg [0:0] r21;
    reg [0:0] r22;
    reg [0:0] r23;
    reg [0:0] r24;
    reg [0:0] r25;
    always @(*) begin
        r1 = arg_0[0];
        r2 = arg_0[1];
        r3 = arg_0[2];
        r4 = arg_0[3];
        r5 = arg_0[4];
        r6 = arg_0[5];
        r7 = arg_0[6];
        r8 = arg_0[7];
        r9 = arg_0[8];
        // let a = a.val();
        //
        // let b = if let Foo::Bar(x, )#false = a{
        //    x
        // }
        //  else {
        //    bits(0)
        // }
        // ;
        //
        // x
        //
        // bits(0)
        //
        // signal(b)
        //
        r18 = (r9) ? (1'b0) : (r1);
        r19 = (r9) ? (1'b0) : (r2);
        r20 = (r9) ? (1'b0) : (r3);
        r21 = (r9) ? (1'b0) : (r4);
        r22 = (r9) ? (1'b0) : (r5);
        r23 = (r9) ? (1'b0) : (r6);
        r24 = (r9) ? (1'b0) : (r7);
        r25 = (r9) ? (1'b0) : (r8);
        out = { r25, r24, r23, r22, r21, r20, r19, r18 };
    end
endmodule
