// Autogenerated testbench for dut
module testbench();
    wire [48:0] out;
    reg [21:0] arg_0;
    dut t (.out(out),.arg_0(arg_0));
    initial begin
        arg_0 = 22'b0000100001001000000001;
        #0;
        if (49'b0000100001111000000001010001000010000000100000001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 49'b0000100001111000000001010001000010000000100000001, out);
            $finish;
        end
        arg_0 = 22'b0000100001001000000001;
        #0;
        if (49'b0000100001111000000001010001000010000000100000001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 49'b0000100001111000000001010001000010000000100000001, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
endmodule
//
module dut(input wire [21:0] arg_0, output reg [48:0] out);
    reg [0:0] r49;
    reg [0:0] r50;
    reg [0:0] r51;
    reg [0:0] r52;
    reg [0:0] r53;
    reg [0:0] r54;
    reg [0:0] r55;
    reg [0:0] r56;
    reg [0:0] r57;
    reg [0:0] r58;
    reg [0:0] r59;
    reg [0:0] r60;
    reg [0:0] r61;
    reg [0:0] r62;
    reg [0:0] r63;
    reg [0:0] r64;
    reg [0:0] r65;
    reg [0:0] r66;
    reg [0:0] r67;
    reg [0:0] r68;
    reg [0:0] r69;
    reg [0:0] r70;
    initial begin
        r49 = arg_0[0];
        r50 = arg_0[1];
        r51 = arg_0[2];
        r52 = arg_0[3];
        r53 = arg_0[4];
        r54 = arg_0[5];
        r55 = arg_0[6];
        r56 = arg_0[7];
        r57 = arg_0[8];
        r58 = arg_0[9];
        r59 = arg_0[10];
        r60 = arg_0[11];
        r61 = arg_0[12];
        r62 = arg_0[13];
        r63 = arg_0[14];
        r64 = arg_0[15];
        r65 = arg_0[16];
        r66 = arg_0[17];
        r67 = arg_0[18];
        r68 = arg_0[19];
        r69 = arg_0[20];
        r70 = arg_0[21];
        // let z = (a.val().b, a.val().a, );
        //
        // let _c = a;
        //
        // let q = signed(-2);
        //
        // let c = Rad/* inference::Rad */ {x: bits(1), y: bits(2),};
        //
        // let d = Foo/* inference::Foo */ {a: bits(1), b: q, c: c,};
        //
        // let Foo {a: ar, b: b, c: _,} = d;
        //
        // let q = Bar(bits(1), bits(2));
        //
        // {
        // }
        // ;
        //
        // let x = NooState::Run(bits(1), bits(2));
        //
        // let e = ar;
        //
        // signal((e, ar, x, d, ))
        //
        out = { 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1 };
    end
endmodule
