// Autogenerated testbench for kernel_add
module testbench();
    wire [7:0] out;
    reg [24:0] arg_0;
    assign out = kernel_add(arg_0);
    initial begin
        arg_0 = 25'b1000000100000001100000001;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 8'b00000011, out);
            $finish;
        end
        arg_0 = 25'b1000001000000001100000011;
        #0;
        if (8'b00000111 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 8'b00000111, out);
            $finish;
        end
        arg_0 = 25'b1000001100000001100000101;
        #0;
        if (8'b00001011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 8'b00001011, out);
            $finish;
        end
        arg_0 = 25'b1000010000000001100000111;
        #0;
        if (8'b00001111 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 8'b00001111, out);
            $finish;
        end
        arg_0 = 25'b0000000000000000000000000;
        #0;
        if (8'b00000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 4", 8'b00000000, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
    function [7:0] kernel_add(input reg [24:0] arg_0);
        reg [24:0] or0;
        reg [0:0] or1;
        reg [23:0] or2;
        reg [7:0] or3;
        reg [15:0] or4;
        reg [7:0] or5;
        reg [7:0] or6;
        reg [7:0] or7;
        reg [7:0] or8;
        reg [7:0] or9;
        localparam ol0 = 8'b00000000;
        localparam ol1 = 1'b1;
        begin
            or0 = arg_0;
            // if let Some(Foo {a: a, b: Bar(_x, y, ),}, )#true = state.val(){
            //    signal((a + y).resize())
            // }
            //  else {
            //    signal(bits(0))
            // }
            //
            //
            or1 = or0[24];
            or2 = or0[23:0];
            or3 = or2[7:0];
            or4 = or2[23:8];
            or5 = or4[15:8];
            // signal((a + y).resize())
            //
            or6 = or3 + or5;
            or7 = or6[7:0];
            // signal(bits(0))
            //
            or8 = ol0;
            case (or1)
                1'b1: or9 = or7;
                default: or9 = or8;
            endcase
            kernel_add = or9;
        end
    endfunction
endmodule
