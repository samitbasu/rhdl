// Autogenerated testbench for dut
module testbench();
    wire [3:0] out;
    reg [3:0] arg_0;
    dut t (.out(out),.arg_0(arg_0));
    initial begin
        arg_0 = 4'b0000;
        #0;
        if (4'b1001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 4'b1001, out);
            $finish;
        end
        arg_0 = 4'b0001;
        #0;
        if (4'b1011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 4'b1011, out);
            $finish;
        end
        arg_0 = 4'b0010;
        #0;
        if (4'b1101 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 4'b1101, out);
            $finish;
        end
        arg_0 = 4'b0011;
        #0;
        if (4'b1111 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 4'b1111, out);
            $finish;
        end
        arg_0 = 4'b0100;
        #0;
        if (4'b0001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 4", 4'b0001, out);
            $finish;
        end
        arg_0 = 4'b0101;
        #0;
        if (4'b0011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 5", 4'b0011, out);
            $finish;
        end
        arg_0 = 4'b0110;
        #0;
        if (4'b0101 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 6", 4'b0101, out);
            $finish;
        end
        arg_0 = 4'b0111;
        #0;
        if (4'b0111 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 7", 4'b0111, out);
            $finish;
        end
        arg_0 = 4'b1000;
        #0;
        if (4'b1001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 8", 4'b1001, out);
            $finish;
        end
        arg_0 = 4'b1001;
        #0;
        if (4'b1011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 9", 4'b1011, out);
            $finish;
        end
        arg_0 = 4'b1010;
        #0;
        if (4'b1101 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 10", 4'b1101, out);
            $finish;
        end
        arg_0 = 4'b1011;
        #0;
        if (4'b1111 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 11", 4'b1111, out);
            $finish;
        end
        arg_0 = 4'b1100;
        #0;
        if (4'b0001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 12", 4'b0001, out);
            $finish;
        end
        arg_0 = 4'b1101;
        #0;
        if (4'b0011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 13", 4'b0011, out);
            $finish;
        end
        arg_0 = 4'b1110;
        #0;
        if (4'b0101 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 14", 4'b0101, out);
            $finish;
        end
        arg_0 = 4'b1111;
        #0;
        if (4'b0111 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 15", 4'b0111, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
endmodule
//
module dut(input wire [3:0] arg_0, output reg [3:0] out);
    reg [0:0] r0;
    reg [0:0] r1;
    reg [0:0] r2;
    reg [0:0] r3;
    reg [0:0] r4;
    reg [0:0] r5;
    reg [0:0] r6;
    reg [0:0] r7;
    reg [0:0] r36;
    reg [0:0] r37;
    reg [0:0] r38;
    reg [0:0] r39;
    reg [0:0] r40;
    reg [0:0] r41;
    reg [0:0] r42;
    reg [0:0] r43;
    reg [0:0] r55;
    reg [0:0] r56;
    reg [0:0] r57;
    reg [0:0] r58;
    always @(*) begin
        r0 = arg_0[0];
        r1 = arg_0[1];
        r2 = arg_0[2];
        r3 = arg_0[3];
        // let a = a.val();
        //
        // let b = bits(3);
        //
        // let d = signed(11);
        //
        // let c = b + a;
        //
        // let c = c.resize();
        //
        // let _k = c.any();
        //
        // let h = Tuplo(c, d);
        //
        // let p = h.0;
        //
        // let _q = NooState::Run(c, d);
        //
        // signal(c + add_one(signal(p)).val() + if h.1 > 0 {
        //    1
        // }
        //  else {
        //    2
        // }
        // )
        //
        // add_two(a)
        //
        // signal(a.val() + 2)
        //
        // 1
        //
        // 2
        //
        { r7,r6,r5,r4 } = { 1'b0, 1'b0, 1'b1, 1'b1 } + { r3, r2, r1, r0 };
        { r39,r38,r37,r36 } = { r7, r6, r5, r4 } + { 1'b0, 1'b0, 1'b1, 1'b0 };
        { r43,r42,r41,r40 } = { r7, r6, r5, r4 } + { r39, r38, r37, r36 };
        { r58,r57,r56,r55 } = { r43, r42, r41, r40 } + { 1'b0, 1'b0, 1'b0, 1'b1 };
        out = { r58, r57, r56, r55 };
    end
endmodule
