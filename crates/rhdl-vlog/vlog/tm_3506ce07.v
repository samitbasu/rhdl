// Autogenerated testbench for kernel_do_stuff
module testbench();
    wire [43:0] out;
    reg [3:0] arg_0;
    assign out = kernel_do_stuff(arg_0);
    initial begin
        arg_0 = 4'b0000;
        #0;
        if (44'b00101010100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 44'b00101010100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b0001;
        #0;
        if (44'b00101011100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 44'b00101011100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b0010;
        #0;
        if (44'b00101100100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 44'b00101100100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b0011;
        #0;
        if (44'b00101101100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 44'b00101101100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b0100;
        #0;
        if (44'b00101110100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 4", 44'b00101110100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b0101;
        #0;
        if (44'b00101111100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 5", 44'b00101111100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b0110;
        #0;
        if (44'b00110000100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 6", 44'b00110000100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b0111;
        #0;
        if (44'b00110001100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 7", 44'b00110001100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b1000;
        #0;
        if (44'b00110010100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 8", 44'b00110010100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b1001;
        #0;
        if (44'b00110011100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 9", 44'b00110011100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b1010;
        #0;
        if (44'b00110100100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 10", 44'b00110100100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b1011;
        #0;
        if (44'b00110101100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 11", 44'b00110101100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b1100;
        #0;
        if (44'b00110110100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 12", 44'b00110110100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b1101;
        #0;
        if (44'b00110111100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 13", 44'b00110111100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b1110;
        #0;
        if (44'b00111000100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 14", 44'b00111000100000100001010000000001000000000000, out);
            $finish;
        end
        arg_0 = 4'b1111;
        #0;
        if (44'b00111001100000100001010000000001000000000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 15", 44'b00111001100000100001010000000001000000000000, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
    function [43:0] kernel_do_stuff(input reg [3:0] arg_0);
        reg [3:0] or0;
        reg [7:0] or1;
        reg [7:0] or2;
        reg [43:0] or3;
        localparam ol0 = 8'b00101010;
        localparam ol1 = 12'b000000000000;
        localparam ol2 = 12'b010000000001;
        localparam ol3 = 12'b100000100001;
        begin
            or0 = arg_0;
            // let k = Rad :: A;
            //
            // let l = Rad::B(bits(1));
            //
            // let c = Rad::C/* binding::Rad */ {x: bits(1), y: bits(2),};
            //
            // let d = MY_SPECIAL_NUMBER;
            //
            // signal((k, l, c, (d + a.val().resize()), ))
            //
            or1 = { {4{1'b0}}, or0 };
            or2 = ol0 + or1;
            or3 = { or2, ol3, ol2, ol1 };
            kernel_do_stuff = or3;
        end
    endfunction
endmodule
