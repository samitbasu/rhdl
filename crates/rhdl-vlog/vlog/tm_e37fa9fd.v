// Autogenerated testbench for kernel_get_color
module testbench();
    wire [0:0] out;
    reg [9:0] arg_0;
    reg [0:0] arg_1;
    assign out = kernel_get_color(arg_0, arg_1);
    initial begin
        arg_0 = 10'b0100000011;
        arg_1 = 1'b0;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 1'b0, out);
            $finish;
        end
        arg_0 = 10'b1100000100;
        arg_1 = 1'b1;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 1'b1, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
    function [0:0] kernel_get_color(input reg [9:0] arg_0, input reg [0:0] arg_1);
        reg [0:0] or0;
        reg [9:0] or1;
        reg [0:0] or2;
        reg [8:0] or3;
        reg [0:0] or4;
        reg [0:0] or5;
        reg [0:0] or6;
        localparam ol0 = 1'b0;
        localparam ol1 = 1'b1;
        localparam ol2 = 1'b1;
        begin
            or1 = arg_0;
            or0 = arg_1;
            // signal(c.val() && match a.val() {
            //    Foo::Red(_x, z, )#false => z,
            //    Foo::Green(_x, _z, )#true => true,
            // })
            //
            or2 = or1[9];
            or3 = or1[8:0];
            or4 = or3[8];
            case (or2)
                1'b0: or5 = or4;
                1'b1: or5 = ol2;
            endcase
            or6 = or0 & or5;
            kernel_get_color = or6;
        end
    endfunction
endmodule
