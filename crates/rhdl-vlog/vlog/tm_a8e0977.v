// Autogenerated testbench for kernel_foo
module testbench();
    wire [7:0] out;
    reg [63:0] arg_0;
    reg [2:0] arg_1;
    assign out = kernel_foo(arg_0, arg_1);
    initial begin
        arg_0 = 64'b0110110001101011011010100110100101101000011001110110011001100101;
        arg_1 = 3'b000;
        #0;
        if (8'b01100101 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 8'b01100101, out);
            $finish;
        end
        arg_0 = 64'b0110110001101011011010100110100101101000011001110110011001100101;
        arg_1 = 3'b001;
        #0;
        if (8'b01100110 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 8'b01100110, out);
            $finish;
        end
        arg_0 = 64'b0110110001101011011010100110100101101000011001110110011001100101;
        arg_1 = 3'b010;
        #0;
        if (8'b01100111 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 8'b01100111, out);
            $finish;
        end
        arg_0 = 64'b0110110001101011011010100110100101101000011001110110011001100101;
        arg_1 = 3'b011;
        #0;
        if (8'b01101000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 8'b01101000, out);
            $finish;
        end
        arg_0 = 64'b0110110001101011011010100110100101101000011001110110011001100101;
        arg_1 = 3'b100;
        #0;
        if (8'b01101001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 4", 8'b01101001, out);
            $finish;
        end
        arg_0 = 64'b0110110001101011011010100110100101101000011001110110011001100101;
        arg_1 = 3'b101;
        #0;
        if (8'b01101010 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 5", 8'b01101010, out);
            $finish;
        end
        arg_0 = 64'b0110110001101011011010100110100101101000011001110110011001100101;
        arg_1 = 3'b110;
        #0;
        if (8'b01101011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 6", 8'b01101011, out);
            $finish;
        end
        arg_0 = 64'b0110110001101011011010100110100101101000011001110110011001100101;
        arg_1 = 3'b111;
        #0;
        if (8'b01101100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 7", 8'b01101100, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
    function [7:0] kernel_foo(input reg [63:0] arg_0, input reg [2:0] arg_1);
        reg [63:0] or0;
        reg [2:0] or1;
        reg [7:0] or2;
        reg [7:0] or3;
        reg [7:0] or4;
        reg [7:0] or5;
        reg [7:0] or6;
        reg [7:0] or7;
        reg [7:0] or8;
        reg [7:0] or9;
        reg [7:0] or10;
        localparam ol0 = 3'b000;
        localparam ol1 = 3'b001;
        localparam ol2 = 3'b010;
        localparam ol3 = 3'b011;
        localparam ol4 = 3'b100;
        localparam ol5 = 3'b101;
        localparam ol6 = 3'b110;
        localparam ol7 = 3'b111;
        begin
            or0 = arg_0;
            or1 = arg_1;
            // let a = a.val();
            //
            // signal(a[b])
            //
            or2 = or0[7:0];
            or3 = or0[15:8];
            or4 = or0[23:16];
            or5 = or0[31:24];
            or6 = or0[39:32];
            or7 = or0[47:40];
            or8 = or0[55:48];
            or9 = or0[63:56];
            case (or1)
                3'b000: or10 = or2;
                3'b001: or10 = or3;
                3'b010: or10 = or4;
                3'b011: or10 = or5;
                3'b100: or10 = or6;
                3'b101: or10 = or7;
                3'b110: or10 = or8;
                3'b111: or10 = or9;
            endcase
            kernel_foo = or10;
        end
    endfunction
endmodule
