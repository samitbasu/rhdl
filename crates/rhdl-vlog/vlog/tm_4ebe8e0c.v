// Autogenerated testbench for dut
module testbench();
    wire [2:0] out;
    reg [2:0] arg_0;
    dut t (.out(out),.arg_0(arg_0));
    initial begin
        arg_0 = 3'b110;
        #0;
        if (3'b100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 3'b100, out);
            $finish;
        end
        arg_0 = 3'b100;
        #0;
        if (3'b101 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 3'b101, out);
            $finish;
        end
        arg_0 = 3'b101;
        #0;
        if (3'b110 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 3'b110, out);
            $finish;
        end
        arg_0 = 3'b000;
        #0;
        if (3'b000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 3'b000, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
endmodule
//
module dut(input wire [2:0] arg_0, output reg [2:0] out);
    reg [0:0] r1;
    reg [0:0] r2;
    reg [0:0] r3;
    reg [0:0] r8;
    reg [0:0] r15;
    reg [0:0] r16;
    reg [0:0] r18;
    reg [0:0] r19;
    always @(*) begin
        r1 = arg_0[0];
        r2 = arg_0[1];
        r3 = arg_0[2];
        // let d = if let Some(resp, )#true = i.val(){
        //    match resp {
        //       const Result::Ok(()) => Some(ResponseCode :: OKAY),
        //       Result::Err(e, )#false => Some(err_map(e)),
        //    }
        // }
        //  else {
        //    None()
        // }
        // ;
        //
        // match resp {
        //    const Result::Ok(()) => Some(ResponseCode :: OKAY),
        //    Result::Err(e, )#false => Some(err_map(e)),
        // }
        //
        // match e {
        //    const AXI4Error::SLVERR => ResponseCode :: SLVERR,
        //    const AXI4Error::DECERR => ResponseCode :: DECERR,
        // }
        //
        // None()
        //
        // signal(d)
        //
        r8 = ~(r1);
        r16 = (r2) ? (1'b0) : (r1);
        r15 = (r2) ? (1'b0) : (r8);
        r19 = r3 & r16;
        r18 = r3 & r15;
        out = { r3, r19, r18 };
    end
endmodule
