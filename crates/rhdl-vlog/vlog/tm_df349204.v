// Autogenerated testbench for dut
module testbench();
    wire [3:0] out;
    reg [3:0] arg_0;
    dut t (.out(out),.arg_0(arg_0));
    initial begin
        arg_0 = 4'b0000;
        #0;
        if (4'b0000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 4'b0000, out);
            $finish;
        end
        arg_0 = 4'b0001;
        #0;
        if (4'b0010 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 4'b0010, out);
            $finish;
        end
        arg_0 = 4'b0010;
        #0;
        if (4'b0001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 4'b0001, out);
            $finish;
        end
        arg_0 = 4'b0011;
        #0;
        if (4'b0000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 4'b0000, out);
            $finish;
        end
        arg_0 = 4'b0100;
        #0;
        if (4'b0000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 4", 4'b0000, out);
            $finish;
        end
        arg_0 = 4'b0101;
        #0;
        if (4'b0000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 5", 4'b0000, out);
            $finish;
        end
        arg_0 = 4'b0110;
        #0;
        if (4'b0000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 6", 4'b0000, out);
            $finish;
        end
        arg_0 = 4'b0111;
        #0;
        if (4'b0000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 7", 4'b0000, out);
            $finish;
        end
        arg_0 = 4'b1000;
        #0;
        if (4'b0000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 8", 4'b0000, out);
            $finish;
        end
        arg_0 = 4'b1001;
        #0;
        if (4'b0000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 9", 4'b0000, out);
            $finish;
        end
        arg_0 = 4'b1010;
        #0;
        if (4'b0000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 10", 4'b0000, out);
            $finish;
        end
        arg_0 = 4'b1011;
        #0;
        if (4'b0000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 11", 4'b0000, out);
            $finish;
        end
        arg_0 = 4'b1100;
        #0;
        if (4'b0000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 12", 4'b0000, out);
            $finish;
        end
        arg_0 = 4'b1101;
        #0;
        if (4'b0000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 13", 4'b0000, out);
            $finish;
        end
        arg_0 = 4'b1110;
        #0;
        if (4'b0000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 14", 4'b0000, out);
            $finish;
        end
        arg_0 = 4'b1111;
        #0;
        if (4'b0000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 15", 4'b0000, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
endmodule
//
module dut(input wire [3:0] arg_0, output reg [3:0] out);
    reg [0:0] r0;
    reg [0:0] r1;
    reg [0:0] r2;
    reg [0:0] r3;
    reg [0:0] r4;
    reg [0:0] r5;
    reg [0:0] r6;
    reg [0:0] r7;
    always @(*) begin
        r4 = arg_0[0];
        r5 = arg_0[1];
        r6 = arg_0[2];
        r7 = arg_0[3];
        // signal(match a.val() {
        //    const ONE => TWO,
        //    const TWO => ONE,
        //    _ => ZERO,
        // })
        //
        case ({ r7, r6, r5, r4 })
            4'b0001: r0 = 1'b0;
            4'b0010: r0 = 1'b1;
            default: r0 = 1'b0;
        endcase
        case ({ r7, r6, r5, r4 })
            4'b0001: r1 = 1'b1;
            4'b0010: r1 = 1'b0;
            default: r1 = 1'b0;
        endcase
        case ({ r7, r6, r5, r4 })
            4'b0001: r2 = 1'b0;
            4'b0010: r2 = 1'b0;
            default: r2 = 1'b0;
        endcase
        case ({ r7, r6, r5, r4 })
            4'b0001: r3 = 1'b0;
            4'b0010: r3 = 1'b0;
            default: r3 = 1'b0;
        endcase
        out = { r3, r2, r1, r0 };
    end
endmodule
