// Autogenerated testbench for kernel_foo
module testbench();
    wire [63:0] out;
    reg [63:0] arg_0;
    reg [2:0] arg_1;
    assign out = kernel_foo(arg_0, arg_1);
    initial begin
        arg_0 = 64'b0110110001101011011010100110100101101000011001110110011001100101;
        arg_1 = 3'b000;
        #0;
        if (64'b0110110001101011011010100110100101101000011001110110011000001100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 64'b0110110001101011011010100110100101101000011001110110011000001100, out);
            $finish;
        end
        arg_0 = 64'b0110110001101011011010100110100101101000011001110110011001100101;
        arg_1 = 3'b001;
        #0;
        if (64'b0110110001101011011010100110100101101000011001110010101000001100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 64'b0110110001101011011010100110100101101000011001110010101000001100, out);
            $finish;
        end
        arg_0 = 64'b0110110001101011011010100110100101101000011001110110011001100101;
        arg_1 = 3'b010;
        #0;
        if (64'b0110110001101011011010100110100101101000001010100110011000001100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 64'b0110110001101011011010100110100101101000001010100110011000001100, out);
            $finish;
        end
        arg_0 = 64'b0110110001101011011010100110100101101000011001110110011001100101;
        arg_1 = 3'b011;
        #0;
        if (64'b0110110001101011011010100110100100101010011001110110011000001100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 64'b0110110001101011011010100110100100101010011001110110011000001100, out);
            $finish;
        end
        arg_0 = 64'b0110110001101011011010100110100101101000011001110110011001100101;
        arg_1 = 3'b100;
        #0;
        if (64'b0110110001101011011010100010101001101000011001110110011000001100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 4", 64'b0110110001101011011010100010101001101000011001110110011000001100, out);
            $finish;
        end
        arg_0 = 64'b0110110001101011011010100110100101101000011001110110011001100101;
        arg_1 = 3'b101;
        #0;
        if (64'b0110110001101011001010100110100101101000011001110110011000001100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 5", 64'b0110110001101011001010100110100101101000011001110110011000001100, out);
            $finish;
        end
        arg_0 = 64'b0110110001101011011010100110100101101000011001110110011001100101;
        arg_1 = 3'b110;
        #0;
        if (64'b0110110000101010011010100110100101101000011001110110011000001100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 6", 64'b0110110000101010011010100110100101101000011001110110011000001100, out);
            $finish;
        end
        arg_0 = 64'b0110110001101011011010100110100101101000011001110110011001100101;
        arg_1 = 3'b111;
        #0;
        if (64'b0010101001101011011010100110100101101000011001110110011000001100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 7", 64'b0010101001101011011010100110100101101000011001110110011000001100, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
    function [63:0] kernel_foo(input reg [63:0] arg_0, input reg [2:0] arg_1);
        reg [2:0] or0;
        reg [63:0] or1;
        reg [63:0] or2;  // c
        reg [63:0] or3;
        reg [63:0] or4;
        reg [63:0] or5;
        reg [63:0] or6;
        reg [63:0] or7;
        reg [63:0] or8;
        reg [63:0] or9;
        reg [63:0] or10;
        reg [63:0] or11;  // c
        localparam ol0 = 3'b000;
        localparam ol1 = 3'b001;
        localparam ol2 = 3'b010;
        localparam ol3 = 3'b011;
        localparam ol4 = 3'b100;
        localparam ol5 = 3'b101;
        localparam ol6 = 3'b110;
        localparam ol7 = 3'b111;
        localparam ol8 = 8'b00101010;
        localparam ol9 = 8'b00001100;
        begin
            or1 = arg_0;
            or0 = arg_1;
            // let b = b.val();
            //
            // let c = a.val();
            //
            // c[b] = bits(42);
            //
            or3 = or1; or3[7:0] = ol8;
            or4 = or1; or4[15:8] = ol8;
            or5 = or1; or5[23:16] = ol8;
            or6 = or1; or6[31:24] = ol8;
            or7 = or1; or7[39:32] = ol8;
            or8 = or1; or8[47:40] = ol8;
            or9 = or1; or9[55:48] = ol8;
            or10 = or1; or10[63:56] = ol8;
            case (or0)
                3'b000: or2 = or3;
                3'b001: or2 = or4;
                3'b010: or2 = or5;
                3'b011: or2 = or6;
                3'b100: or2 = or7;
                3'b101: or2 = or8;
                3'b110: or2 = or9;
                3'b111: or2 = or10;
            endcase
            // c[0] = bits(12);
            //
            or11 = or2; or11[7:0] = ol9;
            // signal(c)
            //
            kernel_foo = or11;
        end
    endfunction
endmodule
