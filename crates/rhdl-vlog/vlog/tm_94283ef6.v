// Autogenerated testbench for dut
module testbench();
    wire [31:0] out;
    reg [31:0] arg_0;
    dut t (.out(out),.arg_0(arg_0));
    initial begin
        arg_0 = 32'b00000100000000110000001000000001;
        #0;
        if (32'b00000001000000010000000100000001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 32'b00000001000000010000000100000001, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
endmodule
//
module dut(input wire [31:0] arg_0, output reg [31:0] out);
    reg [0:0] r8;
    reg [0:0] r9;
    reg [0:0] r10;
    reg [0:0] r11;
    reg [0:0] r12;
    reg [0:0] r13;
    reg [0:0] r14;
    reg [0:0] r15;
    reg [0:0] r16;
    reg [0:0] r17;
    reg [0:0] r18;
    reg [0:0] r19;
    reg [0:0] r20;
    reg [0:0] r21;
    reg [0:0] r22;
    reg [0:0] r23;
    reg [0:0] r24;
    reg [0:0] r25;
    reg [0:0] r26;
    reg [0:0] r27;
    reg [0:0] r28;
    reg [0:0] r29;
    reg [0:0] r30;
    reg [0:0] r31;
    reg [0:0] r32;
    reg [0:0] r33;
    reg [0:0] r34;
    reg [0:0] r35;
    reg [0:0] r36;
    reg [0:0] r37;
    reg [0:0] r38;
    reg [0:0] r39;
    always @(*) begin
        r8 = arg_0[0];
        r9 = arg_0[1];
        r10 = arg_0[2];
        r11 = arg_0[3];
        r12 = arg_0[4];
        r13 = arg_0[5];
        r14 = arg_0[6];
        r15 = arg_0[7];
        r16 = arg_0[8];
        r17 = arg_0[9];
        r18 = arg_0[10];
        r19 = arg_0[11];
        r20 = arg_0[12];
        r21 = arg_0[13];
        r22 = arg_0[14];
        r23 = arg_0[15];
        r24 = arg_0[16];
        r25 = arg_0[17];
        r26 = arg_0[18];
        r27 = arg_0[19];
        r28 = arg_0[20];
        r29 = arg_0[21];
        r30 = arg_0[22];
        r31 = arg_0[23];
        r32 = arg_0[24];
        r33 = arg_0[25];
        r34 = arg_0[26];
        r35 = arg_0[27];
        r36 = arg_0[28];
        r37 = arg_0[29];
        r38 = arg_0[30];
        r39 = arg_0[31];
        // let a = a.val();
        //
        // let _g = [a[1]; 5];
        //
        // let c = [a[0]; 4];
        //
        // signal(c)
        //
        out = { r15, r14, r13, r12, r11, r10, r9, r8, r15, r14, r13, r12, r11, r10, r9, r8, r15, r14, r13, r12, r11, r10, r9, r8, r15, r14, r13, r12, r11, r10, r9, r8 };
    end
endmodule
