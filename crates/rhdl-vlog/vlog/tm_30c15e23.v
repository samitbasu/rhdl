// Autogenerated testbench for dut
module testbench();
    wire [7:0] out;
    reg [0:0] arg_0;
    dut t (.out(out),.arg_0(arg_0));
    initial begin
        arg_0 = 1'b0;
        #0;
        if (8'b00000100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 8'b00000100, out);
            $finish;
        end
        arg_0 = 1'b1;
        #0;
        if (8'b00000010 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 8'b00000010, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
endmodule
//
module dut(input wire [0:0] arg_0, output reg [7:0] out);
    reg [0:0] r1;
    reg [0:0] r11;
    reg [0:0] r13;
    always @(*) begin
        r1 = arg_0[0];
        // let a = a.val();
        //
        // let c = bits(0);
        //
        // match a.raw() {
        //    const 0 => c = bits(2),
        //    const 1 => c = bits(3),
        //    _ => {
        //    }
        //    ,
        // }
        //
        // let _d = c;
        //
        // if a.any() {
        //    c = bits(1);
        //    c = bits(2);
        // }
        //  else {
        //    c = bits(3);
        //    c = bits(4);
        //    if a.all() {
        //       c = bits(5);
        //    }
        //
        // }
        //
        //
        // c = bits(1);
        //
        // c = bits(2);
        //
        // c = bits(3);
        //
        // c = bits(4);
        //
        // if a.all() {
        //    c = bits(5);
        // }
        //
        //
        // c = bits(5);
        //
        // let _y = c;
        //
        // signal(c)
        //
        r11 = (r1) ? (1'b0) : (r1);
        r13 = ~(r1);
        out = { 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, r13, r1, r11 };
    end
endmodule
