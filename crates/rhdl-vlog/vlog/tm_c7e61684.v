// Autogenerated testbench for dut
module testbench();
    wire [7:0] out;
    reg [0:0] arg_0;
    dut t (.out(out),.arg_0(arg_0));
    initial begin
        arg_0 = 1'b0;
        #0;
        if (8'sb00000010 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 8'sb00000010, out);
            $finish;
        end
        arg_0 = 1'b1;
        #0;
        if (8'sb00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 8'sb00000011, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
endmodule
//
module dut(input wire [0:0] arg_0, output reg [7:0] out);
    reg [0:0] r0;
    reg [0:0] r1;
    reg [0:0] r2;
    reg [0:0] r3;
    reg [0:0] r4;
    reg [0:0] r5;
    reg [0:0] r6;
    reg [0:0] r7;
    reg [0:0] r8;
    always @(*) begin
        r8 = arg_0[0];
        // let c = signed(0);
        //
        // match a.val().raw() {
        //    const 0 => c = signed(2),
        //    const 1 => c = signed(3),
        //    _ => {
        //    }
        //    ,
        // }
        //
        // signal(c)
        //
        case ({ r8 })
            1'b0: r0 = 1'b0;
            1'b1: r0 = 1'b1;
            default: r0 = 1'b0;
        endcase
        case ({ r8 })
            1'b0: r1 = 1'b1;
            1'b1: r1 = 1'b1;
            default: r1 = 1'b0;
        endcase
        case ({ r8 })
            1'b0: r2 = 1'b0;
            1'b1: r2 = 1'b0;
            default: r2 = 1'b0;
        endcase
        case ({ r8 })
            1'b0: r3 = 1'b0;
            1'b1: r3 = 1'b0;
            default: r3 = 1'b0;
        endcase
        case ({ r8 })
            1'b0: r4 = 1'b0;
            1'b1: r4 = 1'b0;
            default: r4 = 1'b0;
        endcase
        case ({ r8 })
            1'b0: r5 = 1'b0;
            1'b1: r5 = 1'b0;
            default: r5 = 1'b0;
        endcase
        case ({ r8 })
            1'b0: r6 = 1'b0;
            1'b1: r6 = 1'b0;
            default: r6 = 1'b0;
        endcase
        case ({ r8 })
            1'b0: r7 = 1'b0;
            1'b1: r7 = 1'b0;
            default: r7 = 1'b0;
        endcase
        out = { r7, r6, r5, r4, r3, r2, r1, r0 };
    end
endmodule
