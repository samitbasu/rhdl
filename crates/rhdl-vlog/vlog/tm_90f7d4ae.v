// Autogenerated testbench for kernel_add
module testbench();
    wire [7:0] out;
    reg [13:0] arg_0;
    assign out = kernel_add(arg_0);
    initial begin
        arg_0 = 14'b00000000000000;
        #0;
        if (8'b00000001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 8'b00000001, out);
            $finish;
        end
        arg_0 = 14'b01000000000001;
        #0;
        if (8'b00000001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 8'b00000001, out);
            $finish;
        end
        arg_0 = 14'b01000000000101;
        #0;
        if (8'b00000101 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 8'b00000101, out);
            $finish;
        end
        arg_0 = 14'b10000010110111;
        #0;
        if (8'b00001011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 8'b00001011, out);
            $finish;
        end
        arg_0 = 14'b10000011010111;
        #0;
        if (8'b00001101 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 4", 8'b00001101, out);
            $finish;
        end
        arg_0 = 14'b11000000000000;
        #0;
        if (8'b00000111 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 5", 8'b00000111, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
    function [7:0] kernel_add(input reg [13:0] arg_0);
        reg [13:0] or0;
        reg [1:0] or1;
        reg [7:0] or2;
        reg [11:0] or3;
        reg [7:0] or4;
        reg [7:0] or5;
        localparam ol0 = 2'b00;
        localparam ol1 = 8'b00000001;
        localparam ol2 = 2'b01;
        localparam ol3 = 2'b10;
        localparam ol4 = 2'b11;
        localparam ol5 = 8'b00000111;
        begin
            or0 = arg_0;
            // let x = state;
            //
            // signal(match x.val() {
            //    const SimpleEnum::Init => bits(1),
            //    SimpleEnum::Run(x, )#1_b2 => x,
            //    SimpleEnum::Point {x: _, y: y,}#2_b2 => y,
            //    const SimpleEnum::Boom => bits(7),
            // })
            //
            or1 = or0[13:12];
            or2 = or0[7:0];
            or3 = or0[11:0];
            or4 = or3[11:4];
            case (or1)
                2'b00: or5 = ol1;
                2'b01: or5 = or2;
                2'b10: or5 = or4;
                2'b11: or5 = ol5;
            endcase
            kernel_add = or5;
        end
    endfunction
endmodule
