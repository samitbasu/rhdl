// Autogenerated testbench for kernel_foo
module testbench();
    wire [7:0] out;
    reg [8:0] arg_0;
    assign out = kernel_foo(arg_0);
    initial begin
        arg_0 = 9'b000000011;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 8'b00000011, out);
            $finish;
        end
        arg_0 = 9'b100000000;
        #0;
        if (8'b00000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 8'b00000000, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
    function [7:0] kernel_foo(input reg [8:0] arg_0);
        reg [8:0] or0;
        reg [0:0] or1;
        reg [7:0] or2;
        reg [7:0] or3;
        localparam ol0 = 1'b0;
        localparam ol1 = 8'b00000000;
        begin
            or0 = arg_0;
            // let a = a.val();
            //
            // let b = if let Foo::Bar(x, )#false = a{
            //    x
            // }
            //  else {
            //    bits(0)
            // }
            // ;
            //
            or1 = or0[8];
            or2 = or0[7:0];
            // x
            //
            // bits(0)
            //
            case (or1)
                1'b0: or3 = or2;
                default: or3 = ol1;
            endcase
            // signal(b)
            //
            kernel_foo = or3;
        end
    endfunction
endmodule
