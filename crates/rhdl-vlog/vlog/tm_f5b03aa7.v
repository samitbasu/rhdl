// Autogenerated testbench for kernel_do_stuff
module testbench();
    wire [47:0] out;
    reg [47:0] arg_0;
    reg [25:0] arg_1;
    assign out = kernel_do_stuff(arg_0, arg_1);
    initial begin
        arg_0 = 48'b000000110000001000000001000000000000001000000001;
        arg_1 = 26'b00000000000000000000000000;
        #0;
        if (48'b000000110000001000000001000000000000010000000001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 48'b000000110000001000000001000000000000010000000001, out);
            $finish;
        end
        arg_0 = 48'b000000110000001000000001000000000000001000000001;
        arg_1 = 26'b11000000000000000000000000;
        #0;
        if (48'b000000110000001000000001000000000000010000001100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 48'b000000110000001000000001000000000000010000001100, out);
            $finish;
        end
        arg_0 = 48'b000000110000001000000001000000000000001000000001;
        arg_1 = 26'b01000000110000001000000001;
        #0;
        if (48'b000000110000001000000001000000000000010000000100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 48'b000000110000001000000001000000000000010000000100, out);
            $finish;
        end
        arg_0 = 48'b000000110000001000000001000000000000001000000001;
        arg_1 = 26'b10000000000000000000000100;
        #0;
        if (48'b000000110000001000000001000000000000010000000100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 48'b000000110000001000000001000000000000010000000100, out);
            $finish;
        end
        arg_0 = 48'b000001100000010100000100000000000000010100000100;
        arg_1 = 26'b00000000000000000000000000;
        #0;
        if (48'b000000110000001000000001000000000000010000000001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 4", 48'b000000110000001000000001000000000000010000000001, out);
            $finish;
        end
        arg_0 = 48'b000001100000010100000100000000000000010100000100;
        arg_1 = 26'b11000000000000000000000000;
        #0;
        if (48'b000000110000001000000001000000000000010000001100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 5", 48'b000000110000001000000001000000000000010000001100, out);
            $finish;
        end
        arg_0 = 48'b000001100000010100000100000000000000010100000100;
        arg_1 = 26'b01000000110000001000000001;
        #0;
        if (48'b000000110000001000000001000000000000010000000100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 6", 48'b000000110000001000000001000000000000010000000100, out);
            $finish;
        end
        arg_0 = 48'b000001100000010100000100000000000000010100000100;
        arg_1 = 26'b10000000000000000000000100;
        #0;
        if (48'b000000110000001000000001000000000000010000000100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 7", 48'b000000110000001000000001000000000000010000000100, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
    function [47:0] kernel_do_stuff(input reg [47:0] arg_0, input reg [25:0] arg_1);
        reg [47:0] or0;
        reg [25:0] or1;
        reg [47:0] or2;  // a
        reg [47:0] or3;  // a
        reg [47:0] or4;  // a
        reg [47:0] or5;  // a
        reg [47:0] or6;  // a
        reg [47:0] or7;  // a
        reg [47:0] or8;  // a
        reg [47:0] or9;  // a
        reg [1:0] or10;
        reg [47:0] or11;  // a
        reg [7:0] or12;
        reg [47:0] or13;  // a
        reg [23:0] or14;
        reg [7:0] or15;
        reg [7:0] or16;
        reg [7:0] or17;
        reg [7:0] or18;
        reg [47:0] or19;  // a
        reg [7:0] or20;
        reg [7:0] or21;
        reg [7:0] or22;
        reg [47:0] or23;  // a
        reg [47:0] or24;  // a
        localparam ol0 = 8'b00000111;
        localparam ol1 = 24'b000000000000000000000000;
        localparam ol2 = 24'b000000110000001000000001;
        localparam ol3 = 8'b00001100;
        localparam ol4 = 16'b0000000000001101;
        localparam ol5 = 16'b0000000000000001;
        localparam ol6 = 16'b0000000000000100;
        localparam ol7 = 8'b00001001;
        localparam ol8 = 8'b00000001;
        localparam ol9 = 8'b00000011;
        localparam ol10 = 2'b00;
        localparam ol11 = 2'b10;
        localparam ol12 = 2'b01;
        localparam ol13 = 2'b11;
        begin
            or0 = arg_0;
            or1 = arg_1;
            // let _k = {
            //    bits(4) + 6;
            //    bits(6)
            // }
            // ;
            //
            // bits(4) + 6;
            //
            // bits(6)
            //
            // let a: misc::Foo = a.val();
            //
            // let s: misc::NooState = s.val();
            //
            // let _q = if a.a > 0 {
            //    bits(3)
            // }
            //  else {
            //    bits(0)
            // }
            // ;
            //
            // bits(3)
            //
            // bits(0)
            //
            // let y = bits(72);
            //
            // let _t2 = (y, y, );
            //
            // let q: b8 = bits(4);
            //
            // let _z = a.c;
            //
            // let _w = (a, a, );
            //
            // a.c[1] = (q + 3).resize();
            //
            or2 = or0; or2[39:32] = ol0;
            // a.c = [bits(0); 3];
            //
            or3 = or2; or3[47:24] = ol1;
            // a.c = [bits(1), bits(2), bits(3), ];
            //
            or4 = or3; or4[47:24] = ol2;
            // let q = (bits(1), (bits(0), bits(5), ), bits(6), );
            //
            // let (q0, (q1, q1b, ), q2, ): (b8, (b8, b8, ), b16, ) = q;
            //
            // a.a = (2 + 3 + q1 + q0 + q1b + if q2 != 0 {
            //    1
            // }
            //  else {
            //    0
            // }
            // ).resize();
            //
            // 1
            //
            // 0
            //
            or5 = or4; or5[7:0] = ol3;
            // let z;
            //
            // if 1 > 3 {
            //    z = bits(2);
            // }
            //  else {
            //    z = bits(5);
            // }
            //
            //
            // z = bits(2);
            //
            // z = bits(5);
            //
            // a.b = {
            //    7 + 9;
            //    bits(5 + 8)
            // }
            // ;
            //
            // 7 + 9;
            //
            // bits(5 + 8)
            //
            or6 = or5; or6[23:8] = ol4;
            // a.a = if 1 > 3 {
            //    bits(7)
            // }
            //  else {
            //    {
            //       a.b = bits(1);
            //       a.b = bits(4);
            //    }
            //
            //    bits(9)
            // }
            // ;
            //
            // bits(7)
            //
            // {
            //    a.b = bits(1);
            //    a.b = bits(4);
            // }
            //
            //
            // a.b = bits(1);
            //
            or7 = or6; or7[23:8] = ol5;
            // a.b = bits(4);
            //
            or8 = or7; or8[23:8] = ol6;
            // bits(9)
            //
            or9 = or8; or9[7:0] = ol7;
            // let g = 1 > 2;
            //
            // let h = 3 != 4;
            //
            // let _i = g && h;
            //
            // if z == bits(3) {
            //    _i = false;
            // }
            //
            //
            // _i = false;
            //
            // let _c = bits(match z.raw() {
            //    const 4 => 1,
            //    const 1 => 2,
            //    const 2 => 3,
            //    const 3 => {
            //       a.a = bits(4);
            //       4
            //    }
            //    ,
            //    _ => 6,
            // });
            //
            // a.a = bits(4);
            //
            // 4
            //
            // let _d = match s {
            //    const NooState::Init => {
            //       a.a = bits(1);
            //       NooState::Run(bits(1), bits(2), bits(3))
            //    }
            //    ,
            //    NooState::Walk {foo: x,}#2_b2 => {
            //       a.a = x;
            //       NooState :: Boom
            //    }
            //    ,
            //    NooState::Run(x, _t, y, )#1_b2 => {
            //       a.a = (x + y).resize();
            //       NooState::Walk/* misc::NooState */ {foo: bits(7),}
            //    }
            //    ,
            //    const NooState::Boom => {
            //       a.a = (a.a + 3).resize();
            //       NooState :: Init
            //    }
            //    ,
            // };
            //
            or10 = or1[25:24];
            // a.a = bits(1);
            //
            or11 = or9; or11[7:0] = ol8;
            // NooState::Run(bits(1), bits(2), bits(3))
            //
            or12 = or1[7:0];
            // a.a = x;
            //
            or13 = or9; or13[7:0] = or12;
            // NooState :: Boom
            //
            or14 = or1[23:0];
            or15 = or14[7:0];
            or16 = or14[23:16];
            // a.a = (x + y).resize();
            //
            or17 = or15 + or16;
            or18 = or17[7:0];
            or19 = or9; or19[7:0] = or18;
            // NooState::Walk/* misc::NooState */ {foo: bits(7),}
            //
            // a.a = (a.a + 3).resize();
            //
            or20 = or9[7:0];
            or21 = or20 + ol9;
            or22 = or21[7:0];
            or23 = or9; or23[7:0] = or22;
            // NooState :: Init
            //
            case (or10)
                2'b00: or24 = or11;
                2'b10: or24 = or13;
                2'b01: or24 = or19;
                2'b11: or24 = or23;
            endcase
            // signal(a)
            //
            kernel_do_stuff = or24;
        end
    endfunction
endmodule
