// Autogenerated testbench for kernel_do_stuff
module testbench();
    wire [3:0] out;
    reg [3:0] arg_0;
    assign out = kernel_do_stuff(arg_0);
    initial begin
        arg_0 = 4'b0000;
        #0;
        if (4'b0000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 4'b0000, out);
            $finish;
        end
        arg_0 = 4'b0001;
        #0;
        if (4'b0010 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 4'b0010, out);
            $finish;
        end
        arg_0 = 4'b0010;
        #0;
        if (4'b0001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 4'b0001, out);
            $finish;
        end
        arg_0 = 4'b0011;
        #0;
        if (4'b0000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 4'b0000, out);
            $finish;
        end
        arg_0 = 4'b0100;
        #0;
        if (4'b0000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 4", 4'b0000, out);
            $finish;
        end
        arg_0 = 4'b0101;
        #0;
        if (4'b0000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 5", 4'b0000, out);
            $finish;
        end
        arg_0 = 4'b0110;
        #0;
        if (4'b0000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 6", 4'b0000, out);
            $finish;
        end
        arg_0 = 4'b0111;
        #0;
        if (4'b0000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 7", 4'b0000, out);
            $finish;
        end
        arg_0 = 4'b1000;
        #0;
        if (4'b0000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 8", 4'b0000, out);
            $finish;
        end
        arg_0 = 4'b1001;
        #0;
        if (4'b0000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 9", 4'b0000, out);
            $finish;
        end
        arg_0 = 4'b1010;
        #0;
        if (4'b0000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 10", 4'b0000, out);
            $finish;
        end
        arg_0 = 4'b1011;
        #0;
        if (4'b0000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 11", 4'b0000, out);
            $finish;
        end
        arg_0 = 4'b1100;
        #0;
        if (4'b0000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 12", 4'b0000, out);
            $finish;
        end
        arg_0 = 4'b1101;
        #0;
        if (4'b0000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 13", 4'b0000, out);
            $finish;
        end
        arg_0 = 4'b1110;
        #0;
        if (4'b0000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 14", 4'b0000, out);
            $finish;
        end
        arg_0 = 4'b1111;
        #0;
        if (4'b0000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 15", 4'b0000, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
    function [3:0] kernel_do_stuff(input reg [3:0] arg_0);
        reg [3:0] or0;
        reg [3:0] or1;
        localparam ol0 = 4'b0001;
        localparam ol1 = 4'b0010;
        localparam ol2 = 4'b0010;
        localparam ol3 = 4'b0001;
        localparam ol4 = 4'b0000;
        begin
            or0 = arg_0;
            // signal(match a.val() {
            //    const ONE => TWO,
            //    const TWO => ONE,
            //    _ => ZERO,
            // })
            //
            case (or0)
                4'b0001: or1 = ol1;
                4'b0010: or1 = ol3;
                default: or1 = ol4;
            endcase
            kernel_do_stuff = or1;
        end
    endfunction
endmodule
