// Autogenerated testbench for dut
module testbench();
    wire [47:0] out;
    reg [47:0] arg_0;
    reg [25:0] arg_1;
    dut t (.out(out),.arg_0(arg_0),.arg_1(arg_1));
    initial begin
        arg_0 = 48'b000000110000001000000001000000000000001000000001;
        arg_1 = 26'b00000000000000000000000000;
        #0;
        if (48'b000000110000001000000001000000000000010000000001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 48'b000000110000001000000001000000000000010000000001, out);
            $finish;
        end
        arg_0 = 48'b000000110000001000000001000000000000001000000001;
        arg_1 = 26'b11000000000000000000000000;
        #0;
        if (48'b000000110000001000000001000000000000010000001100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 48'b000000110000001000000001000000000000010000001100, out);
            $finish;
        end
        arg_0 = 48'b000000110000001000000001000000000000001000000001;
        arg_1 = 26'b01000000110000001000000001;
        #0;
        if (48'b000000110000001000000001000000000000010000000100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 48'b000000110000001000000001000000000000010000000100, out);
            $finish;
        end
        arg_0 = 48'b000000110000001000000001000000000000001000000001;
        arg_1 = 26'b10000000000000000000000100;
        #0;
        if (48'b000000110000001000000001000000000000010000000100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 48'b000000110000001000000001000000000000010000000100, out);
            $finish;
        end
        arg_0 = 48'b000001100000010100000100000000000000010100000100;
        arg_1 = 26'b00000000000000000000000000;
        #0;
        if (48'b000000110000001000000001000000000000010000000001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 4", 48'b000000110000001000000001000000000000010000000001, out);
            $finish;
        end
        arg_0 = 48'b000001100000010100000100000000000000010100000100;
        arg_1 = 26'b11000000000000000000000000;
        #0;
        if (48'b000000110000001000000001000000000000010000001100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 5", 48'b000000110000001000000001000000000000010000001100, out);
            $finish;
        end
        arg_0 = 48'b000001100000010100000100000000000000010100000100;
        arg_1 = 26'b01000000110000001000000001;
        #0;
        if (48'b000000110000001000000001000000000000010000000100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 6", 48'b000000110000001000000001000000000000010000000100, out);
            $finish;
        end
        arg_0 = 48'b000001100000010100000100000000000000010100000100;
        arg_1 = 26'b10000000000000000000000100;
        #0;
        if (48'b000000110000001000000001000000000000010000000100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 7", 48'b000000110000001000000001000000000000010000000100, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
endmodule
//
module dut(input wire [47:0] arg_0, input wire [25:0] arg_1, output reg [47:0] out);
    reg [0:0] r48;
    reg [0:0] r49;
    reg [0:0] r50;
    reg [0:0] r51;
    reg [0:0] r52;
    reg [0:0] r53;
    reg [0:0] r54;
    reg [0:0] r55;
    reg [0:0] r56;
    reg [0:0] r57;
    reg [0:0] r58;
    reg [0:0] r59;
    reg [0:0] r60;
    reg [0:0] r61;
    reg [0:0] r62;
    reg [0:0] r63;
    reg [0:0] r64;
    reg [0:0] r65;
    reg [0:0] r66;
    reg [0:0] r67;
    reg [0:0] r68;
    reg [0:0] r69;
    reg [0:0] r70;
    reg [0:0] r71;
    reg [0:0] r72;
    reg [0:0] r73;
    reg [0:0] r74;
    reg [0:0] r75;
    reg [0:0] r76;
    reg [0:0] r77;
    reg [0:0] r78;
    reg [0:0] r79;
    reg [0:0] r80;
    reg [0:0] r81;
    reg [0:0] r82;
    reg [0:0] r83;
    reg [0:0] r84;
    reg [0:0] r85;
    reg [0:0] r86;
    reg [0:0] r87;
    reg [0:0] r88;
    reg [0:0] r89;
    reg [0:0] r90;
    reg [0:0] r91;
    reg [0:0] r92;
    reg [0:0] r93;
    reg [0:0] r94;
    reg [0:0] r95;
    reg [0:0] r434;
    reg [0:0] r435;
    reg [0:0] r436;
    reg [0:0] r437;
    reg [0:0] r438;
    reg [0:0] r439;
    reg [0:0] r440;
    reg [0:0] r441;
    reg [0:0] r442;
    reg [0:0] r443;
    reg [0:0] r444;
    reg [0:0] r445;
    reg [0:0] r446;
    reg [0:0] r447;
    reg [0:0] r448;
    reg [0:0] r449;
    reg [0:0] r450;
    reg [0:0] r451;
    reg [0:0] r452;
    reg [0:0] r453;
    reg [0:0] r454;
    reg [0:0] r455;
    reg [0:0] r456;
    reg [0:0] r457;
    reg [0:0] r458;
    reg [0:0] r459;
    reg [0:0] r604;
    reg [0:0] r605;
    reg [0:0] r606;
    reg [0:0] r607;
    reg [0:0] r608;
    reg [0:0] r609;
    reg [0:0] r610;
    reg [0:0] r611;
    reg [0:0] r740;
    reg [0:0] r741;
    reg [0:0] r742;
    reg [0:0] r743;
    reg [0:0] r744;
    reg [0:0] r745;
    reg [0:0] r746;
    reg [0:0] r747;
    reg [0:0] r748;
    reg [0:0] r749;
    reg [0:0] r750;
    reg [0:0] r751;
    reg [0:0] r752;
    reg [0:0] r753;
    reg [0:0] r754;
    reg [0:0] r755;
    reg [0:0] r756;
    reg [0:0] r757;
    reg [0:0] r758;
    reg [0:0] r759;
    reg [0:0] r760;
    reg [0:0] r761;
    reg [0:0] r762;
    reg [0:0] r763;
    reg [0:0] r764;
    reg [0:0] r765;
    reg [0:0] r766;
    reg [0:0] r767;
    reg [0:0] r768;
    reg [0:0] r769;
    reg [0:0] r770;
    reg [0:0] r771;
    reg [0:0] r772;
    reg [0:0] r773;
    reg [0:0] r774;
    reg [0:0] r775;
    reg [0:0] r776;
    reg [0:0] r777;
    reg [0:0] r778;
    reg [0:0] r779;
    reg [0:0] r780;
    reg [0:0] r781;
    reg [0:0] r782;
    reg [0:0] r783;
    reg [0:0] r784;
    reg [0:0] r785;
    reg [0:0] r786;
    reg [0:0] r787;
    always @(*) begin
        r48 = arg_0[0];
        r49 = arg_0[1];
        r50 = arg_0[2];
        r51 = arg_0[3];
        r52 = arg_0[4];
        r53 = arg_0[5];
        r54 = arg_0[6];
        r55 = arg_0[7];
        r56 = arg_0[8];
        r57 = arg_0[9];
        r58 = arg_0[10];
        r59 = arg_0[11];
        r60 = arg_0[12];
        r61 = arg_0[13];
        r62 = arg_0[14];
        r63 = arg_0[15];
        r64 = arg_0[16];
        r65 = arg_0[17];
        r66 = arg_0[18];
        r67 = arg_0[19];
        r68 = arg_0[20];
        r69 = arg_0[21];
        r70 = arg_0[22];
        r71 = arg_0[23];
        r72 = arg_0[24];
        r73 = arg_0[25];
        r74 = arg_0[26];
        r75 = arg_0[27];
        r76 = arg_0[28];
        r77 = arg_0[29];
        r78 = arg_0[30];
        r79 = arg_0[31];
        r80 = arg_0[32];
        r81 = arg_0[33];
        r82 = arg_0[34];
        r83 = arg_0[35];
        r84 = arg_0[36];
        r85 = arg_0[37];
        r86 = arg_0[38];
        r87 = arg_0[39];
        r88 = arg_0[40];
        r89 = arg_0[41];
        r90 = arg_0[42];
        r91 = arg_0[43];
        r92 = arg_0[44];
        r93 = arg_0[45];
        r94 = arg_0[46];
        r95 = arg_0[47];
        r434 = arg_1[0];
        r435 = arg_1[1];
        r436 = arg_1[2];
        r437 = arg_1[3];
        r438 = arg_1[4];
        r439 = arg_1[5];
        r440 = arg_1[6];
        r441 = arg_1[7];
        r442 = arg_1[8];
        r443 = arg_1[9];
        r444 = arg_1[10];
        r445 = arg_1[11];
        r446 = arg_1[12];
        r447 = arg_1[13];
        r448 = arg_1[14];
        r449 = arg_1[15];
        r450 = arg_1[16];
        r451 = arg_1[17];
        r452 = arg_1[18];
        r453 = arg_1[19];
        r454 = arg_1[20];
        r455 = arg_1[21];
        r456 = arg_1[22];
        r457 = arg_1[23];
        r458 = arg_1[24];
        r459 = arg_1[25];
        // let _k = {
        //    bits(4) + 6;
        //    bits(6)
        // }
        // ;
        //
        // bits(4) + 6;
        //
        // bits(6)
        //
        // let a: misc::Foo = a.val();
        //
        // let s: misc::NooState = s.val();
        //
        // let _q = if a.a > 0 {
        //    bits(3)
        // }
        //  else {
        //    bits(0)
        // }
        // ;
        //
        // bits(3)
        //
        // bits(0)
        //
        // let y = bits(72);
        //
        // let _t2 = (y, y, );
        //
        // let q: b8 = bits(4);
        //
        // let _z = a.c;
        //
        // let _w = (a, a, );
        //
        // a.c[1] = (q + 3).resize();
        //
        // a.c = [bits(0); 3];
        //
        // a.c = [bits(1), bits(2), bits(3), ];
        //
        // let q = (bits(1), (bits(0), bits(5), ), bits(6), );
        //
        // let (q0, (q1, q1b, ), q2, ): (b8, (b8, b8, ), b16, ) = q;
        //
        // a.a = (2 + 3 + q1 + q0 + q1b + if q2 != 0 {
        //    1
        // }
        //  else {
        //    0
        // }
        // ).resize();
        //
        // 1
        //
        // 0
        //
        // let z;
        //
        // if 1 > 3 {
        //    z = bits(2);
        // }
        //  else {
        //    z = bits(5);
        // }
        //
        //
        // z = bits(2);
        //
        // z = bits(5);
        //
        // a.b = {
        //    7 + 9;
        //    bits(5 + 8)
        // }
        // ;
        //
        // 7 + 9;
        //
        // bits(5 + 8)
        //
        // a.a = if 1 > 3 {
        //    bits(7)
        // }
        //  else {
        //    {
        //       a.b = bits(1);
        //       a.b = bits(4);
        //    }
        //
        //    bits(9)
        // }
        // ;
        //
        // bits(7)
        //
        // {
        //    a.b = bits(1);
        //    a.b = bits(4);
        // }
        //
        //
        // a.b = bits(1);
        //
        // a.b = bits(4);
        //
        // bits(9)
        //
        // let g = 1 > 2;
        //
        // let h = 3 != 4;
        //
        // let _i = g && h;
        //
        // if z == bits(3) {
        //    _i = false;
        // }
        //
        //
        // _i = false;
        //
        // let _c = bits(match z.raw() {
        //    const 4 => 1,
        //    const 1 => 2,
        //    const 2 => 3,
        //    const 3 => {
        //       a.a = bits(4);
        //       4
        //    }
        //    ,
        //    _ => 6,
        // });
        //
        // a.a = bits(4);
        //
        // 4
        //
        // let _d = match s {
        //    const NooState::Init => {
        //       a.a = bits(1);
        //       NooState::Run(bits(1), bits(2), bits(3))
        //    }
        //    ,
        //    NooState::Walk {foo: x,}#2_b2 => {
        //       a.a = x;
        //       NooState :: Boom
        //    }
        //    ,
        //    NooState::Run(x, _t, y, )#1_b2 => {
        //       a.a = (x + y).resize();
        //       NooState::Walk/* misc::NooState */ {foo: bits(7),}
        //    }
        //    ,
        //    const NooState::Boom => {
        //       a.a = (a.a + 3).resize();
        //       NooState :: Init
        //    }
        //    ,
        // };
        //
        // a.a = bits(1);
        //
        // NooState::Run(bits(1), bits(2), bits(3))
        //
        // a.a = x;
        //
        // NooState :: Boom
        //
        // a.a = (x + y).resize();
        //
        // NooState::Walk/* misc::NooState */ {foo: bits(7),}
        //
        // a.a = (a.a + 3).resize();
        //
        // NooState :: Init
        //
        // signal(a)
        //
        { r611,r610,r609,r608,r607,r606,r605,r604 } = { r441, r440, r439, r438, r437, r436, r435, r434 } + { r457, r456, r455, r454, r453, r452, r451, r450 };
        case ({ r459, r458 })
            2'b00: r748 = 1'b0;
            2'b10: r748 = 1'b0;
            2'b01: r748 = 1'b0;
            2'b11: r748 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r749 = 1'b0;
            2'b10: r749 = 1'b0;
            2'b01: r749 = 1'b0;
            2'b11: r749 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r750 = 1'b1;
            2'b10: r750 = 1'b1;
            2'b01: r750 = 1'b1;
            2'b11: r750 = 1'b1;
        endcase
        case ({ r459, r458 })
            2'b00: r751 = 1'b0;
            2'b10: r751 = 1'b0;
            2'b01: r751 = 1'b0;
            2'b11: r751 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r752 = 1'b0;
            2'b10: r752 = 1'b0;
            2'b01: r752 = 1'b0;
            2'b11: r752 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r753 = 1'b0;
            2'b10: r753 = 1'b0;
            2'b01: r753 = 1'b0;
            2'b11: r753 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r754 = 1'b0;
            2'b10: r754 = 1'b0;
            2'b01: r754 = 1'b0;
            2'b11: r754 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r755 = 1'b0;
            2'b10: r755 = 1'b0;
            2'b01: r755 = 1'b0;
            2'b11: r755 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r756 = 1'b0;
            2'b10: r756 = 1'b0;
            2'b01: r756 = 1'b0;
            2'b11: r756 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r757 = 1'b0;
            2'b10: r757 = 1'b0;
            2'b01: r757 = 1'b0;
            2'b11: r757 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r758 = 1'b0;
            2'b10: r758 = 1'b0;
            2'b01: r758 = 1'b0;
            2'b11: r758 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r759 = 1'b0;
            2'b10: r759 = 1'b0;
            2'b01: r759 = 1'b0;
            2'b11: r759 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r760 = 1'b0;
            2'b10: r760 = 1'b0;
            2'b01: r760 = 1'b0;
            2'b11: r760 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r761 = 1'b0;
            2'b10: r761 = 1'b0;
            2'b01: r761 = 1'b0;
            2'b11: r761 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r762 = 1'b0;
            2'b10: r762 = 1'b0;
            2'b01: r762 = 1'b0;
            2'b11: r762 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r763 = 1'b0;
            2'b10: r763 = 1'b0;
            2'b01: r763 = 1'b0;
            2'b11: r763 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r764 = 1'b1;
            2'b10: r764 = 1'b1;
            2'b01: r764 = 1'b1;
            2'b11: r764 = 1'b1;
        endcase
        case ({ r459, r458 })
            2'b00: r765 = 1'b0;
            2'b10: r765 = 1'b0;
            2'b01: r765 = 1'b0;
            2'b11: r765 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r766 = 1'b0;
            2'b10: r766 = 1'b0;
            2'b01: r766 = 1'b0;
            2'b11: r766 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r767 = 1'b0;
            2'b10: r767 = 1'b0;
            2'b01: r767 = 1'b0;
            2'b11: r767 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r768 = 1'b0;
            2'b10: r768 = 1'b0;
            2'b01: r768 = 1'b0;
            2'b11: r768 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r769 = 1'b0;
            2'b10: r769 = 1'b0;
            2'b01: r769 = 1'b0;
            2'b11: r769 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r770 = 1'b0;
            2'b10: r770 = 1'b0;
            2'b01: r770 = 1'b0;
            2'b11: r770 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r771 = 1'b0;
            2'b10: r771 = 1'b0;
            2'b01: r771 = 1'b0;
            2'b11: r771 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r772 = 1'b0;
            2'b10: r772 = 1'b0;
            2'b01: r772 = 1'b0;
            2'b11: r772 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r773 = 1'b1;
            2'b10: r773 = 1'b1;
            2'b01: r773 = 1'b1;
            2'b11: r773 = 1'b1;
        endcase
        case ({ r459, r458 })
            2'b00: r774 = 1'b0;
            2'b10: r774 = 1'b0;
            2'b01: r774 = 1'b0;
            2'b11: r774 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r775 = 1'b0;
            2'b10: r775 = 1'b0;
            2'b01: r775 = 1'b0;
            2'b11: r775 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r776 = 1'b0;
            2'b10: r776 = 1'b0;
            2'b01: r776 = 1'b0;
            2'b11: r776 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r777 = 1'b0;
            2'b10: r777 = 1'b0;
            2'b01: r777 = 1'b0;
            2'b11: r777 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r778 = 1'b0;
            2'b10: r778 = 1'b0;
            2'b01: r778 = 1'b0;
            2'b11: r778 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r779 = 1'b0;
            2'b10: r779 = 1'b0;
            2'b01: r779 = 1'b0;
            2'b11: r779 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r780 = 1'b1;
            2'b10: r780 = 1'b1;
            2'b01: r780 = 1'b1;
            2'b11: r780 = 1'b1;
        endcase
        case ({ r459, r458 })
            2'b00: r781 = 1'b1;
            2'b10: r781 = 1'b1;
            2'b01: r781 = 1'b1;
            2'b11: r781 = 1'b1;
        endcase
        case ({ r459, r458 })
            2'b00: r782 = 1'b0;
            2'b10: r782 = 1'b0;
            2'b01: r782 = 1'b0;
            2'b11: r782 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r783 = 1'b0;
            2'b10: r783 = 1'b0;
            2'b01: r783 = 1'b0;
            2'b11: r783 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r784 = 1'b0;
            2'b10: r784 = 1'b0;
            2'b01: r784 = 1'b0;
            2'b11: r784 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r785 = 1'b0;
            2'b10: r785 = 1'b0;
            2'b01: r785 = 1'b0;
            2'b11: r785 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r786 = 1'b0;
            2'b10: r786 = 1'b0;
            2'b01: r786 = 1'b0;
            2'b11: r786 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r787 = 1'b0;
            2'b10: r787 = 1'b0;
            2'b01: r787 = 1'b0;
            2'b11: r787 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r740 = 1'b1;
            2'b10: r740 = r434;
            2'b01: r740 = r604;
            2'b11: r740 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r741 = 1'b0;
            2'b10: r741 = r435;
            2'b01: r741 = r605;
            2'b11: r741 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r742 = 1'b0;
            2'b10: r742 = r436;
            2'b01: r742 = r606;
            2'b11: r742 = 1'b1;
        endcase
        case ({ r459, r458 })
            2'b00: r743 = 1'b0;
            2'b10: r743 = r437;
            2'b01: r743 = r607;
            2'b11: r743 = 1'b1;
        endcase
        case ({ r459, r458 })
            2'b00: r744 = 1'b0;
            2'b10: r744 = r438;
            2'b01: r744 = r608;
            2'b11: r744 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r745 = 1'b0;
            2'b10: r745 = r439;
            2'b01: r745 = r609;
            2'b11: r745 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r746 = 1'b0;
            2'b10: r746 = r440;
            2'b01: r746 = r610;
            2'b11: r746 = 1'b0;
        endcase
        case ({ r459, r458 })
            2'b00: r747 = 1'b0;
            2'b10: r747 = r441;
            2'b01: r747 = r611;
            2'b11: r747 = 1'b0;
        endcase
        out = { r787, r786, r785, r784, r783, r782, r781, r780, r779, r778, r777, r776, r775, r774, r773, r772, r771, r770, r769, r768, r767, r766, r765, r764, r763, r762, r761, r760, r759, r758, r757, r756, r755, r754, r753, r752, r751, r750, r749, r748, r747, r746, r745, r744, r743, r742, r741, r740 };
    end
endmodule
