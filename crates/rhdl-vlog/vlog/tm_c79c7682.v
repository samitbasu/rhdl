// Autogenerated testbench for dut
module testbench();
    wire [7:0] out;
    reg [24:0] arg_0;
    dut t (.out(out),.arg_0(arg_0));
    initial begin
        arg_0 = 25'b1000000100000001100000001;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 8'b00000011, out);
            $finish;
        end
        arg_0 = 25'b1000001000000001100000011;
        #0;
        if (8'b00000111 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 8'b00000111, out);
            $finish;
        end
        arg_0 = 25'b1000001100000001100000101;
        #0;
        if (8'b00001011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 8'b00001011, out);
            $finish;
        end
        arg_0 = 25'b1000010000000001100000111;
        #0;
        if (8'b00001111 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 8'b00001111, out);
            $finish;
        end
        arg_0 = 25'b0000000000000000000000000;
        #0;
        if (8'b00000000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 4", 8'b00000000, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
endmodule
//
module dut(input wire [24:0] arg_0, output reg [7:0] out);
    reg [0:0] r1;
    reg [0:0] r2;
    reg [0:0] r3;
    reg [0:0] r4;
    reg [0:0] r5;
    reg [0:0] r6;
    reg [0:0] r7;
    reg [0:0] r8;
    reg [0:0] r9;
    reg [0:0] r10;
    reg [0:0] r11;
    reg [0:0] r12;
    reg [0:0] r13;
    reg [0:0] r14;
    reg [0:0] r15;
    reg [0:0] r16;
    reg [0:0] r17;
    reg [0:0] r18;
    reg [0:0] r19;
    reg [0:0] r20;
    reg [0:0] r21;
    reg [0:0] r22;
    reg [0:0] r23;
    reg [0:0] r24;
    reg [0:0] r25;
    reg [0:0] r82;
    reg [0:0] r83;
    reg [0:0] r84;
    reg [0:0] r85;
    reg [0:0] r86;
    reg [0:0] r87;
    reg [0:0] r88;
    reg [0:0] r89;
    reg [0:0] r106;
    reg [0:0] r107;
    reg [0:0] r108;
    reg [0:0] r109;
    reg [0:0] r110;
    reg [0:0] r111;
    reg [0:0] r112;
    reg [0:0] r113;
    always @(*) begin
        r1 = arg_0[0];
        r2 = arg_0[1];
        r3 = arg_0[2];
        r4 = arg_0[3];
        r5 = arg_0[4];
        r6 = arg_0[5];
        r7 = arg_0[6];
        r8 = arg_0[7];
        r9 = arg_0[8];
        r10 = arg_0[9];
        r11 = arg_0[10];
        r12 = arg_0[11];
        r13 = arg_0[12];
        r14 = arg_0[13];
        r15 = arg_0[14];
        r16 = arg_0[15];
        r17 = arg_0[16];
        r18 = arg_0[17];
        r19 = arg_0[18];
        r20 = arg_0[19];
        r21 = arg_0[20];
        r22 = arg_0[21];
        r23 = arg_0[22];
        r24 = arg_0[23];
        r25 = arg_0[24];
        // if let Some(Foo {a: a, b: Bar(_x, y, ),}, )#true = state.val(){
        //    signal((a + y).resize())
        // }
        //  else {
        //    signal(bits(0))
        // }
        //
        //
        // signal((a + y).resize())
        //
        // signal(bits(0))
        //
        { r89,r88,r87,r86,r85,r84,r83,r82 } = { r8, r7, r6, r5, r4, r3, r2, r1 } + { r24, r23, r22, r21, r20, r19, r18, r17 };
        r106 = r25 & r82;
        r107 = r25 & r83;
        r108 = r25 & r84;
        r109 = r25 & r85;
        r110 = r25 & r86;
        r111 = r25 & r87;
        r112 = r25 & r88;
        r113 = r25 & r89;
        out = { r113, r112, r111, r110, r109, r108, r107, r106 };
    end
endmodule
