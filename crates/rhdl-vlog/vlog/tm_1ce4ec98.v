// Autogenerated testbench for kernel_add
module testbench();
    wire [11:0] out;
    reg [11:0] arg_0;
    reg [11:0] arg_1;
    assign out = kernel_add(arg_0, arg_1);
    initial begin
        arg_0 = 12'b000000000011;
        arg_1 = 12'b000000010001;
        #0;
        if (12'b000000100101 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 12'b000000100101, out);
            $finish;
        end
        arg_0 = 12'b000000000001;
        arg_1 = 12'b000000101010;
        #0;
        if (12'b000001010101 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 12'b000001010101, out);
            $finish;
        end
        arg_0 = 12'b001111101000;
        arg_1 = 12'b000000100000;
        #0;
        if (12'b010000101000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 12'b010000101000, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
    function [11:0] kernel_add(input reg [11:0] arg_0, input reg [11:0] arg_1);
        reg [11:0] or0;
        reg [11:0] or1;
        reg [11:0] or2;
        reg [11:0] or3;
        reg [11:0] or4;
        begin
            or0 = arg_0;
            or1 = arg_1;
            // signal((a.val() + b.val() + b.val()).resize())
            //
            or2 = or0 + or1;
            or3 = or2 + or1;
            or4 = or3[11:0];
            kernel_add = or4;
        end
    endfunction
endmodule
