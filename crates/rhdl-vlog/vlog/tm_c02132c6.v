// Autogenerated testbench for kernel_do_stuff
module testbench();
    wire [6:0] out;
    reg [4:0] arg_0;
    assign out = kernel_do_stuff(arg_0);
    initial begin
        arg_0 = 5'b11100;
        #0;
        if (7'b1001100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 7'b1001100, out);
            $finish;
        end
        arg_0 = 5'b00000;
        #0;
        if (7'b1010000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 7'b1010000, out);
            $finish;
        end
        arg_0 = 5'b00001;
        #0;
        if (7'b1100000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 7'b1100000, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
    function [6:0] kernel_do_stuff(input reg [4:0] arg_0);
        reg [4:0] or0;
        reg [0:0] or1;
        reg [3:0] or2;
        reg [5:0] or3;
        reg [5:0] or4;
        reg [0:0] or5;
        reg [1:0] or6;
        reg [5:0] or7;
        reg [5:0] or8;
        reg [5:0] or9;
        reg [6:0] or10;
        reg [5:0] or11;
        localparam ol0 = 6'b000000;
        localparam ol1 = 2'b00;
        localparam ol2 = 1'b0;
        localparam ol3 = 2'b01;
        localparam ol4 = 1'b1;
        localparam ol5 = 2'b10;
        localparam ol6 = 1'b1;
        localparam ol7 = 1'b0;
        localparam ol8 = 1'b1;
        localparam ol9 = 6'b000000;
        begin
            or0 = arg_0;
            // let b = match a.val() {
            //    Ok(data, )#true => ReadResponse/* option::ReadResponse<rhdl::rhdl_typenum::consts::U4> */ {data: data, resp: ResponseCode :: OKAY,},
            //    Err(e, )#false => ReadResponse/* option::ReadResponse<rhdl::rhdl_typenum::consts::U4> */ {data: bits(0), resp: match e {
            //          const AXI4Error::SLVERR => ResponseCode :: SLVERR,
            //          const AXI4Error::DECERR => ResponseCode :: DECERR,
            //       },},
            // };
            //
            or1 = or0[4];
            or2 = or0[3:0];
            or3 = ol0; or3[3:0] = or2;
            or4 = or3; or4[5:4] = ol1;
            or5 = or0[0];
            case (or5)
                1'b0: or6 = ol3;
                1'b1: or6 = ol5;
            endcase
            or7 = ol9;
            or8 = or7; or8[5:4] = or6;
            case (or1)
                1'b1: or9 = or4;
                1'b0: or9 = or8;
            endcase
            // signal(Some(b))
            //
            or11 = or9[5:0];
            or10 = { ol8, or11 };
            kernel_do_stuff = or10;
        end
    endfunction
endmodule
