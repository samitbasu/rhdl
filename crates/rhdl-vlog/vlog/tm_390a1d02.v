// Autogenerated testbench for dut
module testbench();
    wire [0:0] out;
    reg [3:0] arg_0;
    reg [3:0] arg_1;
    dut t (.out(out),.arg_0(arg_0),.arg_1(arg_1));
    initial begin
        arg_0 = 4'sb0001;
        arg_1 = 4'sb0001;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 1'b1, out);
            $finish;
        end
        arg_0 = 4'sb0001;
        arg_1 = 4'sb0010;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb0001;
        arg_1 = 4'sb0011;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb0001;
        arg_1 = 4'sb1111;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb0001;
        arg_1 = 4'sb1101;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 4", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb0010;
        arg_1 = 4'sb0001;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 5", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb0010;
        arg_1 = 4'sb0010;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 6", 1'b1, out);
            $finish;
        end
        arg_0 = 4'sb0010;
        arg_1 = 4'sb0011;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 7", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb0010;
        arg_1 = 4'sb1111;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 8", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb0010;
        arg_1 = 4'sb1101;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 9", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb0011;
        arg_1 = 4'sb0001;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 10", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb0011;
        arg_1 = 4'sb0010;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 11", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb0011;
        arg_1 = 4'sb0011;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 12", 1'b1, out);
            $finish;
        end
        arg_0 = 4'sb0011;
        arg_1 = 4'sb1111;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 13", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb0011;
        arg_1 = 4'sb1101;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 14", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb1111;
        arg_1 = 4'sb0001;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 15", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb1111;
        arg_1 = 4'sb0010;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 16", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb1111;
        arg_1 = 4'sb0011;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 17", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb1111;
        arg_1 = 4'sb1111;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 18", 1'b1, out);
            $finish;
        end
        arg_0 = 4'sb1111;
        arg_1 = 4'sb1101;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 19", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb1101;
        arg_1 = 4'sb0001;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 20", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb1101;
        arg_1 = 4'sb0010;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 21", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb1101;
        arg_1 = 4'sb0011;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 22", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb1101;
        arg_1 = 4'sb1111;
        #0;
        if (1'b0 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 23", 1'b0, out);
            $finish;
        end
        arg_0 = 4'sb1101;
        arg_1 = 4'sb1101;
        #0;
        if (1'b1 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 24", 1'b1, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
endmodule
//
module dut(input wire [3:0] arg_0, input wire [3:0] arg_1, output reg [0:0] out);
    reg [0:0] r0;
    reg [0:0] r1;
    reg [0:0] r2;
    reg [0:0] r3;
    reg [0:0] r4;
    reg [0:0] r5;
    reg [0:0] r6;
    reg [0:0] r7;
    reg [0:0] r8;
    always @(*) begin
        r0 = arg_0[0];
        r1 = arg_0[1];
        r2 = arg_0[2];
        r3 = arg_0[3];
        r4 = arg_1[0];
        r5 = arg_1[1];
        r6 = arg_1[2];
        r7 = arg_1[3];
        // signal(a == b)
        //
        { r8 } = $signed({ r3, r2, r1, r0 }) == $signed({ r7, r6, r5, r4 });
        out = { r8 };
    end
endmodule
