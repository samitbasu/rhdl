// Autogenerated testbench for kernel_add
module testbench();
    wire [7:0] out;
    reg [15:0] arg_0;
    assign out = kernel_add(arg_0);
    initial begin
        arg_0 = 16'b0000001000000001;
        #0;
        if (8'b00000011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 8'b00000011, out);
            $finish;
        end
        arg_0 = 16'b0000010000000011;
        #0;
        if (8'b00000111 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 8'b00000111, out);
            $finish;
        end
        arg_0 = 16'b0000011000000101;
        #0;
        if (8'b00001011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 8'b00001011, out);
            $finish;
        end
        arg_0 = 16'b0000100000000111;
        #0;
        if (8'b00001111 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 8'b00001111, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
    function [7:0] kernel_add(input reg [15:0] arg_0);
        reg [15:0] or0;
        reg [7:0] or1;
        reg [7:0] or2;
        reg [7:0] or3;
        reg [7:0] or4;
        begin
            or0 = arg_0;
            // let Foo {a: a, b: b,} = state.val();
            //
            or1 = or0[7:0];
            or2 = or0[15:8];
            // signal((a + b).resize())
            //
            or3 = or1 + or2;
            or4 = or3[7:0];
            kernel_add = or4;
        end
    endfunction
endmodule
