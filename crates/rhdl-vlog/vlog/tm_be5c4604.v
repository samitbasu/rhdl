// Autogenerated testbench for dut
module testbench();
    wire [7:0] out;
    reg [63:0] arg_0;
    reg [2:0] arg_1;
    dut t (.out(out),.arg_0(arg_0),.arg_1(arg_1));
    initial begin
        arg_0 = 64'b0110110001101011011010100110100101101000011001110110011001100101;
        arg_1 = 3'b000;
        #0;
        if (8'b01100101 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 0", 8'b01100101, out);
            $finish;
        end
        arg_0 = 64'b0110110001101011011010100110100101101000011001110110011001100101;
        arg_1 = 3'b001;
        #0;
        if (8'b01100110 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 1", 8'b01100110, out);
            $finish;
        end
        arg_0 = 64'b0110110001101011011010100110100101101000011001110110011001100101;
        arg_1 = 3'b010;
        #0;
        if (8'b01100111 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 2", 8'b01100111, out);
            $finish;
        end
        arg_0 = 64'b0110110001101011011010100110100101101000011001110110011001100101;
        arg_1 = 3'b011;
        #0;
        if (8'b01101000 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 3", 8'b01101000, out);
            $finish;
        end
        arg_0 = 64'b0110110001101011011010100110100101101000011001110110011001100101;
        arg_1 = 3'b100;
        #0;
        if (8'b01101001 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 4", 8'b01101001, out);
            $finish;
        end
        arg_0 = 64'b0110110001101011011010100110100101101000011001110110011001100101;
        arg_1 = 3'b101;
        #0;
        if (8'b01101010 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 5", 8'b01101010, out);
            $finish;
        end
        arg_0 = 64'b0110110001101011011010100110100101101000011001110110011001100101;
        arg_1 = 3'b110;
        #0;
        if (8'b01101011 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 6", 8'b01101011, out);
            $finish;
        end
        arg_0 = 64'b0110110001101011011010100110100101101000011001110110011001100101;
        arg_1 = 3'b111;
        #0;
        if (8'b01101100 !== out) begin
            $display("ASSERTION FAILED 0x%0h !== 0x%0h CASE 7", 8'b01101100, out);
            $finish;
        end
        $display("TESTBENCH OK", );
        $finish;
    end
endmodule
//
module dut(input wire [63:0] arg_0, input wire [2:0] arg_1, output reg [7:0] out);
    reg [0:0] r8;
    reg [0:0] r9;
    reg [0:0] r10;
    reg [0:0] r11;
    reg [0:0] r12;
    reg [0:0] r13;
    reg [0:0] r14;
    reg [0:0] r15;
    reg [0:0] r16;
    reg [0:0] r17;
    reg [0:0] r18;
    reg [0:0] r19;
    reg [0:0] r20;
    reg [0:0] r21;
    reg [0:0] r22;
    reg [0:0] r23;
    reg [0:0] r24;
    reg [0:0] r25;
    reg [0:0] r26;
    reg [0:0] r27;
    reg [0:0] r28;
    reg [0:0] r29;
    reg [0:0] r30;
    reg [0:0] r31;
    reg [0:0] r32;
    reg [0:0] r33;
    reg [0:0] r34;
    reg [0:0] r35;
    reg [0:0] r36;
    reg [0:0] r37;
    reg [0:0] r38;
    reg [0:0] r39;
    reg [0:0] r40;
    reg [0:0] r41;
    reg [0:0] r42;
    reg [0:0] r43;
    reg [0:0] r44;
    reg [0:0] r45;
    reg [0:0] r46;
    reg [0:0] r47;
    reg [0:0] r48;
    reg [0:0] r49;
    reg [0:0] r50;
    reg [0:0] r51;
    reg [0:0] r52;
    reg [0:0] r53;
    reg [0:0] r54;
    reg [0:0] r55;
    reg [0:0] r56;
    reg [0:0] r57;
    reg [0:0] r58;
    reg [0:0] r59;
    reg [0:0] r60;
    reg [0:0] r61;
    reg [0:0] r62;
    reg [0:0] r63;
    reg [0:0] r64;
    reg [0:0] r65;
    reg [0:0] r66;
    reg [0:0] r67;
    reg [0:0] r68;
    reg [0:0] r69;
    reg [0:0] r70;
    reg [0:0] r71;
    reg [0:0] r128;
    reg [0:0] r129;
    reg [0:0] r130;
    reg [0:0] r131;
    reg [0:0] r132;
    reg [0:0] r133;
    reg [0:0] r134;
    reg [0:0] r135;
    reg [0:0] r136;
    reg [0:0] r137;
    reg [0:0] r138;
    always @(*) begin
        r8 = arg_0[0];
        r9 = arg_0[1];
        r10 = arg_0[2];
        r11 = arg_0[3];
        r12 = arg_0[4];
        r13 = arg_0[5];
        r14 = arg_0[6];
        r15 = arg_0[7];
        r16 = arg_0[8];
        r17 = arg_0[9];
        r18 = arg_0[10];
        r19 = arg_0[11];
        r20 = arg_0[12];
        r21 = arg_0[13];
        r22 = arg_0[14];
        r23 = arg_0[15];
        r24 = arg_0[16];
        r25 = arg_0[17];
        r26 = arg_0[18];
        r27 = arg_0[19];
        r28 = arg_0[20];
        r29 = arg_0[21];
        r30 = arg_0[22];
        r31 = arg_0[23];
        r32 = arg_0[24];
        r33 = arg_0[25];
        r34 = arg_0[26];
        r35 = arg_0[27];
        r36 = arg_0[28];
        r37 = arg_0[29];
        r38 = arg_0[30];
        r39 = arg_0[31];
        r40 = arg_0[32];
        r41 = arg_0[33];
        r42 = arg_0[34];
        r43 = arg_0[35];
        r44 = arg_0[36];
        r45 = arg_0[37];
        r46 = arg_0[38];
        r47 = arg_0[39];
        r48 = arg_0[40];
        r49 = arg_0[41];
        r50 = arg_0[42];
        r51 = arg_0[43];
        r52 = arg_0[44];
        r53 = arg_0[45];
        r54 = arg_0[46];
        r55 = arg_0[47];
        r56 = arg_0[48];
        r57 = arg_0[49];
        r58 = arg_0[50];
        r59 = arg_0[51];
        r60 = arg_0[52];
        r61 = arg_0[53];
        r62 = arg_0[54];
        r63 = arg_0[55];
        r64 = arg_0[56];
        r65 = arg_0[57];
        r66 = arg_0[58];
        r67 = arg_0[59];
        r68 = arg_0[60];
        r69 = arg_0[61];
        r70 = arg_0[62];
        r71 = arg_0[63];
        r136 = arg_1[0];
        r137 = arg_1[1];
        r138 = arg_1[2];
        // let a = a.val();
        //
        // signal(a[b])
        //
        case ({ r138, r137, r136 })
            3'b000: r128 = r8;
            3'b001: r128 = r16;
            3'b010: r128 = r24;
            3'b011: r128 = r32;
            3'b100: r128 = r40;
            3'b101: r128 = r48;
            3'b110: r128 = r56;
            3'b111: r128 = r64;
        endcase
        case ({ r138, r137, r136 })
            3'b000: r129 = r9;
            3'b001: r129 = r17;
            3'b010: r129 = r25;
            3'b011: r129 = r33;
            3'b100: r129 = r41;
            3'b101: r129 = r49;
            3'b110: r129 = r57;
            3'b111: r129 = r65;
        endcase
        case ({ r138, r137, r136 })
            3'b000: r130 = r10;
            3'b001: r130 = r18;
            3'b010: r130 = r26;
            3'b011: r130 = r34;
            3'b100: r130 = r42;
            3'b101: r130 = r50;
            3'b110: r130 = r58;
            3'b111: r130 = r66;
        endcase
        case ({ r138, r137, r136 })
            3'b000: r131 = r11;
            3'b001: r131 = r19;
            3'b010: r131 = r27;
            3'b011: r131 = r35;
            3'b100: r131 = r43;
            3'b101: r131 = r51;
            3'b110: r131 = r59;
            3'b111: r131 = r67;
        endcase
        case ({ r138, r137, r136 })
            3'b000: r132 = r12;
            3'b001: r132 = r20;
            3'b010: r132 = r28;
            3'b011: r132 = r36;
            3'b100: r132 = r44;
            3'b101: r132 = r52;
            3'b110: r132 = r60;
            3'b111: r132 = r68;
        endcase
        case ({ r138, r137, r136 })
            3'b000: r133 = r13;
            3'b001: r133 = r21;
            3'b010: r133 = r29;
            3'b011: r133 = r37;
            3'b100: r133 = r45;
            3'b101: r133 = r53;
            3'b110: r133 = r61;
            3'b111: r133 = r69;
        endcase
        case ({ r138, r137, r136 })
            3'b000: r134 = r14;
            3'b001: r134 = r22;
            3'b010: r134 = r30;
            3'b011: r134 = r38;
            3'b100: r134 = r46;
            3'b101: r134 = r54;
            3'b110: r134 = r62;
            3'b111: r134 = r70;
        endcase
        case ({ r138, r137, r136 })
            3'b000: r135 = r15;
            3'b001: r135 = r23;
            3'b010: r135 = r31;
            3'b011: r135 = r39;
            3'b100: r135 = r47;
            3'b101: r135 = r55;
            3'b110: r135 = r63;
            3'b111: r135 = r71;
        endcase
        out = { r135, r134, r133, r132, r131, r130, r129, r128 };
    end
endmodule
